<09.01.2017 12:57:24> [INFO] [2017-09-01 12:57:24] Calling Perform Action
<09.01.2017 12:57:26> [INFO] [2017-09-01 12:57:26] DECLARE
 DEFAULT_DATA_PATH    VARCHAR2(513);
   SYSTEM_FILE    VARCHAR2(513);
   I PLS_INTEGER;
   C CHAR(1);
   CNT PLS_INTEGER;
   DATA_TS_NAME VARCHAR2(30);
   DATA_TS_PATH VARCHAR2(513);
   DATA_TS_SIZE VARCHAR2(30);
   INDEX_TS_NAME VARCHAR2(30);
   INDEX_TS_PATH VARCHAR2(513);
   INDEX_TS_SIZE VARCHAR2(30);
   LOB_TS_NAME VARCHAR2(30);
   LOB_TS_PATH VARCHAR2(513);
   LOB_TS_SIZE VARCHAR2(30);
   BCREATETS BOOLEAN;
   VSQL VARCHAR2(4000);
 BEGIN
   EXECUTE IMMEDIATE 'SELECT FILE_NAME FROM SYS.DBA_DATA_FILES WHERE TABLESPACE_NAME = ''SYSTEM'' AND ROWNUM < 2' INTO SYSTEM_FILE;
   I:=LENGTH(SYSTEM_FILE);
   WHILE (I>0) LOOP
     C:=SUBSTR(SYSTEM_FILE,I,1);
     IF C='/' OR C='\' THEN 
       EXIT;
     END IF;
     I:=I-1;
   END LOOP;
   DEFAULT_DATA_PATH := SUBSTR(SYSTEM_FILE,1,I);
   DBMS_OUTPUT.PUT_LINE(DEFAULT_DATA_PATH);
   DATA_TS_NAME := 'PMDB_DAT1';  
   IF (INSTR(DATA_TS_NAME,'${') > 0 OR LENGTH(DATA_TS_NAME) = 0) THEN
     SELECT COUNT(*) INTO CNT FROM USER_TABLESPACES WHERE TABLESPACE_NAME = 'PMDB_DAT1';
     IF (CNT = 0) THEN
       DATA_TS_NAME := 'PMDB_DAT1';
       BCREATETS := TRUE;
     ELSE
       BCREATETS := FALSE;
     END IF;
   ELSE
     SELECT COUNT(*) INTO CNT FROM USER_TABLESPACES WHERE TABLESPACE_NAME = DATA_TS_NAME;
     IF (CNT = 0) THEN
       BCREATETS := TRUE;
     ELSE
       BCREATETS := FALSE;
     END IF;
   END IF;
   IF BCREATETS THEN
     DATA_TS_PATH := 'C:\ORACLEXE\ORADATA\XE\EXPDB.DBF';
     IF INSTR(DATA_TS_PATH,'${') > 0 OR LENGTH(DATA_TS_PATH) = 0 OR DATA_TS_PATH IS NULL THEN
       DATA_TS_PATH := DEFAULT_DATA_PATH || DATA_TS_NAME || '.DBF';
     END IF;
     DATA_TS_SIZE := '250M'; 
     IF INSTR(DATA_TS_SIZE,'${') > 0 OR LENGTH(DATA_TS_SIZE) = 0 THEN
           DATA_TS_SIZE := '250M';
     END IF;
     VSQL := 'CREATE TABLESPACE ' || DATA_TS_NAME || ' DATAFILE ''' || DATA_TS_PATH || ''' SIZE ' || DATA_TS_SIZE || ' AUTOEXTEND ON NEXT 10M';
     DBMS_OUTPUT.PUT_LINE(VSQL);
     EXECUTE IMMEDIATE VSQL;
   END IF;
   INDEX_TS_NAME := 'PMDB_NDX1';  
   IF (INSTR(INDEX_TS_NAME,'${') > 0 OR LENGTH(INDEX_TS_NAME) = 0) THEN
     SELECT COUNT(*) INTO CNT FROM USER_TABLESPACES WHERE TABLESPACE_NAME = 'PMDB_NDX1';
     IF (CNT = 0) THEN
       INDEX_TS_NAME := 'PMDB_NDX1';
       BCREATETS := TRUE;
     ELSE
       BCREATETS := FALSE;
     END IF;
   ELSE
     SELECT COUNT(*) INTO CNT FROM USER_TABLESPACES WHERE TABLESPACE_NAME = INDEX_TS_NAME;
     IF (CNT = 0) THEN
       BCREATETS := TRUE;
     ELSE
       BCREATETS := FALSE;
     END IF;
   END IF;
   IF BCREATETS THEN
     INDEX_TS_PATH := 'C:\ORACLEXE\ORADATA\XE\INDX.DBF';
     IF INSTR(INDEX_TS_PATH,'${') > 0 OR LENGTH(INDEX_TS_PATH) = 0 OR INDEX_TS_PATH IS NULL THEN
       INDEX_TS_PATH := DEFAULT_DATA_PATH || INDEX_TS_NAME || '.DBF';
     END IF;
     INDEX_TS_SIZE := '250M';
     IF INSTR(INDEX_TS_SIZE,'${') > 0 OR LENGTH(INDEX_TS_SIZE) = 0 THEN
               INDEX_TS_SIZE := '250M';
     END IF;
     VSQL := 'CREATE TABLESPACE ' || INDEX_TS_NAME || ' DATAFILE ''' || INDEX_TS_PATH || ''' SIZE ' || INDEX_TS_SIZE || ' AUTOEXTEND ON NEXT 10M';
     DBMS_OUTPUT.PUT_LINE(VSQL);
     EXECUTE IMMEDIATE VSQL;
   END IF;
   LOB_TS_NAME := 'PMDB_LOB1'; 
   IF (INSTR(LOB_TS_NAME,'${') > 0 OR LENGTH(LOB_TS_NAME) = 0) THEN
     SELECT COUNT(*) INTO CNT FROM USER_TABLESPACES WHERE TABLESPACE_NAME = 'PMDB_LOB1';
     IF (CNT = 0) THEN
       LOB_TS_NAME := 'PMDB_LOB1';
       BCREATETS := TRUE;
     ELSE
       BCREATETS := FALSE;
     END IF;
   ELSE
     SELECT COUNT(*) INTO CNT FROM USER_TABLESPACES WHERE TABLESPACE_NAME = LOB_TS_NAME;
     IF (CNT = 0) THEN
       BCREATETS := TRUE;
     ELSE
       BCREATETS := FALSE;
     END IF;
   END IF;
   IF BCREATETS THEN
     LOB_TS_PATH := 'C:\ORACLEXE\ORADATA\XE\EXPBLOBS.DBF';
     IF INSTR(LOB_TS_PATH,'${') > 0 OR LENGTH(LOB_TS_PATH) = 0 OR LOB_TS_PATH IS NULL THEN
       LOB_TS_PATH := DEFAULT_DATA_PATH || LOB_TS_NAME || '.DBF';
     END IF;
     LOB_TS_SIZE := '250M';
     IF INSTR(LOB_TS_SIZE,'${') > 0 OR LENGTH(LOB_TS_SIZE) = 0 THEN
               LOB_TS_SIZE := '250M';
     END IF;
     VSQL := 'CREATE TABLESPACE ' || LOB_TS_NAME || ' DATAFILE ''' || LOB_TS_PATH || ''' SIZE ' || LOB_TS_SIZE || ' AUTOEXTEND ON NEXT 10M';
     DBMS_OUTPUT.PUT_LINE(VSQL);
     EXECUTE IMMEDIATE VSQL;
   END IF;
 END;
<09.01.2017 12:57:46> [INFO] [2017-09-01 12:57:46] CREATE USER ADMPRM$PM
        IDENTIFIED BY ---
        TEMPORARY TABLESPACE TEMP
        DEFAULT   TABLESPACE PMDB_DAT1
<09.01.2017 12:57:46> [INFO] [2017-09-01 12:57:46] GRANT DBA TO ADMPRM$PM
<09.01.2017 12:57:46> [INFO] [2017-09-01 12:57:46] GRANT CREATE ANY JOB TO ADMPRM$PM
<09.01.2017 12:57:46> [INFO] [2017-09-01 12:57:46] CREATE USER PRIVPRM$PM
        IDENTIFIED BY ---
        TEMPORARY TABLESPACE TEMP
        DEFAULT   TABLESPACE PMDB_DAT1
<09.01.2017 12:57:46> [INFO] [2017-09-01 12:57:46] GRANT CONNECT               TO PRIVPRM$PM
<09.01.2017 12:57:46> [INFO] [2017-09-01 12:57:46] CREATE USER PUBPRM$PM
        IDENTIFIED BY ---
        TEMPORARY TABLESPACE TEMP
        DEFAULT   TABLESPACE PMDB_DAT1
<09.01.2017 12:57:46> [INFO] [2017-09-01 12:57:46] GRANT CONNECT TO PUBPRM$PM
<09.01.2017 12:57:46> [INFO] [2017-09-01 12:57:46] CREATE TABLE ACCOUNT(
   ACCT_ID  NUMBER(10) NOT NULL,
   ACCT_SEQ_NUM  NUMBER(10) NOT NULL,
   ACCT_SHORT_NAME  VARCHAR2(40 CHAR) NOT NULL,
   ACCT_NAME  VARCHAR2(100 CHAR) NOT NULL,
   PARENT_ACCT_ID  NUMBER(10) NULL,
   ACCT_DESCR  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(ACCT_DESCR) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:47> [INFO] [2017-09-01 12:57:47] CREATE TABLE ACTVCODE(
   ACTV_CODE_ID  NUMBER(10) NOT NULL,
   ACTV_CODE_TYPE_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   SHORT_NAME  VARCHAR2(60 CHAR) NOT NULL,
   PARENT_ACTV_CODE_ID  NUMBER(10) NULL,
   ACTV_CODE_NAME  VARCHAR2(120 CHAR) NULL,
   COLOR  VARCHAR2(6 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:47> [INFO] [2017-09-01 12:57:47] CREATE TABLE ACTVTYPE(
   ACTV_CODE_TYPE_ID  NUMBER(10) NOT NULL,
   ACTV_SHORT_LEN  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   ACTV_CODE_TYPE  VARCHAR2(40 CHAR) NOT NULL,
   ACTV_CODE_TYPE_SCOPE  VARCHAR2(10 CHAR) NOT NULL,
   PROJ_ID  NUMBER(10) NULL,
   SUPER_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:47> [INFO] [2017-09-01 12:57:47] CREATE TABLE ADMIN_CONFIG(
   CONFIG_NAME  VARCHAR2(255 CHAR) NOT NULL,
   CONFIG_TYPE  VARCHAR2(10 CHAR) NULL,
   FACTORY_VERSION  VARCHAR2(10 CHAR) NULL,
   LAST_CHANGE_DATE  DATE DEFAULT SYSDATE NOT NULL,
   CONFIG_VALUE  VARCHAR2(255 CHAR) NULL,
   CONFIG_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(CONFIG_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE BASETYPE(
   BASE_TYPE_ID  NUMBER(10) NOT NULL,
   BASE_TYPE_SEQ_NUM  NUMBER(10) NOT NULL,
   BASE_TYPE  VARCHAR2(40 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE BGPLOG(
   LOG_TIME  DATE DEFAULT SYSDATE NULL,
   SOURCE  VARCHAR2(255 CHAR) NULL,
   TYPE  VARCHAR2(255 CHAR) NULL,
   DESCRIPTION  VARCHAR2(4000 CHAR) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE BRE_REGISTRY(
   BRE_REGISTRY_ID  VARCHAR2(50 CHAR) NOT NULL,
   IP_ADDRESS  VARCHAR2(30 CHAR) NOT NULL,
   START_TIME  DATE NOT NULL,
   LAST_TIME  DATE NULL,
   STATUS_CODE  CHAR(1 CHAR) NOT NULL,
   TORCHED_TIME  DATE NULL,
   CONFIG_NAME  VARCHAR2(30 CHAR) NOT NULL,
   CONFIG_CHANGED_FLAG  CHAR(1 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE BUDGCHNG(
   BUDG_CHNG_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   CHNG_DATE  DATE NOT NULL,
   CHNG_SHORT_NAME  VARCHAR2(32 CHAR) NOT NULL,
   CHNG_COST  NUMBER(23,6) NULL,
   CHNG_BY_NAME  VARCHAR2(255 CHAR) NULL,
   STATUS_CODE  VARCHAR2(30 CHAR) NULL,
   CHNG_DESCR  VARCHAR2(130 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE CALENDAR(
   CLNDR_ID  NUMBER(10) NOT NULL,
   DEFAULT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   RSRC_PRIVATE  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   CLNDR_NAME  VARCHAR2(255 CHAR) NOT NULL,
   PROJ_ID  NUMBER(10) NULL,
   BASE_CLNDR_ID  NUMBER(10) NULL,
   LAST_CHNG_DATE  DATE NULL,
   CLNDR_TYPE  VARCHAR2(16 CHAR) NULL,
   CLNDR_DATA  BLOB NULL,
   DAY_HR_CNT  NUMBER(10,2) NULL,
   WEEK_HR_CNT  NUMBER(10,2) NULL,
   YEAR_HR_CNT  NUMBER(10,2) NULL,
   MONTH_HR_CNT  NUMBER(10,2) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(CLNDR_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE COSTTYPE(
   COST_TYPE_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   COST_TYPE  VARCHAR2(36 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE CURRTYPE(
   CURR_ID  NUMBER(10) NOT NULL,
   DECIMAL_DIGIT_CNT  NUMBER(10) NOT NULL,
   CURR_SYMBOL  VARCHAR2(6 CHAR) NOT NULL,
   DECIMAL_SYMBOL  VARCHAR2(6 CHAR) NOT NULL,
   DIGIT_GROUP_SYMBOL  VARCHAR2(6 CHAR) NOT NULL,
   POS_CURR_FMT_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   NEG_CURR_FMT_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   CURR_TYPE  VARCHAR2(40 CHAR) NOT NULL,
   CURR_SHORT_NAME  VARCHAR2(6 CHAR) NOT NULL,
   GROUP_DIGIT_CNT  NUMBER(10) DEFAULT 3 NOT NULL,
   BASE_EXCH_RATE  NUMBER(22,6) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE DASHBOARD(
   DASHBOARD_ID  NUMBER(10) NOT NULL,
   DASHBOARD_NAME  VARCHAR2(255 CHAR) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   TABLE_NAME  VARCHAR2(30 CHAR) NULL,
   FK_ID  NUMBER(10) NULL,
   LOCK_FILTER_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   MAX_ROWS_PER_PORTLET  NUMBER(10) NULL,
   DASHBOARD_LAYOUT_DATA  VARCHAR2(4000 CHAR) NULL,
   PORTLET_SETTINGS_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(PORTLET_SETTINGS_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE DASHUSER(
   DASHBOARD_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE GLOBAL TEMPORARY TABLE DLTACCT(
   SESSION_ID  NUMBER(10) NOT NULL,
   ACCT_ID  NUMBER(10) NOT NULL
   )
 ON COMMIT PRESERVE ROWS
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE GLOBAL TEMPORARY TABLE DLTACTV(
   SESSION_ID  NUMBER(10) NOT NULL,
   ACTV_CODE_ID  NUMBER(10) NOT NULL
   )
 ON COMMIT PRESERVE ROWS
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE GLOBAL TEMPORARY TABLE DLTOBS(
   SESSION_ID  NUMBER(10) NOT NULL,
   OBS_ID  NUMBER(10) NOT NULL
   )
 ON COMMIT PRESERVE ROWS
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE GLOBAL TEMPORARY TABLE DLTROLE(
   SESSION_ID  NUMBER(10) NOT NULL,
   ROLE_ID  NUMBER(10) NOT NULL
   )
 ON COMMIT PRESERVE ROWS
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE GLOBAL TEMPORARY TABLE DLTRSRC(
   SESSION_ID  NUMBER(10) NOT NULL,
   RSRC_ID  NUMBER(10) NOT NULL
   )
 ON COMMIT PRESERVE ROWS
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE GLOBAL TEMPORARY TABLE DLTRSRL(
   SESSION_ID  NUMBER(10) NOT NULL,
   RSRC_ID  NUMBER(10) NOT NULL,
   ROLE_ID  NUMBER(10) NOT NULL
   )
 ON COMMIT PRESERVE ROWS
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE GLOBAL TEMPORARY TABLE DLTUSER(
   SESSION_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NOT NULL
   )
 ON COMMIT PRESERVE ROWS
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE DOCCATG(
   DOC_CATG_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   DOC_CATG_NAME  VARCHAR2(100 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE DOCREVIEW(
   DOC_REVIEW_ID  NUMBER(10) NOT NULL,
   DOC_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   REVIEW_NAME  VARCHAR2(255 CHAR) NULL,
   REVIEW_DESCR  VARCHAR2(255 CHAR) NULL,
   REVIEW_TYPE  VARCHAR2(15 CHAR) NULL,
   DUE_DATE  DATE NULL,
   STATUS  VARCHAR2(15 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE DOCREVIEWTASK(
   REVIEW_TASK_ID  NUMBER(10) NOT NULL,
   DOC_REVIEW_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   REVIEW_DATE  DATE NULL,
   COMMENTS  VARCHAR2(4000 CHAR) NULL,
   PRIORITY  NUMBER(10) NULL,
   STATUS  VARCHAR2(15 CHAR) NULL,
   ATTACHMENT_UUID  VARCHAR2(4000 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE DOCSTAT(
   DOC_STATUS_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   DOC_STATUS_CODE  VARCHAR2(36 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE DOCUMENT(
   DOC_ID  NUMBER(10) NOT NULL,
   DOC_SEQ_NUM  NUMBER(10) NOT NULL,
   DELIV_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   DOC_NAME  VARCHAR2(120 CHAR) NOT NULL,
   PARENT_DOC_ID  NUMBER(10) NULL,
   PROJ_ID  NUMBER(10) NULL,
   DOC_STATUS_ID  NUMBER(10) NULL,
   DOC_CATG_ID  NUMBER(10) NULL,
   DOC_DATE  DATE NULL,
   VERSION_NAME  VARCHAR2(20 CHAR) DEFAULT '1' NOT NULL,
   GUID  VARCHAR2(22 CHAR) NULL,
   TMPL_GUID  VARCHAR2(22 CHAR) NULL,
   DOC_SHORT_NAME  VARCHAR2(32 CHAR) NULL,
   AUTHOR_NAME  VARCHAR2(255 CHAR) NULL,
   PRIVATE_LOC  VARCHAR2(255 CHAR) NULL,
   PUBLIC_LOC  VARCHAR2(255 CHAR) NULL,
   DOC_CONTENT  BLOB NULL,
   RSRC_ID  NUMBER(10) NULL,
   DOC_MGMT_TYPE  VARCHAR2(10 CHAR) DEFAULT 'DM_LOCAL' NOT NULL,
   EXTERNAL_DOC_KEY  VARCHAR2(4000 CHAR) NULL,
   CR_EXTERNAL_DOC_KEY  VARCHAR2(4000 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(DOC_CONTENT) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:48> [INFO] [2017-09-01 12:57:48] CREATE TABLE EXPPROJ(
   PROJ_ID  NUMBER(10) NOT NULL,
   EXP_GROUP  VARCHAR2(255 CHAR) NOT NULL,
   EXP_PROJ_NAME  VARCHAR2(24 CHAR) NOT NULL,
   LOGIN_SUPPLIED_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   EXP_USER_NAME  VARCHAR2(40 CHAR) NULL,
   EXP_PASSWD  VARCHAR2(60 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE EXTAPP(
   APP_ID  NUMBER(10) NOT NULL,
   LOGIN_SUPPLY_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   APP_NAME  VARCHAR2(100 CHAR) NOT NULL,
   APP_EXE_NAME  VARCHAR2(100 CHAR) NOT NULL,
   PROJ_ID  NUMBER(10) NULL,
   APP_USER_NAME  VARCHAR2(40 CHAR) NULL,
   APP_PASSWD  VARCHAR2(100 CHAR) NULL,
   APP_DATA_NAME  VARCHAR2(100 CHAR) NULL,
   APP_PARM_STRING  VARCHAR2(255 CHAR) NULL,
   APP_DATA_LOC  VARCHAR2(255 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE FACTOR(
   FACT_ID  NUMBER(10) NOT NULL,
   FACT_SEQ_NUM  NUMBER(10) NOT NULL,
   FACT_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   FACT_NAME  VARCHAR2(100 CHAR) NOT NULL,
   DEF_FACT_VAL_ID  NUMBER(10) NULL,
   FACT_DESCR  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(FACT_DESCR) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE FACTVAL(
   FACT_VAL_ID  NUMBER(10) NOT NULL,
   FACT_ID  NUMBER(10) NOT NULL,
   FACT_VALUE  VARCHAR2(24 CHAR) NOT NULL,
   FACT_VALUE_DESCR  VARCHAR2(255 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE FILTPROP(
   FILTER_ID  NUMBER(10) NOT NULL,
   TABLE_NAME  VARCHAR2(16 CHAR) NOT NULL,
   FILTER_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   FILTER_NAME  VARCHAR2(40 CHAR) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   FILTER_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(FILTER_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE FINDATES(
   FIN_DATES_ID  NUMBER(10) NOT NULL,
   FIN_DATES_NAME  VARCHAR2(60 CHAR) NOT NULL,
   START_DATE  DATE NOT NULL,
   END_DATE  DATE NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE FORMCATG(
   FORM_CATG_ID  NUMBER(10) NOT NULL,
   FORM_CATG_NAME  VARCHAR2(255 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE FORMPROJ(
   FORM_TMPL_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE FORMTMPL(
   FORM_TMPL_ID  NUMBER(10) NOT NULL,
   FORM_TMPL_NAME  VARCHAR2(255 CHAR) NOT NULL,
   FORM_TMPL_DESC  VARCHAR2(4000 CHAR) NULL,
   FORM_CATG_ID  NUMBER(10) NULL,
   FORM_TMPL_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(FORM_TMPL_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE FUNDSRC(
   FUND_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   FUND_NAME  VARCHAR2(100 CHAR) NOT NULL,
   PARENT_FUND_ID  NUMBER(10) NULL,
   FUND_DESCR  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(FUND_DESCR) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE GCHANGE(
   GCHANGE_ID  NUMBER(10) NOT NULL,
   GCHANGE_NAME  VARCHAR2(40 CHAR) NOT NULL,
   GCHANGE_DATA  BLOB NULL,
   USER_ID  NUMBER(10) NULL,
   TABLE_NAME  VARCHAR2(20 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(GCHANGE_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE HQDATA(
   SESSION_ID  NUMBER(10) NOT NULL,
   CONTEXT_ID  NUMBER(10) NOT NULL,
   FK_ID  NUMBER(10) NOT NULL,
   VALUE  NUMBER(10) NOT NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE HQUERY(
   SESSION_ID  NUMBER(10) NOT NULL,
   CONTEXT_ID  NUMBER(10) NOT NULL,
   FK_ID  NUMBER(10) NOT NULL,
   ORDER_VALUE  VARCHAR2(4000 CHAR) NULL,
   ORDER_IDS  VARCHAR2(4000 CHAR) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE ISSUHIST(
   ISSUE_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   ISSUE_HISTORY  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(ISSUE_HISTORY) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE ITERATION(
   ITERATION_ID  NUMBER(10) NOT NULL,
   RELEASE_ID  NUMBER(10) NOT NULL,
   ITERATION_NAME  VARCHAR2(50 CHAR) NOT NULL,
   START_DATE  DATE NULL,
   END_DATE  DATE NULL,
   TERMINATION_DATE  DATE NULL,
   CAPACITY_PCT  NUMBER(10,2) DEFAULT 0 NULL,
   REMAIN_QTY  NUMBER(17,6) NULL,
   UPDATE_DATE  DATE DEFAULT SYSDATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) DEFAULT 'SYSTEM' NULL,
   CREATE_DATE  DATE DEFAULT SYSDATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) DEFAULT 'SYSTEM' NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE ITERDAYS(
   TASK_ID  NUMBER(10) NOT NULL,
   DAY_NUMBER  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   ITERATION_ID  NUMBER(10) NOT NULL,
   ACT_WORK_QTY  NUMBER(17,6) NULL,
   REMAIN_WORK_QTY  NUMBER(17,6) NULL,
   UPDATE_DATE  DATE DEFAULT SYSDATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) DEFAULT 'SYSTEM' NULL,
   CREATE_DATE  DATE DEFAULT SYSDATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) DEFAULT 'SYSTEM' NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE ITERGOAL(
   ITER_GOAL_ID  NUMBER(10) NOT NULL,
   ITERATION_ID  NUMBER(10) NOT NULL,
   GOAL_NAME  VARCHAR2(255 CHAR) NOT NULL,
   GOAL_DESCR  VARCHAR2(4000 CHAR) NOT NULL,
   STATUS_CODE  VARCHAR2(12 CHAR) DEFAULT 'IG_NOTSTART' NOT NULL,
   RFOLIO_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE JOBLOG(
   JOB_ID  NUMBER(10) NOT NULL,
   JOB_LOG_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(JOB_LOG_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE JOBRPT(
   JOB_ID  NUMBER(10) NOT NULL,
   RPT_ID  NUMBER(10) NOT NULL,
   TABLE_NAME  VARCHAR2(20 CHAR) NULL,
   FK_ID  NUMBER(10) NULL,
   JOBRPT_DATA  BLOB NULL,
   PERSONAL_PORTAL_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(JOBRPT_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE JOBSVC(
   JOB_ID  NUMBER(10) NOT NULL,
   PARENT_JOB_ID  NUMBER(10) NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   AUDIT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   JOB_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   JOB_NAME  VARCHAR2(100 CHAR) NOT NULL,
   USER_ID  NUMBER(10) NOT NULL,
   LAST_RUN_DATE  DATE NULL,
   STATUS_CODE  VARCHAR2(20 CHAR) NOT NULL,
   RECUR_DATA  VARCHAR2(255 CHAR) NULL,
   RECUR_TYPE  VARCHAR2(20 CHAR) NULL,
   SUBMITTED_DATE  DATE NULL,
   LAST_ERROR_DESCR  VARCHAR2(255 CHAR) NULL,
   AUDIT_FILE_PATH  VARCHAR2(255 CHAR) NULL,
   JOB_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(JOB_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:49> [INFO] [2017-09-01 12:57:49] CREATE TABLE LOCATION(
   LOCATION_ID  NUMBER(10) NOT NULL,
   LOCATION_NAME  VARCHAR2(255 CHAR) NOT NULL,
   LOCATION_TYPE  VARCHAR2(24 CHAR) NULL,
   ADDRESS_LINE1  VARCHAR2(200 CHAR) NULL,
   ADDRESS_LINE2  VARCHAR2(200 CHAR) NULL,
   ADDRESS_LINE3  VARCHAR2(200 CHAR) NULL,
   CITY_NAME  VARCHAR2(200 CHAR) NULL,
   MUNICIPALITY_NAME  VARCHAR2(200 CHAR) NULL,
   STATE_NAME  VARCHAR2(200 CHAR) NULL,
   STATE_CODE  VARCHAR2(2 CHAR) NULL,
   COUNTRY_NAME  VARCHAR2(200 CHAR) NULL,
   COUNTRY_CODE  VARCHAR2(3 CHAR) NULL,
   POSTAL_CODE  VARCHAR2(20 CHAR) NULL,
   LONGITUDE  NUMBER NULL,
   LATITUDE  NUMBER NULL,
   GEO_LOCATION  SDO_GEOMETRY NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE MEMOTYPE(
   MEMO_TYPE_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   EPS_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   PROJ_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   WBS_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   TASK_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   MEMO_TYPE  VARCHAR2(40 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE NEXTKEY(
   KEY_NAME  VARCHAR2(30 CHAR) NOT NULL,
   KEY_SEQ_NUM  NUMBER(10) NOT NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE NONWORK(
   NONWORK_TYPE_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   NONWORK_CODE  VARCHAR2(32 CHAR) NOT NULL,
   NONWORK_TYPE  VARCHAR2(40 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE NOTE(
   NOTE_ID  NUMBER(10) NOT NULL,
   TABLE_NAME  VARCHAR2(30 CHAR) NOT NULL,
   TYPE_NAME  VARCHAR2(30 CHAR) NOT NULL,
   FK_ID  NUMBER(10) NOT NULL,
   NOTE_DATE  DATE NOT NULL,
   NOTE_VALUE  VARCHAR2(4000 CHAR) NULL,
   USER_NAME  VARCHAR2(255 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE OBS(
   OBS_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   OBS_NAME  VARCHAR2(100 CHAR) NOT NULL,
   PARENT_OBS_ID  NUMBER(10) NULL,
   GUID  VARCHAR2(22 CHAR) NULL,
   OBS_DESCR  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(OBS_DESCR) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE OBSPROJ(
   OBS_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PCATTYPE(
   PROJ_CATG_TYPE_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   PROJ_CATG_SHORT_LEN  NUMBER(10) NOT NULL,
   PROJ_CATG_TYPE  VARCHAR2(40 CHAR) NOT NULL,
   SUPER_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   PROJ_CATG_TYPE_WT  NUMBER(10,2) DEFAULT 0 NULL,
   MAX_PROJ_CATG_WT  NUMBER(10,2) DEFAULT 0 NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PCATUSER(
   PROJ_CATG_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PCATVAL(
   PROJ_CATG_ID  NUMBER(10) NOT NULL,
   PROJ_CATG_TYPE_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   PROJ_CATG_SHORT_NAME  VARCHAR2(32 CHAR) NOT NULL,
   PARENT_PROJ_CATG_ID  NUMBER(10) NULL,
   PROJ_CATG_NAME  VARCHAR2(100 CHAR) NULL,
   PROJ_CATG_WT  NUMBER(10,2) DEFAULT 0 NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PFOLIO(
   PFOLIO_ID  NUMBER(10) NOT NULL,
   CLOSED_PROJ_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   WHATIF_PROJ_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   PFOLIO_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   PFOLIO_NAME  VARCHAR2(40 CHAR) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   PFOLIO_DESCR  VARCHAR2(255 CHAR) NULL,
   LAST_REFRESH_DATE  DATE NULL,
   PFOLIO_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(PFOLIO_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PHASE(
   PHASE_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   PHASE_NAME  VARCHAR2(100 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PKXREF(
   SYSTEM_ID  NUMBER(10) NULL,
   CONTEXT_NAME  VARCHAR2(30 CHAR) NULL,
   PK1  NUMBER(10) NULL,
   PK2  NUMBER(10) NULL,
   OLD_PK1  NUMBER(10) NULL,
   OLD_PK2  NUMBER(10) NULL,
   OLD_STR  VARCHAR2(40 CHAR) NULL,
   NEW_STR  VARCHAR2(40 CHAR) NULL,
   ADD_DATE  DATE DEFAULT SYSDATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE POBS(
   POBS_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   POBS_NAME  VARCHAR2(255 CHAR) NOT NULL,
   POBS_PARENT_ID  NUMBER(10) NULL,
   POBS_DESCR  VARCHAR2(255 CHAR) NULL,
   POBS_MANAGER  VARCHAR2(255 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PREFER(
   PREFER_ID  NUMBER(10) NOT NULL,
   HR_DECIMAL_CNT  NUMBER(10) NOT NULL,
   XFER_COMPLETE_DAY_CNT  NUMBER(10) NOT NULL,
   XFER_NOTSTART_DAY_CNT  NUMBER(10) NOT NULL,
   MAX_WBS_LEVEL_CNT  NUMBER(10) NOT NULL,
   MAX_RSRC_LEVEL_CNT  NUMBER(10) NOT NULL,
   MAX_ACCT_LEVEL_CNT  NUMBER(10) NOT NULL,
   MAX_TASK_ACTV_TYPE_CNT  NUMBER(10) NOT NULL,
   FUTURE_TS_CNT  NUMBER(10) NOT NULL,
   MAX_OBS_LEVEL_CNT  NUMBER(10) NOT NULL,
   WEEK_START_DAY_NUM  NUMBER(10) NOT NULL,
   TS_APPROVAL_LEVEL  NUMBER(10) NOT NULL,
   TASK_CODE_LEN  NUMBER(10) NOT NULL,
   PROJ_SHORT_LEN  NUMBER(10) NOT NULL,
   WBS_SHORT_LEN  NUMBER(10) NOT NULL,
   RSRC_SHORT_LEN  NUMBER(10) NOT NULL,
   ACCT_SHORT_LEN  NUMBER(10) NOT NULL,
   ROLE_SHORT_LEN  NUMBER(10) NOT NULL,
   MAX_BASE_CNT  NUMBER(10) NOT NULL,
   DEF_TARGET_DRTN_HR_CNT  NUMBER(10,2) NOT NULL,
   DAY_HR_CNT  NUMBER(10,2) NOT NULL,
   WEEK_HR_CNT  NUMBER(10,2) NOT NULL,
   YEAR_HR_CNT  NUMBER(10,2) NOT NULL,
   MONTH_HR_CNT  NUMBER(10,2) NOT NULL,
   MAX_ACTV_LEVEL_CNT  NUMBER(10) NOT NULL,
   MAX_EPS_LEVEL_CNT  NUMBER(10) NOT NULL,
   MAX_PCAT_LEVEL_CNT  NUMBER(10) NOT NULL,
   MAX_RCAT_LEVEL_CNT  NUMBER(10) NOT NULL,
   COMPLETE_TASK_HRS_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   DEFAULT_TIMESHEET_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   FUTURE_TS_HRS_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   EV_FIX_COST_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   TS_DAILY_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   NOTSTART_TASK_HRS_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   PRESTART_TASK_HRS_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   POSTEND_TASK_HRS_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   ERMM_ENABLED_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   NAME_SEP_CHAR  VARCHAR2(2 CHAR) NOT NULL,
   YEAR_CHAR  VARCHAR2(4 CHAR) NOT NULL,
   MONTH_CHAR  VARCHAR2(4 CHAR) NOT NULL,
   WEEK_CHAR  VARCHAR2(4 CHAR) NOT NULL,
   DAY_CHAR  VARCHAR2(4 CHAR) NOT NULL,
   HOUR_CHAR  VARCHAR2(4 CHAR) NOT NULL,
   MINUTE_CHAR  VARCHAR2(4 CHAR) NOT NULL,
   TS_APPROVAL_TYPE  VARCHAR2(20 CHAR) DEFAULT 'AT_PM_RM' NOT NULL,
   DB_NAME  VARCHAR2(20 CHAR) NOT NULL,
   TASKSUM_PERIOD_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   TRSRCSUM_PERIOD_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   DATABASE_VERSION  VARCHAR2(30 CHAR) NOT NULL,
   PHASE_LABEL  VARCHAR2(40 CHAR) NOT NULL,
   TS_APPROVE_USER_ID  NUMBER(10) NULL,
   CURR_ID  NUMBER(10) DEFAULT 1 NOT NULL,
   EV_USER_PCT  NUMBER(10) NULL,
   EV_ETC_USER_VALUE  NUMBER(10,2) NULL,
   EV_COMPUTE_TYPE  VARCHAR2(20 CHAR) NULL,
   EV_ETC_COMPUTE_TYPE  VARCHAR2(20 CHAR) NULL,
   RPT_HEADER_1  VARCHAR2(255 CHAR) NULL,
   RPT_HEADER_2  VARCHAR2(255 CHAR) NULL,
   RPT_HEADER_3  VARCHAR2(255 CHAR) NULL,
   RPT_FOOTER_1  VARCHAR2(255 CHAR) NULL,
   RPT_FOOTER_2  VARCHAR2(255 CHAR) NULL,
   RPT_FOOTER_3  VARCHAR2(255 CHAR) NULL,
   RPT_USER_1  VARCHAR2(255 CHAR) NULL,
   RPT_USER_2  VARCHAR2(255 CHAR) NULL,
   RPT_USER_3  VARCHAR2(255 CHAR) NULL,
   LICENSE_DATA  BLOB NULL,
   MAX_ROLE_LEVEL_CNT  NUMBER(10) NOT NULL,
   PAST_TS_CNT  NUMBER(10) DEFAULT 4 NOT NULL,
   PROJINIT_ADMIN_USER_ID  NUMBER(10) NOT NULL,
   DEFAULT_RSRC_SEC_ID  NUMBER(10) NULL,
   ALLOW_USER_TIME_PERIOD_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   EXP_ROOT_URL  VARCHAR2(255 CHAR) NULL,
   TS_RSRC_DEF_ASGN_ACTV_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(LICENSE_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PRMAUDIT(
   AUDIT_DATE  DATE NULL,
   TABLE_NAME  VARCHAR2(30 CHAR) NULL,
   PK1  VARCHAR2(255 CHAR) NULL,
   PK2  VARCHAR2(255 CHAR) NULL,
   PK3  VARCHAR2(255 CHAR) NULL,
   PK4  VARCHAR2(255 CHAR) NULL,
   OPER  VARCHAR2(1 CHAR) NULL,
   PRM_USER_NAME  VARCHAR2(255 CHAR) NULL,
   AUDIT_INFO  VARCHAR2(4000 CHAR) NULL,
   AUDIT_INFO_EXTENDED  BLOB NULL,
   LOGICAL_DELETE_FLAG  VARCHAR2(1 CHAR) NULL,
   RDBMS_USER_NAME  VARCHAR2(255 CHAR) NULL,
   OS_USER_NAME  VARCHAR2(255 CHAR) NULL,
   PROGRAM  VARCHAR2(255 CHAR) NULL,
   HOST_NAME  VARCHAR2(255 CHAR) NULL,
   APP_NAME  VARCHAR2(25 CHAR) NULL,
   NETADDRESS  VARCHAR2(24 CHAR) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(AUDIT_INFO_EXTENDED) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PRMQUEUE(
   QUEUE_NAME  VARCHAR2(30 CHAR) NOT NULL,
   MSG_KEY  VARCHAR2(32 CHAR) NOT NULL,
   ENQUEUE_DATE  DATE NOT NULL,
   ENQUEUE_USER  VARCHAR2(255 CHAR) NULL,
   STATUS_CODE  VARCHAR2(10 CHAR) NULL,
   PRIORITY  NUMBER(10) NULL,
   SENDER_NAME  VARCHAR2(255 CHAR) NULL,
   DEQUEUE_DATE  DATE NULL,
   DEQUEUE_USER  VARCHAR2(255 CHAR) NULL,
   RETRY_COUNT  NUMBER(10) NULL,
   MSG_TYPE  VARCHAR2(255 CHAR) NULL,
   MSG_SUB_TYPE  VARCHAR2(255 CHAR) NULL,
   KEY1  VARCHAR2(255 CHAR) NULL,
   KEY2  VARCHAR2(255 CHAR) NULL,
   ERR_MSG  VARCHAR2(4000 CHAR) NULL,
   QUEUE_PAYLOAD  VARCHAR2(4000 CHAR) NULL,
   QUEUE_PAYLOAD_EXTENDED  BLOB NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(QUEUE_PAYLOAD_EXTENDED) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROCGROUP(
   PROC_GROUP_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   PROC_GROUP_NAME  VARCHAR2(120 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROCITEM(
   PROC_ITEM_ID  NUMBER(10) NOT NULL,
   PROC_GROUP_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   PROC_NAME  VARCHAR2(120 CHAR) NOT NULL,
   PROC_WT  NUMBER(10,2) NULL,
   PROC_DESCR  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(PROC_DESCR) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROFILE(
   PROF_ID  NUMBER(10) NOT NULL,
   DEFAULT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   SUPERUSER_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   SCOPE_TYPE  VARCHAR2(12 CHAR) NOT NULL,
   PROF_NAME  VARCHAR2(100 CHAR) NOT NULL,
   PROF_DESCR  VARCHAR2(255 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROFPRIV(
   PROF_ID  NUMBER(10) NOT NULL,
   PRIV_NUM  NUMBER(10) NOT NULL,
   ALLOW_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROJCOST(
   COST_ITEM_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   TASK_ID  NUMBER(10) NOT NULL,
   AUTO_COMPUTE_ACT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   COST_LOAD_TYPE  VARCHAR2(12 CHAR) NOT NULL,
   ACCT_ID  NUMBER(10) NULL,
   COST_TYPE_ID  NUMBER(10) NULL,
   TARGET_COST  NUMBER(23,6) NULL,
   ACT_COST  NUMBER(23,6) NULL,
   REMAIN_COST  NUMBER(23,6) NULL,
   QTY_NAME  VARCHAR2(30 CHAR) NULL,
   TARGET_QTY  NUMBER(19,6) NOT NULL,
   COST_PER_QTY  NUMBER(21,8) NOT NULL,
   PO_NUMBER  VARCHAR2(32 CHAR) NULL,
   VENDOR_NAME  VARCHAR2(100 CHAR) NULL,
   COST_NAME  VARCHAR2(120 CHAR) NULL,
   COST_DESCR  BLOB NULL,
   POBS_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(COST_DESCR) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROJECT(
   PROJ_ID  NUMBER(10) NOT NULL,
   FY_START_MONTH_NUM  NUMBER(10) NOT NULL,
   CHNG_EFF_CMP_PCT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   RSRC_SELF_ADD_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   ALLOW_COMPLETE_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   RSRC_MULTI_ASSIGN_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   CHECKOUT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   PROJECT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   STEP_COMPLETE_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   COST_QTY_RECALC_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   SUM_ONLY_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   BATCH_SUM_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   NAME_SEP_CHAR  VARCHAR2(2 CHAR) NOT NULL,
   DEF_COMPLETE_PCT_TYPE  VARCHAR2(10 CHAR) DEFAULT 'CP_DRTN' NOT NULL,
   PROJ_SHORT_NAME  VARCHAR2(40 CHAR) NOT NULL,
   ACCT_ID  NUMBER(10) NULL,
   ORIG_PROJ_ID  NUMBER(10) NULL,
   SOURCE_PROJ_ID  NUMBER(10) NULL,
   BASE_TYPE_ID  NUMBER(10) NULL,
   CLNDR_ID  NUMBER(10) NULL,
   SUM_BASE_PROJ_ID  NUMBER(10) NULL,
   TASK_CODE_BASE  NUMBER(10) NULL,
   TASK_CODE_STEP  NUMBER(10) NULL,
   PRIORITY_NUM  NUMBER(10) NULL,
   WBS_MAX_SUM_LEVEL  NUMBER(10) NULL,
   RISK_LEVEL  NUMBER(10) NULL,
   STRGY_PRIORITY_NUM  NUMBER(10) NULL,
   LAST_CHECKSUM  NUMBER(10) NULL,
   CRITICAL_DRTN_HR_CNT  NUMBER(10,2) NULL,
   DEF_COST_PER_QTY  NUMBER(21,8) NULL,
   LAST_RECALC_DATE  DATE NULL,
   PLAN_START_DATE  DATE NULL,
   PLAN_END_DATE  DATE NULL,
   SCD_END_DATE  DATE NULL,
   ADD_DATE  DATE DEFAULT SYSDATE NOT NULL,
   SUM_DATA_DATE  DATE NULL,
   LAST_TASKSUM_DATE  DATE NULL,
   FCST_START_DATE  DATE NULL,
   DEF_DURATION_TYPE  VARCHAR2(12 CHAR) NULL,
   TASK_CODE_PREFIX  VARCHAR2(20 CHAR) NULL,
   GUID  VARCHAR2(22 CHAR) NULL,
   DEF_QTY_TYPE  VARCHAR2(24 CHAR) NULL,
   ADD_BY_NAME  VARCHAR2(255 CHAR) NULL,
   WEB_LOCAL_ROOT_PATH  VARCHAR2(120 CHAR) NULL,
   PROJ_URL  VARCHAR2(200 CHAR) NULL,
   DEF_RATE_TYPE  VARCHAR2(14 CHAR) NULL,
   ACT_THIS_PER_LINK_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   DEF_TASK_TYPE  VARCHAR2(12 CHAR) DEFAULT 'TT_TASK' NOT NULL,
   ACT_PCT_LINK_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   ADD_ACT_REMAIN_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   CRITICAL_PATH_TYPE  VARCHAR2(12 CHAR) DEFAULT 'CT_TOTFLOAT' NOT NULL,
   TASK_CODE_PREFIX_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   DEF_ROLLUP_DATES_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   REM_TARGET_LINK_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   RESET_PLANNED_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   ALLOW_NEG_ACT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   RSRC_ID  NUMBER(10) NULL,
   MSP_MANAGED_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   MSP_UPDATE_ACTUALS_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   CHECKOUT_DATE  DATE NULL,
   CHECKOUT_USER_ID  NUMBER(10) NULL,
   SUM_ASSIGN_LEVEL  VARCHAR2(12 CHAR) DEFAULT 'SL_TASKRSRC' NULL,
   LAST_FIN_DATES_ID  NUMBER(10) NULL,
   USE_PROJECT_BASELINE_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   LAST_BASELINE_UPDATE_DATE  DATE NULL,
   TS_RSRC_VW_COMPL_ASGN_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   TS_RSRC_MARK_ACT_FINISH_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   TS_RSRC_VW_INACT_ACTV_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   CR_EXTERNAL_KEY  VARCHAR2(4000 CHAR) NULL,
   APPLY_ACTUALS_DATE  DATE NULL,
   DESCRIPTION  VARCHAR2(500 CHAR) NULL,
   INTG_PROJ_TYPE  VARCHAR2(7 CHAR) NULL,
   MATRIX_ID  NUMBER(10) NULL,
   LOCATION_ID  NUMBER(10) NULL,
   CONTROL_UPDATES_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   HIST_INTERVAL  VARCHAR2(25 CHAR) DEFAULT 'MONTH' NOT NULL,
   HIST_LEVEL  VARCHAR2(10 CHAR) DEFAULT 'HL_NONE' NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROJEST(
   PROJ_EST_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   APPLIED_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   RSRC_TYPE  VARCHAR2(10 CHAR) DEFAULT 'RT_LABOR' NOT NULL,
   EST_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   EST_NAME  VARCHAR2(120 CHAR) NOT NULL,
   RSRC_ID  NUMBER(10) NULL,
   BU_CMPLX_VALUE  NUMBER(10) NULL,
   ADJ_MULT_PCT  NUMBER(10) NULL,
   FP_CNT  NUMBER(10) NULL,
   FP_CMPLX_VALUE  NUMBER(10) NULL,
   FP_UNADJ_CNT  NUMBER(10) NULL,
   EST_TASK_CNT  NUMBER(10) NULL,
   FP_PROD_AVG_VALUE  NUMBER(10,2) NULL,
   EST_QTY  NUMBER(17,6) NULL,
   EST_DATE  DATE NULL,
   EST_NOTES  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(EST_NOTES) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROJFUND(
   PROJ_FUND_ID  NUMBER(10) NOT NULL,
   FUND_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   FUND_COST  NUMBER(23,6) NULL,
   FUND_WT  NUMBER(10,2) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROJISSU(
   ISSUE_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   OBS_ID  NUMBER(10) NOT NULL,
   PRIORITY_TYPE  VARCHAR2(12 CHAR) NOT NULL,
   STATUS_CODE  VARCHAR2(12 CHAR) NOT NULL,
   ISSUE_NAME  VARCHAR2(100 CHAR) NOT NULL,
   THRESH_ID  NUMBER(10) NULL,
   TRACK_VIEW_ID  NUMBER(10) NULL,
   WBS_ID  NUMBER(10) NULL,
   TASK_ID  NUMBER(10) NULL,
   RSRC_ID  NUMBER(10) NULL,
   THRESH_PARM_ID  NUMBER(10) NULL,
   BASE_PROJ_ID  NUMBER(10) NULL,
   WORKSPACE_ID  NUMBER(10) NULL,
   ISSUE_VALUE  NUMBER(15,2) NULL,
   LO_PARM_VALUE  NUMBER(15,2) NULL,
   HI_PARM_VALUE  NUMBER(15,2) NULL,
   ADD_BY_NAME  VARCHAR2(255 CHAR) NULL,
   RESOLV_DATE  DATE NULL,
   ADD_DATE  DATE NULL,
   ISSUE_NOTES  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(ISSUE_NOTES) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROJPCAT(
   PROJ_ID  NUMBER(10) NOT NULL,
   PROJ_CATG_TYPE_ID  NUMBER(10) NOT NULL,
   PROJ_CATG_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROJPROP(
   PROJ_ID  NUMBER(10) NOT NULL,
   PROP_NAME  VARCHAR2(32 CHAR) NOT NULL,
   PROP_VALUE  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(PROP_VALUE) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROJRISK(
   RISK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   ADD_DATE  DATE NULL,
   STATUS_CODE  VARCHAR2(12 CHAR) NOT NULL,
   RISK_NAME  VARCHAR2(200 CHAR) NOT NULL,
   RISK_TYPE_ID  NUMBER(10) NULL,
   RSRC_ID  NUMBER(10) NULL,
   RISK_DESCR  BLOB NULL,
   RISK_TO_TYPE  VARCHAR2(12 CHAR) DEFAULT 'RT_THREAT' NOT NULL,
   IDENTIFIED_BY_ID  NUMBER(10) NULL,
   RESPONSE_TYPE  VARCHAR2(12 CHAR) NULL,
   RESPONSE_TEXT  VARCHAR2(255 CHAR) NULL,
   PRE_RSP_PRBLTY  VARCHAR2(2 CHAR) NULL,
   PRE_RSP_SCHD_PRBLTY  VARCHAR2(2 CHAR) NULL,
   PRE_RSP_COST_PRBLTY  VARCHAR2(2 CHAR) NULL,
   POST_RSP_PRBLTY  VARCHAR2(2 CHAR) NULL,
   POST_RSP_SCHD_PRBLTY  VARCHAR2(2 CHAR) NULL,
   POST_RSP_COST_PRBLTY  VARCHAR2(2 CHAR) NULL,
   RISK_CAUSE  VARCHAR2(4000 CHAR) NULL,
   RISK_EFFECT  VARCHAR2(4000 CHAR) NULL,
   NOTES  VARCHAR2(4000 CHAR) NULL,
   RISK_CODE  VARCHAR2(40 CHAR) DEFAULT 0 NOT NULL,
   RISK_DESC  VARCHAR2(4000 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(RISK_DESCR) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROJSHAR(
   PROJ_ID  NUMBER(10) NOT NULL,
   SESSION_ID  NUMBER(10) NOT NULL,
   ACCESS_LEVEL  NUMBER(10) NOT NULL,
   LOAD_STATUS  CHAR(1 CHAR) DEFAULT 'L' NOT NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROJTHRS(
   THRESH_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   OBS_ID  NUMBER(10) NOT NULL,
   THRESH_PARM_ID  NUMBER(10) NOT NULL,
   STATUS_CODE  VARCHAR2(12 CHAR) NOT NULL,
   PRIORITY_TYPE  VARCHAR2(12 CHAR) DEFAULT 'PT_NORMAL' NOT NULL,
   THRESH_TYPE  VARCHAR2(12 CHAR) DEFAULT 'TM_WBS' NOT NULL,
   WBS_ID  NUMBER(10) NULL,
   TRACK_VIEW_ID  NUMBER(10) NULL,
   LO_PARM_VALUE  NUMBER(15,2) NULL,
   HI_PARM_VALUE  NUMBER(15,2) NULL,
   WINDOW_START  VARCHAR2(50 CHAR) NULL,
   WINDOW_END  VARCHAR2(50 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROJWBS(
   WBS_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   OBS_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   EST_WT  NUMBER(10,2) NULL,
   PROJ_NODE_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   SUM_DATA_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   STATUS_CODE  VARCHAR2(20 CHAR) NOT NULL,
   WBS_SHORT_NAME  VARCHAR2(40 CHAR) NOT NULL,
   WBS_NAME  VARCHAR2(100 CHAR) NOT NULL,
   PHASE_ID  NUMBER(10) NULL,
   PARENT_WBS_ID  NUMBER(10) NULL,
   EV_USER_PCT  NUMBER(10) NULL,
   EV_ETC_USER_VALUE  NUMBER(10,2) NULL,
   ORIG_COST  NUMBER(23,6) NULL,
   INDEP_REMAIN_TOTAL_COST  NUMBER(23,6) NULL,
   ANN_DSCNT_RATE_PCT  NUMBER(18,6) NULL,
   DSCNT_PERIOD_TYPE  VARCHAR2(20 CHAR) NULL,
   INDEP_REMAIN_WORK_QTY  NUMBER(17,6) NULL,
   ANTICIP_START_DATE  DATE NULL,
   ANTICIP_END_DATE  DATE NULL,
   EV_COMPUTE_TYPE  VARCHAR2(20 CHAR) NULL,
   EV_ETC_COMPUTE_TYPE  VARCHAR2(20 CHAR) NULL,
   RESP_TEAM_ID  NUMBER(10) NULL,
   ITERATION_ID  NUMBER(10) NULL,
   GUID  VARCHAR2(22 CHAR) NULL,
   TMPL_GUID  VARCHAR2(22 CHAR) NULL,
   ORIGINAL_QTY  NUMBER(17,6) NULL,
   RQMT_REM_QTY  NUMBER(17,6) NULL,
   INTG_TYPE  VARCHAR2(7 CHAR) NULL,
   STATUS_REVIEWER  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PROJWSRPT(
   RPT_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PRPFOLIO(
   PFOLIO_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE PUBUSER(
   PUBLIC_GROUP_ID  NUMBER(10) NOT NULL,
   PRIVATE_DB_USER_NAME  VARCHAR2(255 CHAR) NOT NULL,
   PRIVATE_DB_PASSWD  VARCHAR2(255 CHAR) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE QUERYLIB(
   QUERY_LIB_ID  NUMBER(10) NOT NULL,
   APP_NAME  VARCHAR2(25 CHAR) NOT NULL,
   CORE_FLAG  VARCHAR2(1 CHAR) NOT NULL,
   MATCH_SQL  VARCHAR2(4000 CHAR) NOT NULL,
   HINTS  VARCHAR2(4000 CHAR) NULL,
   REPLACEMENT_SQL  VARCHAR2(4000 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE RCATTYPE(
   RSRC_CATG_TYPE_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   RSRC_CATG_SHORT_LEN  NUMBER(10) NOT NULL,
   RSRC_CATG_TYPE  VARCHAR2(40 CHAR) NOT NULL,
   SUPER_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE RCATVAL(
   RSRC_CATG_ID  NUMBER(10) NOT NULL,
   RSRC_CATG_TYPE_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   RSRC_CATG_SHORT_NAME  VARCHAR2(32 CHAR) NOT NULL,
   RSRC_CATG_NAME  VARCHAR2(100 CHAR) NULL,
   PARENT_RSRC_CATG_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE REFRDEL(
   DELETE_DATE  DATE DEFAULT SYSDATE NOT NULL,
   TABLE_NAME  VARCHAR2(30 CHAR) NOT NULL,
   PK1  VARCHAR2(255 CHAR) NOT NULL,
   PK2  VARCHAR2(255 CHAR) NULL,
   PK3  VARCHAR2(255 CHAR) NULL,
   PK4  VARCHAR2(255 CHAR) NULL,
   PROJ_ID  NUMBER(10) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE REITTYPE(
   RELATED_ITEM_TYPE_ID  NUMBER(10) NOT NULL,
   RELATED_ITEM  VARCHAR2(32 CHAR) NOT NULL,
   TABLE_NAME  VARCHAR2(30 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE RELEASE(
   RELEASE_ID  NUMBER(10) NOT NULL,
   RFOLIO_ID  NUMBER(10) NULL,
   RELEASE_NAME  VARCHAR2(60 CHAR) NOT NULL,
   START_DATE  DATE NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   RELEASE_THEME  VARCHAR2(255 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE RELITEMS(
   ITEM_TYPE_ID  NUMBER(10) NOT NULL,
   FK_ID  NUMBER(10) NOT NULL,
   RELATED_ITEM_TYPE_ID  NUMBER(10) NOT NULL,
   RELATED_FK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE RFOLIO(
   RFOLIO_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   RFOLIO_NAME  VARCHAR2(40 CHAR) NOT NULL,
   RFOLIO_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   RFOLIO_DESCR  VARCHAR2(255 CHAR) NULL,
   TEAM_CAPACITY_PCT  NUMBER(10,2) NULL,
   PARENT_RFOLIO_ID  NUMBER(10) NULL,
   RFOLIO_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(RFOLIO_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE RISKCTRL(
   RISK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   RISK_CONTROL  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(RISK_CONTROL) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE RISKTYPE(
   RISK_TYPE_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   RISK_TYPE  VARCHAR2(40 CHAR) NOT NULL,
   PARENT_RISK_TYPE_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE RLFOLIO(
   RLFOLIO_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   RLFOLIO_NAME  VARCHAR2(40 CHAR) NOT NULL,
   RLFOLIO_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   RLFOLIO_DESCR  VARCHAR2(255 CHAR) NULL,
   RLFOLIO_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(RLFOLIO_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE ROLELIMIT(
   ROLELIMIT_ID  NUMBER(10) NOT NULL,
   ROLE_ID  NUMBER(10) NOT NULL,
   START_DATE  DATE NOT NULL,
   MAX_QTY_PER_HR  NUMBER(16,8) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE ROLERATE(
   ROLE_RATE_ID  NUMBER(10) NOT NULL,
   ROLE_ID  NUMBER(10) NOT NULL,
   COST_PER_QTY  NUMBER(21,8) NULL,
   COST_PER_QTY2  NUMBER(21,8) NULL,
   COST_PER_QTY3  NUMBER(21,8) NULL,
   COST_PER_QTY4  NUMBER(21,8) NULL,
   COST_PER_QTY5  NUMBER(21,8) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE ROLES(
   ROLE_ID  NUMBER(10) NOT NULL,
   ROLE_SHORT_NAME  VARCHAR2(40 CHAR) NOT NULL,
   ROLE_NAME  VARCHAR2(100 CHAR) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   PARENT_ROLE_ID  NUMBER(10) NULL,
   DEF_COST_QTY_LINK_FLAG  VARCHAR2(1 CHAR) NOT NULL,
   COST_QTY_TYPE  VARCHAR2(24 CHAR) DEFAULT 'QT_HOUR' NOT NULL,
   POBS_ID  NUMBER(10) NULL,
   ROLE_DESCR  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(ROLE_DESCR) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE ROLFOLIO(
   RLFOLIO_ID  NUMBER(10) NOT NULL,
   ROLE_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:50> [INFO] [2017-09-01 12:57:50] CREATE TABLE RPT(
   RPT_ID  NUMBER(10) NOT NULL,
   GLOBAL_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   RPT_TYPE  VARCHAR2(12 CHAR) NOT NULL,
   RPT_NAME  VARCHAR2(80 CHAR) NOT NULL,
   RPT_AREA  VARCHAR2(32 CHAR) DEFAULT 'UNKNOWN' NOT NULL,
   RPT_GROUP_ID  NUMBER(10) NULL,
   PROJ_ID  NUMBER(10) NULL,
   RPT_STATE  VARCHAR2(10 CHAR) NULL,
   RPT_DATA  BLOB NULL,
   LAST_RUN_DATE  DATE NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(RPT_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RPTBATCH(
   RPT_BATCH_ID  NUMBER(10) NOT NULL,
   RPT_BATCH_NAME  VARCHAR2(80 CHAR) NOT NULL,
   PROJ_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RPTGROUP(
   RPT_GROUP_ID  NUMBER(10) NOT NULL,
   RPT_GROUP_SEQ_NUM  NUMBER(10) NOT NULL,
   RPT_GROUP_NAME  VARCHAR2(80 CHAR) NOT NULL,
   PARENT_GROUP_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RPTLIST(
   RPT_BATCH_ID  NUMBER(10) NOT NULL,
   RPT_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RSRC(
   RSRC_ID  NUMBER(10) NOT NULL,
   CLNDR_ID  NUMBER(10) NOT NULL,
   RSRC_SEQ_NUM  NUMBER(10) NOT NULL,
   TIMESHEET_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   ACTIVE_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   RSRC_TYPE  VARCHAR2(10 CHAR) DEFAULT 'RT_LABOR' NOT NULL,
   AUTO_COMPUTE_ACT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   OT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   DEF_COST_QTY_LINK_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   RSRC_SHORT_NAME  VARCHAR2(255 CHAR) NOT NULL,
   RSRC_NAME  VARCHAR2(255 CHAR) NOT NULL,
   PARENT_RSRC_ID  NUMBER(10) NULL,
   XFER_COMPLETE_DAY_CNT  NUMBER(10) NULL,
   XFER_NOTSTART_DAY_CNT  NUMBER(10) NULL,
   TS_APPROVE_USER_ID  NUMBER(10) NULL,
   USER_ID  NUMBER(10) NULL,
   ROLE_ID  NUMBER(10) NULL,
   CURR_ID  NUMBER(10) DEFAULT 1 NOT NULL,
   LAST_CHECKSUM  NUMBER(10) NULL,
   SHIFT_ID  NUMBER(10) NULL,
   OT_FACTOR  NUMBER(10,3) NULL,
   DEF_QTY_PER_HR  NUMBER(16,8) NULL,
   GUID  VARCHAR2(22 CHAR) NULL,
   COST_QTY_TYPE  VARCHAR2(24 CHAR) NULL,
   OFFICE_PHONE  VARCHAR2(32 CHAR) NULL,
   OTHER_PHONE  VARCHAR2(32 CHAR) NULL,
   EMPLOYEE_CODE  VARCHAR2(40 CHAR) NULL,
   RSRC_TITLE_NAME  VARCHAR2(100 CHAR) NULL,
   EMAIL_ADDR  VARCHAR2(120 CHAR) NULL,
   UNIT_ID  NUMBER(10) NULL,
   POBS_ID  NUMBER(10) NULL,
   RSRC_NOTES  BLOB NULL,
   INTG_TYPE  VARCHAR2(7 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   LOCATION_ID  NUMBER(10) NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(RSRC_NOTES) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RSRCANDASH(
   DASHBOARD_ID  NUMBER(10) NOT NULL,
   RSRCAN_VIEW_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RSRCANVIEW(
   RSRCAN_VIEW_ID  NUMBER(10) NOT NULL,
   RSRCAN_VIEW_NAME  VARCHAR2(255 CHAR) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   RSRCAN_VIEW_TYPE  VARCHAR2(20 CHAR) NULL,
   RSRCAN_VIEW_DATA  VARCHAR2(4000 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RSRCCURV(
   CURV_ID  NUMBER(10) NOT NULL,
   CURV_NAME  VARCHAR2(60 CHAR) NOT NULL,
   DEFAULT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   CURV_DATA  BLOB NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(CURV_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RSRCHOUR(
   RSRC_HR_ID  NUMBER(10) NOT NULL,
   RSRC_ID  NUMBER(10) NOT NULL,
   TS_ID  NUMBER(10) NOT NULL,
   TASK_TS_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   TASKRSRC_ID  NUMBER(10) NULL,
   NONWORK_TYPE_ID  NUMBER(10) NULL,
   PROJ_ID  NUMBER(10) NULL,
   PEND_HR_CNT  NUMBER(10,2) NULL,
   HR_CNT  NUMBER(10,2) NULL,
   PEND_OT_HR_CNT  NUMBER(10,2) NULL,
   OT_HR_CNT  NUMBER(10,2) NULL,
   WORK_DATE  DATE NULL,
   STATUS_CODE  VARCHAR2(20 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RSRCPROP(
   RSRC_ID  NUMBER(10) NOT NULL,
   PROP_NAME  VARCHAR2(20 CHAR) NOT NULL,
   PROP_VALUE  VARCHAR2(255 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RSRCRATE(
   RSRC_RATE_ID  NUMBER(10) NOT NULL,
   RSRC_ID  NUMBER(10) NOT NULL,
   START_DATE  DATE NOT NULL,
   SHIFT_PERIOD_ID  NUMBER(10) NULL,
   MAX_QTY_PER_HR  NUMBER(16,8) NULL,
   COST_PER_QTY  NUMBER(21,8) NULL,
   COST_PER_QTY2  NUMBER(21,8) NULL,
   COST_PER_QTY3  NUMBER(21,8) NULL,
   COST_PER_QTY4  NUMBER(21,8) NULL,
   COST_PER_QTY5  NUMBER(21,8) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RSRCRCAT(
   RSRC_ID  NUMBER(10) NOT NULL,
   RSRC_CATG_TYPE_ID  NUMBER(10) NOT NULL,
   RSRC_CATG_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RSRCROLE(
   RSRC_ID  NUMBER(10) NOT NULL,
   ROLE_ID  NUMBER(10) NOT NULL,
   SKILL_LEVEL  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RSRCSEC(
   USER_ID  NUMBER(10) NOT NULL,
   RSRC_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE RSRFOLIO(
   RFOLIO_ID  NUMBER(10) NOT NULL,
   RSRC_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE SCENARIO(
   SCENARIO_ID  NUMBER(10) NOT NULL,
   SCENARIO_NAME  VARCHAR2(255 CHAR) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   TABLE_NAME  VARCHAR2(30 CHAR) NULL,
   FK_ID  NUMBER(10) NULL,
   SCENARIO_TYPE  VARCHAR2(30 CHAR) NULL,
   VIEW_PREF_ID  NUMBER(10) NULL,
   VIEW_TYPE  VARCHAR2(30 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE SCENPROJ(
   SCENARIO_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   SELECTED_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE SCENROLE(
   SCENARIO_ID  NUMBER(10) NOT NULL,
   ROLE_ID  NUMBER(10) NOT NULL,
   SELECTED_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE SCENUSER(
   SCENARIO_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE SETTINGS(
   NAMESPACE  VARCHAR2(255 CHAR) NOT NULL,
   SETTING_NAME  VARCHAR2(255 CHAR) NOT NULL,
   SETTING_VALUE  VARCHAR2(4000 CHAR) NULL,
   USER_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE SHIFT(
   SHIFT_ID  NUMBER(10) NOT NULL,
   SHIFT_NAME  VARCHAR2(60 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE SHIFTPER(
   SHIFT_PERIOD_ID  NUMBER(10) NOT NULL,
   SHIFT_ID  NUMBER(10) NOT NULL,
   SHIFT_START_HR_NUM  NUMBER(10,3) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE SPIDMAP(
   SPID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   USER_NAME  VARCHAR2(255 CHAR) NULL,
   APP_NAME  VARCHAR2(25 CHAR) NULL,
   AUDIT_INFO_EXTENDED  BLOB NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(AUDIT_INFO_EXTENDED) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE SUMPROJCOST(
   PROJ_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   COST_TYPE_ID  NUMBER(10) NOT NULL,
   START_DATE  DATE NULL,
   END_DATE  DATE NULL,
   SPREAD_TYPE  VARCHAR2(20 CHAR) NULL,
   ACT_COST  NUMBER(23,6) NULL,
   REMAIN_COST  NUMBER(23,6) NULL,
   TARGET_COST  NUMBER(23,6) NULL,
   TOTAL_COST  NUMBER(23,6) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE SUMTASK(
   PROJ_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   BCWP  NUMBER(25,6) NULL,
   BCWS  NUMBER(25,6) NULL,
   EAC  NUMBER(25,6) NULL,
   EAC_WORK_QTY  NUMBER(22,6) NULL,
   ETC  NUMBER(25,6) NULL,
   ETC_WORK_QTY  NUMBER(22,6) NULL,
   PERFM_WORK_QTY  NUMBER(22,6) NULL,
   SCHED_WORK_QTY  NUMBER(22,6) NULL,
   COMPLETE_CNT  NUMBER(10) NULL,
   ACTIVE_CNT  NUMBER(10) NULL,
   NOTSTARTED_CNT  NUMBER(10) NULL,
   BASE_COMPLETE_CNT  NUMBER(10) NULL,
   BASE_ACTIVE_CNT  NUMBER(10) NULL,
   BASE_NOTSTARTED_CNT  NUMBER(10) NULL,
   ACT_DRTN_HR_CNT  NUMBER(17,6) NULL,
   TOTAL_DRTN_HR_CNT  NUMBER(17,6) NULL,
   BASE_DRTN_HR_CNT  NUMBER(17,6) NULL,
   REMAIN_DRTN_HR_CNT  NUMBER(17,6) NULL,
   TOTAL_FLOAT_HR_CNT  NUMBER(17,6) NULL,
   ACT_END_DATE  DATE NULL,
   ACT_START_DATE  DATE NULL,
   BASE_END_DATE  DATE NULL,
   BASE_START_DATE  DATE NULL,
   REEND_DATE  DATE NULL,
   RESTART_DATE  DATE NULL,
   ACT_THIS_PER_WORK_COST  NUMBER(25,6) NULL,
   ACT_THIS_PER_WORK_QTY  NUMBER(22,6) NULL,
   ACT_THIS_PER_EQUIP_COST  NUMBER(25,6) NULL,
   ACT_THIS_PER_EQUIP_QTY  NUMBER(22,6) NULL,
   ACT_THIS_PER_MAT_COST  NUMBER(25,6) NULL,
   ACT_COST  NUMBER(25,6) NULL,
   ACT_EQUIP_COST  NUMBER(25,6) NULL,
   ACT_EXPENSE_COST  NUMBER(25,6) NULL,
   ACT_MAT_COST  NUMBER(25,6) NULL,
   ACT_WORK_COST  NUMBER(25,6) NULL,
   ACT_EQUIP_QTY  NUMBER(22,6) NULL,
   ACT_WORK_QTY  NUMBER(22,6) NULL,
   BASE_COST  NUMBER(25,6) NULL,
   BASE_EQUIP_COST  NUMBER(25,6) NULL,
   BASE_EXPENSE_COST  NUMBER(25,6) NULL,
   BASE_MAT_COST  NUMBER(25,6) NULL,
   BASE_WORK_COST  NUMBER(25,6) NULL,
   BASE_EQUIP_QTY  NUMBER(22,6) NULL,
   BASE_WORK_QTY  NUMBER(22,6) NULL,
   REMAIN_COST  NUMBER(25,6) NULL,
   REMAIN_EQUIP_COST  NUMBER(25,6) NULL,
   REMAIN_EXPENSE_COST  NUMBER(25,6) NULL,
   REMAIN_MAT_COST  NUMBER(25,6) NULL,
   REMAIN_WORK_COST  NUMBER(25,6) NULL,
   REMAIN_EQUIP_QTY  NUMBER(22,6) NULL,
   REMAIN_WORK_QTY  NUMBER(22,6) NULL,
   TARGET_COST  NUMBER(25,6) NULL,
   TARGET_EQUIP_COST  NUMBER(25,6) NULL,
   TARGET_EXPENSE_COST  NUMBER(25,6) NULL,
   TARGET_MAT_COST  NUMBER(25,6) NULL,
   TARGET_WORK_COST  NUMBER(25,6) NULL,
   TARGET_EQUIP_QTY  NUMBER(22,6) NULL,
   TARGET_WORK_QTY  NUMBER(22,6) NULL,
   TOTAL_COST  NUMBER(25,6) NULL,
   TOTAL_EQUIP_COST  NUMBER(25,6) NULL,
   TOTAL_EXPENSE_COST  NUMBER(25,6) NULL,
   TOTAL_MAT_COST  NUMBER(25,6) NULL,
   TOTAL_WORK_COST  NUMBER(25,6) NULL,
   TOTAL_EQUIP_QTY  NUMBER(22,6) NULL,
   TOTAL_WORK_QTY  NUMBER(22,6) NULL,
   TARGET_START_DATE  DATE NULL,
   TARGET_END_DATE  DATE NULL,
   TARGET_DRTN_HR_CNT  NUMBER(17,6) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE SUMTASKSPREAD(
   PROJ_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   START_DATE  DATE NOT NULL,
   END_DATE  DATE NOT NULL,
   SPREAD_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   ACT_COST  NUMBER(25,6) NULL,
   ACT_EQUIP_COST  NUMBER(25,6) NULL,
   ACT_EXPENSE_COST  NUMBER(25,6) NULL,
   ACT_MAT_COST  NUMBER(25,6) NULL,
   ACT_WORK_COST  NUMBER(25,6) NULL,
   ACT_EQUIP_QTY  NUMBER(22,6) NULL,
   ACT_WORK_QTY  NUMBER(22,6) NULL,
   BASE_COST  NUMBER(25,6) NULL,
   BASE_EQUIP_COST  NUMBER(25,6) NULL,
   BASE_EXPENSE_COST  NUMBER(25,6) NULL,
   BASE_MAT_COST  NUMBER(25,6) NULL,
   BASE_WORK_COST  NUMBER(25,6) NULL,
   BASE_EQUIP_QTY  NUMBER(22,6) NULL,
   BASE_WORK_QTY  NUMBER(22,6) NULL,
   LATE_REMAIN_COST  NUMBER(25,6) NULL,
   LATE_REMAIN_EQUIP_COST  NUMBER(25,6) NULL,
   LATE_REMAIN_EXPENSE_COST  NUMBER(25,6) NULL,
   LATE_REMAIN_MAT_COST  NUMBER(25,6) NULL,
   LATE_REMAIN_WORK_COST  NUMBER(25,6) NULL,
   LATE_REMAIN_EQUIP_QTY  NUMBER(22,6) NULL,
   LATE_REMAIN_WORK_QTY  NUMBER(22,6) NULL,
   REMAIN_COST  NUMBER(25,6) NULL,
   REMAIN_EQUIP_COST  NUMBER(25,6) NULL,
   REMAIN_EXPENSE_COST  NUMBER(25,6) NULL,
   REMAIN_MAT_COST  NUMBER(25,6) NULL,
   REMAIN_WORK_COST  NUMBER(25,6) NULL,
   REMAIN_EQUIP_QTY  NUMBER(22,6) NULL,
   REMAIN_WORK_QTY  NUMBER(22,6) NULL,
   TARGET_COST  NUMBER(25,6) NULL,
   TARGET_EQUIP_COST  NUMBER(25,6) NULL,
   TARGET_EXPENSE_COST  NUMBER(25,6) NULL,
   TARGET_MAT_COST  NUMBER(25,6) NULL,
   TARGET_WORK_COST  NUMBER(25,6) NULL,
   TARGET_EQUIP_QTY  NUMBER(22,6) NULL,
   TARGET_WORK_QTY  NUMBER(22,6) NULL,
   TOTAL_COST  NUMBER(25,6) NULL,
   TOTAL_EQUIP_COST  NUMBER(25,6) NULL,
   TOTAL_EXPENSE_COST  NUMBER(25,6) NULL,
   TOTAL_MAT_COST  NUMBER(25,6) NULL,
   TOTAL_WORK_COST  NUMBER(25,6) NULL,
   TOTAL_EQUIP_QTY  NUMBER(22,6) NULL,
   TOTAL_WORK_QTY  NUMBER(22,6) NULL,
   BCWP  NUMBER(25,6) NULL,
   BCWS  NUMBER(25,6) NULL,
   EAC  NUMBER(25,6) NULL,
   EAC_WORK_QTY  NUMBER(22,6) NULL,
   ETC  NUMBER(25,6) NULL,
   ETC_WORK_QTY  NUMBER(22,6) NULL,
   PERFM_WORK_QTY  NUMBER(22,6) NULL,
   SCHED_WORK_QTY  NUMBER(22,6) NULL,
   FIN_PERIOD_ACT_WORK_QTY  NUMBER(22,6) NULL,
   FIN_PERIOD_ACT_WORK_COST  NUMBER(25,6) NULL,
   FIN_PERIOD_ACT_EQUIP_QTY  NUMBER(22,6) NULL,
   FIN_PERIOD_ACT_EQUIP_COST  NUMBER(25,6) NULL,
   FIN_PERIOD_ACT_MAT_COST  NUMBER(25,6) NULL,
   FIN_PERIOD_ACT_EXPENSE_COST  NUMBER(25,6) NULL,
   FIN_PERIOD_TOTAL_WORK_QTY  NUMBER(22,6) NULL,
   FIN_PERIOD_TOTAL_WORK_COST  NUMBER(25,6) NULL,
   FIN_PERIOD_TOTAL_EQUIP_QTY  NUMBER(22,6) NULL,
   FIN_PERIOD_TOTAL_EQUIP_COST  NUMBER(25,6) NULL,
   FIN_PERIOD_TOTAL_MAT_COST  NUMBER(25,6) NULL,
   FIN_PERIOD_TOTAL_EXPENSE_COST  NUMBER(25,6) NULL,
   FIN_PERIOD_TOTAL_COST  NUMBER(25,6) NULL,
   FIN_PERIOD_ACT_COST  NUMBER(25,6) NULL,
   FIN_PERIOD_BCWP  NUMBER(25,6) NULL,
   FIN_PERIOD_PERFM_WORK_QTY  NUMBER(22,6) NULL,
   FIN_PERIOD_EAC  NUMBER(25,6) NULL,
   FIN_PERIOD_EAC_WORK_QTY  NUMBER(22,6) NULL,
   FIN_PERIOD_BCWS  NUMBER(25,6) NULL,
   FIN_PERIOD_SCHED_WORK_QTY  NUMBER(22,6) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE SUMTRSRC(
   SUMTRSRC_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NULL,
   WBS_ID  NUMBER(10) NULL,
   START_DATE  DATE NULL,
   END_DATE  DATE NULL,
   SPREAD_TYPE  VARCHAR2(20 CHAR) NULL,
   RSRC_ID  NUMBER(10) NULL,
   ROLE_ID  NUMBER(10) NULL,
   ACT_START_DATE  DATE NULL,
   ACT_END_DATE  DATE NULL,
   REMAIN_START_DATE  DATE NULL,
   REMAIN_END_DATE  DATE NULL,
   OVERALLOC_DATE  DATE NULL,
   STAFFED_ACT_QTY  NUMBER(23,6) NULL,
   UNSTAFFED_ACT_QTY  NUMBER(23,6) NULL,
   STAFFED_ACT_COST  NUMBER(23,6) NULL,
   UNSTAFFED_ACT_COST  NUMBER(23,6) NULL,
   STAFFED_ACT_OT_QTY  NUMBER(23,6) NULL,
   UNSTAFFED_ACT_OT_QTY  NUMBER(23,6) NULL,
   STAFFED_ACT_OT_COST  NUMBER(23,6) NULL,
   UNSTAFFED_ACT_OT_COST  NUMBER(23,6) NULL,
   STAFFED_ACT_REG_COST  NUMBER(23,6) NULL,
   UNSTAFFED_ACT_REG_COST  NUMBER(23,6) NULL,
   STAFFED_ACT_REG_QTY  NUMBER(23,6) NULL,
   UNSTAFFED_ACT_REG_QTY  NUMBER(23,6) NULL,
   STAFFED_LATE_REMAIN_QTY  NUMBER(23,6) NULL,
   UNSTAFFED_LATE_REMAIN_QTY  NUMBER(23,6) NULL,
   STAFFED_LATE_REMAIN_COST  NUMBER(23,6) NULL,
   UNSTAFFED_LATE_REMAIN_COST  NUMBER(23,6) NULL,
   STAFFED_REMAIN_QTY  NUMBER(23,6) NULL,
   UNSTAFFED_REMAIN_QTY  NUMBER(23,6) NULL,
   STAFFED_REMAIN_COST  NUMBER(23,6) NULL,
   UNSTAFFED_REMAIN_COST  NUMBER(23,6) NULL,
   STAFFED_TARGET_QTY  NUMBER(23,6) NULL,
   UNSTAFFED_TARGET_QTY  NUMBER(23,6) NULL,
   STAFFED_TARGET_COST  NUMBER(23,6) NULL,
   UNSTAFFED_TARGET_COST  NUMBER(23,6) NULL,
   STAFFED_TOTAL_QTY  NUMBER(23,6) NULL,
   UNSTAFFED_TOTAL_QTY  NUMBER(23,6) NULL,
   STAFFED_TOTAL_COST  NUMBER(23,6) NULL,
   UNSTAFFED_TOTAL_COST  NUMBER(23,6) NULL,
   FIN_PERIOD_ACT_QTY  NUMBER(23,6) NULL,
   FIN_PERIOD_ACT_COST  NUMBER(23,6) NULL,
   FIN_PERIOD_TOTAL_QTY  NUMBER(23,6) NULL,
   FIN_PERIOD_TOTAL_COST  NUMBER(23,6) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASK(
   TASK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   CLNDR_ID  NUMBER(10) NOT NULL,
   EST_WT  NUMBER(10,2) NULL,
   PHYS_COMPLETE_PCT  NUMBER(10,2) DEFAULT 0 NOT NULL,
   REV_FDBK_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   LOCK_PLAN_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   AUTO_COMPUTE_ACT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   COMPLETE_PCT_TYPE  VARCHAR2(10 CHAR) DEFAULT 'CP_DRTN' NOT NULL,
   TASK_TYPE  VARCHAR2(10 CHAR) NOT NULL,
   DURATION_TYPE  VARCHAR2(12 CHAR) NOT NULL,
   REVIEW_TYPE  VARCHAR2(12 CHAR) DEFAULT 'RV_OK' NOT NULL,
   STATUS_CODE  VARCHAR2(12 CHAR) NOT NULL,
   TASK_CODE  VARCHAR2(40 CHAR) NOT NULL,
   TASK_NAME  VARCHAR2(120 CHAR) NOT NULL,
   RSRC_ID  NUMBER(10) NULL,
   TOTAL_FLOAT_HR_CNT  NUMBER(17,6) NULL,
   FREE_FLOAT_HR_CNT  NUMBER(17,6) NULL,
   REMAIN_DRTN_HR_CNT  NUMBER(17,6) NULL,
   ACT_WORK_QTY  NUMBER(17,6) NULL,
   REMAIN_WORK_QTY  NUMBER(17,6) NULL,
   TARGET_WORK_QTY  NUMBER(17,6) NULL,
   TARGET_DRTN_HR_CNT  NUMBER(17,6) NULL,
   TARGET_EQUIP_QTY  NUMBER(17,6) NULL,
   ACT_EQUIP_QTY  NUMBER(17,6) NULL,
   REMAIN_EQUIP_QTY  NUMBER(17,6) NULL,
   CSTR_DATE  DATE NULL,
   ACT_START_DATE  DATE NULL,
   ACT_END_DATE  DATE NULL,
   LATE_START_DATE  DATE NULL,
   LATE_END_DATE  DATE NULL,
   EXPECT_END_DATE  DATE NULL,
   EARLY_START_DATE  DATE NULL,
   EARLY_END_DATE  DATE NULL,
   RESTART_DATE  DATE NULL,
   REEND_DATE  DATE NULL,
   TARGET_START_DATE  DATE NULL,
   TARGET_END_DATE  DATE NULL,
   REVIEW_END_DATE  DATE NULL,
   REM_LATE_START_DATE  DATE NULL,
   REM_LATE_END_DATE  DATE NULL,
   CSTR_TYPE  VARCHAR2(12 CHAR) NULL,
   PRIORITY_TYPE  VARCHAR2(12 CHAR) NULL,
   GUID  VARCHAR2(22 CHAR) NULL,
   TMPL_GUID  VARCHAR2(22 CHAR) NULL,
   CSTR_DATE2  DATE NULL,
   CSTR_TYPE2  VARCHAR2(12 CHAR) NULL,
   FLOAT_PATH  NUMBER(10) NULL,
   FLOAT_PATH_ORDER  NUMBER(10) NULL,
   ACT_THIS_PER_WORK_QTY  NUMBER(17,6) NULL,
   ACT_THIS_PER_EQUIP_QTY  NUMBER(17,6) NULL,
   DRIVING_PATH_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   SUSPEND_DATE  DATE NULL,
   RESUME_DATE  DATE NULL,
   EXTERNAL_EARLY_START_DATE  DATE NULL,
   EXTERNAL_LATE_END_DATE  DATE NULL,
   LOCATION_ID  NUMBER(10) NULL,
   CONTROL_UPDATES_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKACTV(
   TASK_ID  NUMBER(10) NOT NULL,
   ACTV_CODE_TYPE_ID  NUMBER(10) NOT NULL,
   ACTV_CODE_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKDOC(
   TASKDOC_ID  NUMBER(10) NOT NULL,
   DOC_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   WP_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   TASK_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKFDBK(
   TASK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   TASK_FDBK  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(TASK_FDBK) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKFIN(
   FIN_DATES_ID  NUMBER(10) NOT NULL,
   TASK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   ACT_WORK_QTY  NUMBER(17,6) NULL,
   ACT_WORK_COST  NUMBER(23,6) NULL,
   ACT_EQUIP_QTY  NUMBER(17,6) NULL,
   ACT_EQUIP_COST  NUMBER(23,6) NULL,
   ACT_MAT_COST  NUMBER(23,6) NULL,
   ACT_EXPENSE_COST  NUMBER(23,6) NULL,
   BCWP  NUMBER(23,6) NULL,
   SCHED_WORK_QTY  NUMBER(17,6) NULL,
   BCWS  NUMBER(23,6) NULL,
   PERFM_WORK_QTY  NUMBER(17,6) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKMEMO(
   MEMO_ID  NUMBER(10) NOT NULL,
   TASK_ID  NUMBER(10) NOT NULL,
   MEMO_TYPE_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   TASK_MEMO  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(TASK_MEMO) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKNOTE(
   TASK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   TASK_NOTES  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(TASK_NOTES) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKPRED(
   TASK_PRED_ID  NUMBER(10) NOT NULL,
   TASK_ID  NUMBER(10) NOT NULL,
   PRED_TASK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   PRED_PROJ_ID  NUMBER(10) NOT NULL,
   PRED_TYPE  VARCHAR2(12 CHAR) NOT NULL,
   LAG_HR_CNT  NUMBER(17,6) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKPROC(
   PROC_ID  NUMBER(10) NOT NULL,
   TASK_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   COMPLETE_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   PROC_NAME  VARCHAR2(120 CHAR) NOT NULL,
   PROC_WT  NUMBER(10,2) NULL,
   COMPLETE_PCT  NUMBER(10,2) NULL,
   PROC_DESCR  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(PROC_DESCR) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKRISK(
   TASK_ID  NUMBER(10) NOT NULL,
   RISK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKRSRC(
   TASKRSRC_ID  NUMBER(10) NOT NULL,
   TASK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   RSRC_TYPE  VARCHAR2(10 CHAR) DEFAULT 'RT_LABOR' NOT NULL,
   COST_QTY_LINK_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   ROLE_ID  NUMBER(10) NULL,
   ACCT_ID  NUMBER(10) NULL,
   RSRC_ID  NUMBER(10) NULL,
   POBS_ID  NUMBER(10) NULL,
   SKILL_LEVEL  NUMBER(10) NULL,
   PEND_COMPLETE_PCT  NUMBER(10,2) NULL,
   REMAIN_QTY  NUMBER(17,6) NULL,
   PEND_REMAIN_QTY  NUMBER(17,6) NULL,
   TARGET_QTY  NUMBER(17,6) NULL,
   REMAIN_QTY_PER_HR  NUMBER(16,8) NULL,
   PEND_ACT_REG_QTY  NUMBER(17,6) NULL,
   TARGET_LAG_DRTN_HR_CNT  NUMBER(17,6) NULL,
   TARGET_QTY_PER_HR  NUMBER(16,8) NULL,
   ACT_OT_QTY  NUMBER(17,6) NULL,
   PEND_ACT_OT_QTY  NUMBER(17,6) NULL,
   ACT_REG_QTY  NUMBER(17,6) NULL,
   RELAG_DRTN_HR_CNT  NUMBER(17,6) NULL,
   OT_FACTOR  NUMBER(10,3) NULL,
   COST_PER_QTY  NUMBER(21,8) NULL,
   TARGET_COST  NUMBER(23,6) NULL,
   ACT_REG_COST  NUMBER(23,6) NULL,
   ACT_OT_COST  NUMBER(23,6) NULL,
   REMAIN_COST  NUMBER(23,6) NULL,
   ACT_START_DATE  DATE NULL,
   ACT_END_DATE  DATE NULL,
   RESTART_DATE  DATE NULL,
   REEND_DATE  DATE NULL,
   TARGET_START_DATE  DATE NULL,
   TARGET_END_DATE  DATE NULL,
   REM_LATE_START_DATE  DATE NULL,
   REM_LATE_END_DATE  DATE NULL,
   GUID  VARCHAR2(22 CHAR) NULL,
   RATE_TYPE  VARCHAR2(14 CHAR) DEFAULT 'COST_PER_QTY' NULL,
   ACT_THIS_PER_COST  NUMBER(23,6) NULL,
   ACT_THIS_PER_QTY  NUMBER(17,6) NULL,
   CURV_ID  NUMBER(10) NULL,
   ROLLUP_DATES_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   COST_PER_QTY_SOURCE_TYPE  VARCHAR2(24 CHAR) DEFAULT 'ST_RSRC' NOT NULL,
   REMAIN_CRV  VARCHAR2(4000 CHAR) NULL,
   TARGET_CRV  VARCHAR2(4000 CHAR) NULL,
   ACTUAL_CRV  VARCHAR2(4000 CHAR) NULL,
   RSRC_REQUEST_DATA  BLOB NULL,
   TS_PEND_ACT_END_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   PRIOR_TS_ACT_REG_QTY  NUMBER(17,6) NULL,
   PRIOR_TS_ACT_OT_QTY  NUMBER(17,6) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(RSRC_REQUEST_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKSUM(
   TASK_SUM_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   COMPLETE_CNT  NUMBER(10) NULL,
   ACTIVE_CNT  NUMBER(10) NULL,
   NOTSTARTED_CNT  NUMBER(10) NULL,
   BASE_COMPLETE_CNT  NUMBER(10) NULL,
   BASE_ACTIVE_CNT  NUMBER(10) NULL,
   BASE_NOTSTARTED_CNT  NUMBER(10) NULL,
   ACT_DRTN_HR_CNT  NUMBER(17,6) NULL,
   ACT_EQUIP_QTY  NUMBER(22,6) NULL,
   ACT_WORK_QTY  NUMBER(22,6) NULL,
   TOTAL_DRTN_HR_CNT  NUMBER(17,6) NULL,
   BASE_DRTN_HR_CNT  NUMBER(17,6) NULL,
   BASE_WORK_QTY  NUMBER(22,6) NULL,
   BASE_EQUIP_QTY  NUMBER(22,6) NULL,
   ETC_WORK_QTY  NUMBER(22,6) NULL,
   REMAIN_DRTN_HR_CNT  NUMBER(17,6) NULL,
   REMAIN_WORK_QTY  NUMBER(22,6) NULL,
   REMAIN_EQUIP_QTY  NUMBER(22,6) NULL,
   TOTAL_FLOAT_HR_CNT  NUMBER(17,6) NULL,
   ACT_EXPENSE_COST  NUMBER(25,6) NULL,
   ACT_WORK_COST  NUMBER(25,6) NULL,
   ACT_EQUIP_COST  NUMBER(25,6) NULL,
   BASE_EXPENSE_COST  NUMBER(25,6) NULL,
   BASE_WORK_COST  NUMBER(25,6) NULL,
   BASE_EQUIP_COST  NUMBER(25,6) NULL,
   BCWP  NUMBER(25,6) NULL,
   ETC  NUMBER(25,6) NULL,
   BCWS  NUMBER(25,6) NULL,
   REMAIN_EXPENSE_COST  NUMBER(25,6) NULL,
   REMAIN_WORK_COST  NUMBER(25,6) NULL,
   REMAIN_EQUIP_COST  NUMBER(25,6) NULL,
   PERFM_WORK_QTY  NUMBER(22,6) NULL,
   SCHED_WORK_QTY  NUMBER(22,6) NULL,
   ACT_END_DATE  DATE NULL,
   ACT_START_DATE  DATE NULL,
   BASE_END_DATE  DATE NULL,
   BASE_START_DATE  DATE NULL,
   REEND_DATE  DATE NULL,
   RESTART_DATE  DATE NULL,
   ACT_THIS_PER_WORK_COST  NUMBER(25,6) NULL,
   ACT_THIS_PER_WORK_QTY  NUMBER(22,6) NULL,
   ACT_THIS_PER_EQUIP_COST  NUMBER(25,6) NULL,
   ACT_THIS_PER_EQUIP_QTY  NUMBER(22,6) NULL,
   BASE_MAT_COST  NUMBER(25,6) NULL,
   REMAIN_MAT_COST  NUMBER(25,6) NULL,
   ACT_MAT_COST  NUMBER(25,6) NULL,
   ACT_THIS_PER_MAT_COST  NUMBER(25,6) NULL,
   SPREAD_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(SPREAD_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKSUMFIN(
   TASK_SUM_FIN_ID  NUMBER(10) NOT NULL,
   FIN_DATES_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   TASK_SUM_ID  NUMBER(10) NOT NULL,
   ACT_WORK_QTY  NUMBER(22,6) NULL,
   ACT_WORK_COST  NUMBER(25,6) NULL,
   ACT_EQUIP_QTY  NUMBER(22,6) NULL,
   ACT_EQUIP_COST  NUMBER(25,6) NULL,
   ACT_MAT_COST  NUMBER(25,6) NULL,
   ACT_EXPENSE_COST  NUMBER(25,6) NULL,
   TOTAL_WORK_QTY  NUMBER(22,6) NULL,
   TOTAL_WORK_COST  NUMBER(25,6) NULL,
   TOTAL_EQUIP_QTY  NUMBER(22,6) NULL,
   TOTAL_EQUIP_COST  NUMBER(25,6) NULL,
   TOTAL_MAT_COST  NUMBER(25,6) NULL,
   TOTAL_EXPENSE_COST  NUMBER(25,6) NULL,
   TOTAL_COST  NUMBER(23,6) NULL,
   ACT_COST  NUMBER(23,6) NULL,
   BCWP  NUMBER(25,6) NULL,
   PERFM_WORK_QTY  NUMBER(22,6) NULL,
   ETC  NUMBER(25,6) NULL,
   ETC_WORK_QTY  NUMBER(22,6) NULL,
   EAC  NUMBER(25,6) NULL,
   EAC_WORK  NUMBER(22,6) NULL,
   BCWS  NUMBER(25,6) NULL,
   ACWP  NUMBER(25,6) NULL,
   SCHED_WORK_QTY  NUMBER(22,6) NULL,
   BASE_COST  NUMBER(23,6) NULL,
   BASE_WORK_QTY  NUMBER(22,6) NULL,
   BASE_WORK_COST  NUMBER(25,6) NULL,
   BASE_MAT_COST  NUMBER(25,6) NULL,
   BASE_EQUIP_COST  NUMBER(25,6) NULL,
   BASE_EQUIP_QTY  NUMBER(22,6) NULL,
   BASE_EXPENSE_COST  NUMBER(25,6) NULL,
   REMAIN_COST  NUMBER(23,6) NULL,
   REMAIN_WORK_QTY  NUMBER(22,6) NULL,
   REMAIN_WORK_COST  NUMBER(25,6) NULL,
   REMAIN_MAT_COST  NUMBER(25,6) NULL,
   REMAIN_EQUIP_COST  NUMBER(25,6) NULL,
   REMAIN_EQUIP_QTY  NUMBER(22,6) NULL,
   REMAIN_EXPENSE_COST  NUMBER(25,6) NULL,
   TARGET_COST  NUMBER(23,6) NULL,
   TARGET_EQUIP_COST  NUMBER(25,6) NULL,
   TARGET_EQUIP_QTY  NUMBER(22,6) NULL,
   TARGET_EXPENSE_COST  NUMBER(25,6) NULL,
   TARGET_MAT_COST  NUMBER(25,6) NULL,
   TARGET_WORK_COST  NUMBER(25,6) NULL,
   TARGET_WORK_QTY  NUMBER(22,6) NULL,
   LATE_REMAIN_WORK_QTY  NUMBER(22,6) NULL,
   LATE_REMAIN_WORK_COST  NUMBER(25,6) NULL,
   LATE_REMAIN_EQUIP_COST  NUMBER(25,6) NULL,
   LATE_REMAIN_EQUIP_QTY  NUMBER(22,6) NULL,
   LATE_REMAIN_COST  NUMBER(23,6) NULL,
   LATE_REMAIN_MAT_COST  NUMBER(25,6) NULL,
   LATE_REMAIN_EXPENSE_COST  NUMBER(25,6) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKUSER(
   TASK_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TASKWKSP(
   WORKSPACE_ID  NUMBER(10) NOT NULL,
   TASK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   CR_EXTERNAL_KEY  VARCHAR2(4000 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE GLOBAL TEMPORARY TABLE TEMPKEYS(
   PK1  NUMBER(10) NULL,
   PK2  NUMBER(10) NULL
   )
 ON COMMIT PRESERVE ROWS
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE THRSPARM(
   THRESH_PARM_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   WBS_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   TASK_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   RSRC_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   THRESH_PARM_TYPE  VARCHAR2(12 CHAR) NOT NULL,
   THRESH_PARM_NAME  VARCHAR2(80 CHAR) NOT NULL,
   THRESH_FIELD_NAME  VARCHAR2(40 CHAR) NULL,
   THRESH_SHORT_NAME  VARCHAR2(80 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TIMESHT(
   TS_ID  NUMBER(10) NOT NULL,
   RSRC_ID  NUMBER(10) NOT NULL,
   DAILY_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   STATUS_CODE  VARCHAR2(20 CHAR) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   LAST_RECV_DATE  DATE NULL,
   STATUS_DATE  DATE NULL,
   TS_NOTES  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(TS_NOTES) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TMPLCATG(
   TMPLCATG_CATG_ID  NUMBER(10) NOT NULL,
   CATG_NAME  VARCHAR2(255 CHAR) NOT NULL,
   PROJECT_FLAG  VARCHAR2(1 CHAR) NOT NULL,
   PROCESS_FLAG  VARCHAR2(1 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE GLOBAL TEMPORARY TABLE TPROJMAP(
   SESSION_ID  NUMBER(10) NOT NULL,
   CONTEXT_ID  NUMBER(10) NOT NULL,
   SOURCE_PROJ_ID  NUMBER(10) NOT NULL,
   TARGET_PROJ_ID  NUMBER(10) NOT NULL,
   TARGET_WBS_ID  NUMBER(10) NOT NULL
   )
 ON COMMIT PRESERVE ROWS
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TRAKVIEW(
   TRACK_VIEW_ID  NUMBER(10) NOT NULL,
   DISPLAY_TYPE  VARCHAR2(12 CHAR) NOT NULL,
   TRACK_VIEW_NAME  VARCHAR2(80 CHAR) NOT NULL,
   WEB_VIEW_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   USER_ID  NUMBER(10) NULL,
   TRACK_VIEW_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(TRACK_VIEW_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TRSRCFIN(
   FIN_DATES_ID  NUMBER(10) NOT NULL,
   TASKRSRC_ID  NUMBER(10) NOT NULL,
   TASK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   ACT_QTY  NUMBER(17,6) NULL,
   ACT_COST  NUMBER(23,6) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TRSRCSUM(
   TASKRSRC_SUM_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NULL,
   RSRC_ID  NUMBER(10) NULL,
   ROLE_ID  NUMBER(10) NULL,
   SKILL_LEVEL  NUMBER(10) NULL,
   OVERALLOC_DATE  DATE NULL,
   SPREAD_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(SPREAD_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TRSRCSUMFN(
   TRSRC_SUM_FIN_ID  NUMBER(10) NOT NULL,
   FIN_DATES_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NULL,
   RSRC_ID  NUMBER(10) NULL,
   ROLE_ID  NUMBER(10) NULL,
   TASKRSRC_SUM_ID  NUMBER(10) NOT NULL,
   ACT_QTY  NUMBER(17,6) NULL,
   ACT_COST  NUMBER(23,6) NULL,
   ACT_OT_QTY  NUMBER(17,6) NULL,
   ACT_REG_QTY  NUMBER(17,6) NULL,
   ACT_OT_COST  NUMBER(23,6) NULL,
   ACT_REG_COST  NUMBER(23,6) NULL,
   TOTAL_QTY  NUMBER(22,6) NULL,
   TOTAL_COST  NUMBER(23,6) NULL,
   REMAIN_QTY  NUMBER(17,6) NULL,
   REMAIN_COST  NUMBER(23,6) NULL,
   TARGET_QTY  NUMBER(19,6) NULL,
   TARGET_COST  NUMBER(23,6) NULL,
   STAFFED_REMAIN_QTY  NUMBER(17,6) NULL,
   UNSTAFFED_REMAIN_QTY  NUMBER(17,6) NULL,
   STAFFED_REMAIN_COST  NUMBER(25,6) NULL,
   UNSTAFFED_REMAIN_COST  NUMBER(25,6) NULL,
   STAFFED_LATE_REMAIN_QTY  NUMBER(17,6) NULL,
   UNSTAFFED_LATE_REMAIN_QTY  NUMBER(17,6) NULL,
   STAFFED_LATE_REMAIN_COST  NUMBER(25,6) NULL,
   UNSTAFFED_LATE_REMAIN_COST  NUMBER(25,6) NULL,
   LATE_REMAIN_QTY  NUMBER(17,6) NULL,
   LATE_REMAIN_COST  NUMBER(25,6) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TSAUDIT(
   TS_AUDIT_ID  NUMBER(10) NOT NULL,
   AUDIT_DATE  DATE NULL,
   RSRC_ID  NUMBER(10) NULL,
   RSRC_SHORT_NAME  VARCHAR2(255 CHAR) NULL,
   RSRC_NAME  VARCHAR2(255 CHAR) NULL,
   TS_STATUS_CODE  VARCHAR2(20 CHAR) NULL,
   REG_HRS  NUMBER(17,6) NULL,
   REG_OT_HRS  NUMBER(17,6) NULL,
   PEND_REG_HRS  NUMBER(17,6) NULL,
   PEND_REG_OT_HRS  NUMBER(17,6) NULL,
   OH_HRS  NUMBER(17,6) NULL,
   OH_OT_HRS  NUMBER(17,6) NULL,
   PEND_OH_HRS  NUMBER(17,6) NULL,
   PEND_OH_OT_HRS  NUMBER(17,6) NULL,
   TS_ID  NUMBER(10) NULL,
   TS_START_DATE  DATE NULL,
   TS_END_DATE  DATE NULL,
   PROJ_ID  NUMBER(10) NULL,
   PROJ_SHORT_NAME  VARCHAR2(40 CHAR) NULL,
   TS_TASK_STATUS  VARCHAR2(20 CHAR) NULL,
   USER_ID  NUMBER(10) NULL,
   USER_NAME  VARCHAR2(255 CHAR) NULL,
   APPROVING_AS  VARCHAR2(50 CHAR) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TSDATES(
   TS_ID  NUMBER(10) NOT NULL,
   START_DATE  DATE NOT NULL,
   END_DATE  DATE NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE TSDELEGATE(
   TS_DELEGATE_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NOT NULL,
   TS_DELEGATE_USER_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NULL,
   ACTIVE_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE UACCESS(
   USER_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   ACCESS_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   WBS_ID  NUMBER(10) NULL,
   PARENT_WBS_ID  NUMBER(10) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE UDFCODE(
   UDF_CODE_ID  NUMBER(10) NOT NULL,
   UDF_TYPE_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   SHORT_NAME  VARCHAR2(60 CHAR) NOT NULL,
   UDF_CODE_NAME  VARCHAR2(120 CHAR) NOT NULL,
   PARENT_UDF_CODE_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE UDFTYPE(
   UDF_TYPE_ID  NUMBER(10) NOT NULL,
   TABLE_NAME  VARCHAR2(30 CHAR) NOT NULL,
   UDF_TYPE_NAME  VARCHAR2(32 CHAR) NOT NULL,
   UDF_TYPE_LABEL  VARCHAR2(40 CHAR) NOT NULL,
   LOGICAL_DATA_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   SUPER_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   UDF_CODE_SHORT_LEN  NUMBER(10) NULL,
   FORMULA  VARCHAR2(4000 CHAR) NULL,
   INDICATOR_EXPRESSION  VARCHAR2(4000 CHAR) NULL,
   DISP_DATA_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NULL,
   DISP_INDICATOR_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NULL,
   SUMMARY_INDICATOR_EXPRESSION  VARCHAR2(4000 CHAR) NULL,
   SUMMARY_METHOD  VARCHAR2(20 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE UDFVALUE(
   UDF_TYPE_ID  NUMBER(10) NOT NULL,
   FK_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NULL,
   UDF_DATE  DATE NULL,
   UDF_TEXT  VARCHAR2(255 CHAR) NULL,
   UDF_NUMBER  NUMBER NULL,
   UDF_CODE_ID  NUMBER(10) NULL,
   TABLE_NAME  VARCHAR2(30 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE UEVNTREG(
   USER_ID  NUMBER(10) NOT NULL,
   APP_NAME  VARCHAR2(255 CHAR) NOT NULL,
   OPERATION_NAME  VARCHAR2(255 CHAR) NOT NULL,
   ACTION_NAME  VARCHAR2(255 CHAR) NOT NULL,
   ACTION_LEVEL  NUMBER(10) NULL,
   USER_NAME  VARCHAR2(255 CHAR) NULL,
   EVENT_REG_DATA  VARCHAR2(4000 CHAR) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE UMEASURE(
   UNIT_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   UNIT_NAME  VARCHAR2(100 CHAR) NOT NULL,
   UNIT_ABBREV  VARCHAR2(16 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE UPKLIST(
   SESSION_ID  NUMBER(10) NOT NULL,
   CONTEXT_ID  NUMBER(10) NULL,
   PK_ID  NUMBER(10) NOT NULL,
   PK2_ID  NUMBER(10) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE USERCOL(
   USER_COL_ID  NUMBER(10) NOT NULL,
   TABLE_NAME  VARCHAR2(16 CHAR) NOT NULL,
   LOGICAL_DATA_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   USER_COL_NAME  VARCHAR2(32 CHAR) NOT NULL,
   USER_COL_LABEL  VARCHAR2(40 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE USERDATA(
   USER_DATA_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NOT NULL,
   TOPIC_NAME  VARCHAR2(20 CHAR) NOT NULL,
   USER_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(USER_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE USERENG(
   USER_ENG_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NOT NULL,
   DB_ENGINE_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE USEROBS(
   USER_ID  NUMBER(10) NOT NULL,
   OBS_ID  NUMBER(10) NOT NULL,
   PROF_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE USEROPEN(
   USER_OPEN_ID  NUMBER(10) NOT NULL,
   USER_OPEN_NAME  VARCHAR2(255 CHAR) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE USERS(
   USER_ID  NUMBER(10) NOT NULL,
   GLOBAL_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   EMAIL_TYPE  VARCHAR2(16 CHAR) DEFAULT 'ET_INTERNET' NOT NULL,
   USER_NAME  VARCHAR2(255 CHAR) NOT NULL,
   PROF_ID  NUMBER(10) NULL,
   CURR_ID  NUMBER(10) DEFAULT 1 NOT NULL,
   ALL_RSRC_ACCESS_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   REPORT_USER_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   GUID  VARCHAR2(22 CHAR) NULL,
   EMAIL_SRV_USER_NAME  VARCHAR2(32 CHAR) NULL,
   OFFICE_PHONE  VARCHAR2(32 CHAR) NULL,
   ACTUAL_NAME  VARCHAR2(255 CHAR) NULL,
   EMAIL_SEND_SERVER  VARCHAR2(120 CHAR) NULL,
   EMAIL_ADDR  VARCHAR2(120 CHAR) NULL,
   EMAIL_SRV_PASSWD  VARCHAR2(255 CHAR) NULL,
   PASSWD  VARCHAR2(255 CHAR) NULL,
   NOTIFY_PREFS  VARCHAR2(255 CHAR) NULL,
   NAVI_VIEW_ID  NUMBER(10) NULL,
   OVERRIDE_NAVIVIEW_FLAG  VARCHAR2(1 CHAR) NULL,
   UI_VIEW_PREF_ID  NUMBER(10) NULL,
   CR_EXTERNAL_KEY  VARCHAR2(4000 CHAR) NULL,
   CR_USER_NAME  VARCHAR2(255 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL,
   FAILED_LOGIN_ATTEMPTS_CNT  NUMBER(10) DEFAULT 0 NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE USERSET(
   NAMESPACE  VARCHAR2(255 CHAR) NOT NULL,
   SETTING_NAME  VARCHAR2(255 CHAR) NOT NULL,
   SETTING_VALUE  VARCHAR2(4000 CHAR) NULL,
   USER_ID  NUMBER(10) NOT NULL,
   USERSET_BLOB  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(USERSET_BLOB) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE USERWKSP(
   USER_ID  NUMBER(10) NOT NULL,
   WORKSPACE_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE USESSAUD(
   SESSION_ID  NUMBER(10) NULL,
   LOGIN_DATE  DATE NULL,
   LOGOUT_DATE  DATE NULL,
   LAST_ACTIVE_TIME  DATE NULL,
   USER_NAME  VARCHAR2(255 CHAR) NULL,
   USER_ID  NUMBER(10) NULL,
   HOST_NAME  VARCHAR2(50 CHAR) NULL,
   APP_NAME  VARCHAR2(25 CHAR) NULL,
   HARD_DRIVE_CODE  VARCHAR2(40 CHAR) NULL,
   DB_ENGINE_TYPE  VARCHAR2(20 CHAR) NULL,
   OS_USER_NAME  VARCHAR2(255 CHAR) NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE USESSION(
   SESSION_ID  NUMBER(10) NOT NULL,
   LOGIN_TIME  DATE NOT NULL,
   LAST_ACTIVE_TIME  DATE NOT NULL,
   HOST_NAME  VARCHAR2(50 CHAR) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   PROCESS_NUM  NUMBER(10) NULL,
   APP_NAME  VARCHAR2(25 CHAR) NULL,
   HARD_DRIVE_CODE  VARCHAR2(40 CHAR) NULL,
   DB_ENGINE_TYPE  VARCHAR2(20 CHAR) NULL,
   OS_USER_NAME  VARCHAR2(255 CHAR) NULL,
   VDB_INSTANCE_GUID  VARCHAR2(22 CHAR) NULL,
   SPID  NUMBER(10) NULL,
   OPERATION_NAME  VARCHAR2(255 CHAR) NULL,
   OPERATION_START_DATE  DATE NULL,
   LONG_OPERATION_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE USROPNVAL(
   USER_OPEN_ID  NUMBER(10) NOT NULL,
   PK_ID  NUMBER(10) NOT NULL,
   USROPN_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE VIEWPREF(
   VIEW_PREF_ID  NUMBER(10) NOT NULL,
   VIEW_PREF_NAME  VARCHAR2(255 CHAR) NOT NULL,
   VIEW_PREF_TYPE  VARCHAR2(20 CHAR) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:51> [INFO] [2017-09-01 12:57:51] CREATE TABLE VIEWPROP(
   VIEW_ID  NUMBER(10) NOT NULL,
   VIEW_NAME  VARCHAR2(40 CHAR) NOT NULL,
   USER_ID  NUMBER(10) NULL,
   PROJ_ID  NUMBER(10) NULL,
   VIEW_TYPE  VARCHAR2(20 CHAR) NULL,
   VIEW_DATA  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(VIEW_DATA) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE VWPREFDASH(
   DASHBOARD_ID  NUMBER(10) NOT NULL,
   VIEW_PREF_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE VWPREFDATA(
   VIEW_PREF_ID  NUMBER(10) NOT NULL,
   VIEW_PREF_KEY  VARCHAR2(255 CHAR) NOT NULL,
   VIEW_PREF_VALUE  VARCHAR2(4000 CHAR) NULL,
   VIEW_PREF_VALUE_BLOB  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(VIEW_PREF_VALUE_BLOB) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE VWPREFUSER(
   VIEW_PREF_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE WBRSCAT(
   WBRS_CAT_ID  NUMBER(10) NOT NULL,
   WBRS_CAT_NAME  VARCHAR2(36 CHAR) NOT NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE WBSBUDG(
   WBS_BUDG_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   START_DATE  DATE NOT NULL,
   SPEND_COST  NUMBER(23,6) NULL,
   BENEFIT_COST  NUMBER(23,6) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE WBSMEMO(
   WBS_MEMO_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   MEMO_TYPE_ID  NUMBER(10) NOT NULL,
   WBS_MEMO  BLOB NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(WBS_MEMO) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE WBSRSRC(
   WBSRSRC_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   RSRC_ID  NUMBER(10) NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   COMMITTED_FLAG  VARCHAR2(1 CHAR) DEFAULT 'Y' NOT NULL,
   START_DATE  DATE NULL,
   END_DATE  DATE NULL,
   AUTO_COMPUTE_DATES_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   ROLE_ID  NUMBER(10) NULL,
   RSRC_REQUEST_DATA  VARCHAR2(4000 CHAR) NULL,
   ALLOCATION_PCT  NUMBER(10,2) NULL,
   WBRS_CAT_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE WBSRSRC_QTY(
   WBSRSRC_ID  NUMBER(10) NOT NULL,
   WEEK_START  DATE NOT NULL,
   MONTH_START  DATE NOT NULL,
   QTY  NUMBER(17,6) NOT NULL,
   FIN_DATES_ID1  NUMBER(10) NULL,
   FIN_QTY1  NUMBER(17,6) NULL,
   FIN_DATES_ID2  NUMBER(10) NULL,
   FIN_QTY2  NUMBER(17,6) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE WBSSTEP(
   WBS_STEP_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   WBS_ID  NUMBER(10) NOT NULL,
   SEQ_NUM  NUMBER(10) NOT NULL,
   COMPLETE_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   STEP_NAME  VARCHAR2(120 CHAR) NOT NULL,
   STEP_WT  NUMBER(10,2) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE WKFLTMPL(
   WKFL_TMPL_ID  NUMBER(10) NOT NULL,
   TEMPLATE_NAME  VARCHAR2(255 CHAR) NOT NULL,
   PROJECT_FLAG  VARCHAR2(1 CHAR) NOT NULL,
   WK_EXTERNAL_KEY  VARCHAR2(255 CHAR) NULL,
   TMPLCATG_CATG_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE WKFLUSER(
   WORK_FLOW_ID  NUMBER(10) NOT NULL,
   USER_ID  NUMBER(10) NOT NULL,
   STAGE_NUM  NUMBER(10) NOT NULL,
   COMMENTS  VARCHAR2(4000 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE WORKFLOW(
   WORK_FLOW_ID  NUMBER(10) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   WORKFLOW_NAME  VARCHAR2(255 CHAR) NOT NULL,
   EXTERNAL_KEY  VARCHAR2(512 CHAR) NOT NULL,
   STAGE_NUM  NUMBER(10) NOT NULL,
   STATUS  VARCHAR2(15 CHAR) NOT NULL,
   EXISTING_PROJECT_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   STAGE_NAME  VARCHAR2(255 CHAR) NOT NULL,
   STAGE_MODIFIED_FLAG  VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
   INITIATED_DATE  DATE DEFAULT SYSDATE NOT NULL,
   WORKSPACE_ID  NUMBER(10) NULL,
   USER_ID  NUMBER(10) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE TABLE WORKSPACE(
   WORKSPACE_ID  NUMBER(10) NOT NULL,
   WORKSPACE_TYPE  VARCHAR2(12 CHAR) NOT NULL,
   PROJ_ID  NUMBER(10) NOT NULL,
   WORKSPACE_NAME  VARCHAR2(255 CHAR) NOT NULL,
   WORKSPACE_PREFS  BLOB NULL,
   CR_EXTERNAL_KEY  VARCHAR2(4000 CHAR) NULL,
   UPDATE_DATE  DATE NULL,
   UPDATE_USER  VARCHAR2(255 CHAR) NULL,
   CREATE_DATE  DATE NULL,
   CREATE_USER  VARCHAR2(255 CHAR) NULL,
   DELETE_SESSION_ID  NUMBER(10) NULL,
   DELETE_DATE  DATE NULL
   )
 TABLESPACE PMDB_DAT1
     STORAGE (INITIAL 1M NEXT 1M MAXEXTENTS UNLIMITED PCTINCREASE 0)
 ,LOB(WORKSPACE_PREFS) STORE AS (TABLESPACE PMDB_LOB1 STORAGE(MINEXTENTS 1 MAXEXTENTS UNLIMITED) NOCACHE)
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON ACCOUNT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON ACTVCODE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON ACTVTYPE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON ADMIN_CONFIG TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON BASETYPE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON BGPLOG TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON BRE_REGISTRY TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON BUDGCHNG TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON CALENDAR TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON COSTTYPE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON CURRTYPE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DASHBOARD TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DASHUSER TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTACCT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTACTV TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTOBS TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTROLE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTRSRC TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTRSRL TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTUSER TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DOCCATG TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DOCREVIEW TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DOCREVIEWTASK TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DOCSTAT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON DOCUMENT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON EXPPROJ TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON EXTAPP TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON FACTOR TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON FACTVAL TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON FILTPROP TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON FINDATES TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON FORMCATG TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON FORMPROJ TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON FORMTMPL TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON FUNDSRC TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON GCHANGE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON HQDATA TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON HQUERY TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON ISSUHIST TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON ITERATION TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON ITERDAYS TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON ITERGOAL TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON JOBLOG TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON JOBRPT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON JOBSVC TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON LOCATION TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON MEMOTYPE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON NEXTKEY TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON NONWORK TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON NOTE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON OBS TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON OBSPROJ TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PCATTYPE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PCATUSER TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PCATVAL TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PFOLIO TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PHASE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PKXREF TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON POBS TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PREFER TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PRMAUDIT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PRMQUEUE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROCGROUP TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROCITEM TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROFILE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROFPRIV TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJCOST TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJECT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJEST TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJFUND TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJISSU TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJPCAT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJPROP TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJRISK TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJSHAR TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJTHRS TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJWBS TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJWSRPT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PRPFOLIO TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON PUBUSER TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT ON PUBUSER TO PUBPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON QUERYLIB TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RCATTYPE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RCATVAL TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON REFRDEL TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON REITTYPE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RELEASE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RELITEMS TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RFOLIO TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RISKCTRL TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RISKTYPE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RLFOLIO TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON ROLELIMIT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON ROLERATE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON ROLES TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON ROLFOLIO TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RPT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RPTBATCH TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RPTGROUP TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RPTLIST TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRC TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCANDASH TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCANVIEW TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCCURV TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCHOUR TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCPROP TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCRATE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCRCAT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCROLE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCSEC TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRFOLIO TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON SCENARIO TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON SCENPROJ TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON SCENROLE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON SCENUSER TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON SETTINGS TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON SHIFT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON SHIFTPER TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON SPIDMAP TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON SUMPROJCOST TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON SUMTASK TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON SUMTASKSPREAD TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON SUMTRSRC TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASK TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKACTV TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKDOC TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKFDBK TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKFIN TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKMEMO TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKNOTE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKPRED TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKPROC TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKRISK TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKRSRC TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKSUM TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKSUMFIN TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKUSER TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKWKSP TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TEMPKEYS TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON THRSPARM TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TIMESHT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TMPLCATG TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TPROJMAP TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TRAKVIEW TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TRSRCFIN TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TRSRCSUM TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TRSRCSUMFN TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TSAUDIT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TSDATES TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON TSDELEGATE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON UACCESS TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON UDFCODE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON UDFTYPE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON UDFVALUE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON UEVNTREG TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON UMEASURE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON UPKLIST TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON USERCOL TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON USERDATA TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON USERENG TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON USEROBS TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON USEROPEN TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON USERS TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON USERSET TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON USERWKSP TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON USESSAUD TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON USESSION TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON USROPNVAL TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON VIEWPREF TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON VIEWPROP TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON VWPREFDASH TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON VWPREFDATA TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON VWPREFUSER TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON WBRSCAT TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON WBSBUDG TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON WBSMEMO TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON WBSRSRC TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON WBSRSRC_QTY TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON WBSSTEP TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON WKFLTMPL TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON WKFLUSER TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON WORKFLOW TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] GRANT SELECT,INSERT,UPDATE,DELETE ON WORKSPACE TO PRIVPRM$PM
<09.01.2017 12:57:52> [INFO] [2017-09-01 12:57:52] CREATE OR REPLACE VIEW PRIVPRM$PM.ACCOUNT AS SELECT * FROM ADMPRM$PM.ACCOUNT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.ACTVCODE AS SELECT * FROM ADMPRM$PM.ACTVCODE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.ACTVTYPE AS SELECT * FROM ADMPRM$PM.ACTVTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.ADMIN_CONFIG AS SELECT * FROM ADMPRM$PM.ADMIN_CONFIG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.BASETYPE AS SELECT * FROM ADMPRM$PM.BASETYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BGPLOG FOR ADMPRM$PM.BGPLOG
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.BRE_REGISTRY AS SELECT * FROM ADMPRM$PM.BRE_REGISTRY WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.BUDGCHNG AS SELECT * FROM ADMPRM$PM.BUDGCHNG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.CALENDAR AS SELECT * FROM ADMPRM$PM.CALENDAR WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.COSTTYPE AS SELECT * FROM ADMPRM$PM.COSTTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.CURRTYPE AS SELECT * FROM ADMPRM$PM.CURRTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.DASHBOARD AS SELECT * FROM ADMPRM$PM.DASHBOARD WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.DASHUSER AS SELECT * FROM ADMPRM$PM.DASHUSER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTACCT FOR ADMPRM$PM.DLTACCT
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTACTV FOR ADMPRM$PM.DLTACTV
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTOBS FOR ADMPRM$PM.DLTOBS
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTROLE FOR ADMPRM$PM.DLTROLE
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTRSRC FOR ADMPRM$PM.DLTRSRC
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTRSRL FOR ADMPRM$PM.DLTRSRL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTUSER FOR ADMPRM$PM.DLTUSER
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.DOCCATG AS SELECT * FROM ADMPRM$PM.DOCCATG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.DOCREVIEW AS SELECT * FROM ADMPRM$PM.DOCREVIEW WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.DOCREVIEWTASK AS SELECT * FROM ADMPRM$PM.DOCREVIEWTASK WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.DOCSTAT AS SELECT * FROM ADMPRM$PM.DOCSTAT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.DOCUMENT AS SELECT * FROM ADMPRM$PM.DOCUMENT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.EXPPROJ AS SELECT * FROM ADMPRM$PM.EXPPROJ WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.EXTAPP AS SELECT * FROM ADMPRM$PM.EXTAPP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.FACTOR AS SELECT * FROM ADMPRM$PM.FACTOR WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.FACTVAL AS SELECT * FROM ADMPRM$PM.FACTVAL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.FILTPROP AS SELECT * FROM ADMPRM$PM.FILTPROP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.FINDATES AS SELECT * FROM ADMPRM$PM.FINDATES WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.FORMCATG AS SELECT * FROM ADMPRM$PM.FORMCATG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.FORMPROJ AS SELECT * FROM ADMPRM$PM.FORMPROJ WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.FORMTMPL AS SELECT * FROM ADMPRM$PM.FORMTMPL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.FUNDSRC AS SELECT * FROM ADMPRM$PM.FUNDSRC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.GCHANGE AS SELECT * FROM ADMPRM$PM.GCHANGE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.HQDATA FOR ADMPRM$PM.HQDATA
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.HQUERY FOR ADMPRM$PM.HQUERY
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.ISSUHIST AS SELECT * FROM ADMPRM$PM.ISSUHIST WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.ITERATION AS SELECT * FROM ADMPRM$PM.ITERATION WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.ITERDAYS AS SELECT * FROM ADMPRM$PM.ITERDAYS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.ITERGOAL AS SELECT * FROM ADMPRM$PM.ITERGOAL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.JOBLOG AS SELECT * FROM ADMPRM$PM.JOBLOG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.JOBRPT AS SELECT * FROM ADMPRM$PM.JOBRPT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.JOBSVC AS SELECT * FROM ADMPRM$PM.JOBSVC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.LOCATION AS SELECT * FROM ADMPRM$PM.LOCATION WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.MEMOTYPE AS SELECT * FROM ADMPRM$PM.MEMOTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.NEXTKEY FOR ADMPRM$PM.NEXTKEY
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.NONWORK AS SELECT * FROM ADMPRM$PM.NONWORK WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.NOTE AS SELECT * FROM ADMPRM$PM.NOTE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.OBS AS SELECT * FROM ADMPRM$PM.OBS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ FOR ADMPRM$PM.OBSPROJ
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PCATTYPE AS SELECT * FROM ADMPRM$PM.PCATTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PCATUSER AS SELECT * FROM ADMPRM$PM.PCATUSER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PCATVAL AS SELECT * FROM ADMPRM$PM.PCATVAL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PFOLIO AS SELECT * FROM ADMPRM$PM.PFOLIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PHASE AS SELECT * FROM ADMPRM$PM.PHASE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PKXREF FOR ADMPRM$PM.PKXREF
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.POBS AS SELECT * FROM ADMPRM$PM.POBS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PREFER AS SELECT * FROM ADMPRM$PM.PREFER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PRMAUDIT FOR ADMPRM$PM.PRMAUDIT
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PRMQUEUE FOR ADMPRM$PM.PRMQUEUE
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROCGROUP AS SELECT * FROM ADMPRM$PM.PROCGROUP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROCITEM AS SELECT * FROM ADMPRM$PM.PROCITEM WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROFILE AS SELECT * FROM ADMPRM$PM.PROFILE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROFPRIV AS SELECT * FROM ADMPRM$PM.PROFPRIV WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJCOST AS SELECT * FROM ADMPRM$PM.PROJCOST WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJECT AS SELECT * FROM ADMPRM$PM.PROJECT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJEST AS SELECT * FROM ADMPRM$PM.PROJEST WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJFUND AS SELECT * FROM ADMPRM$PM.PROJFUND WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJISSU AS SELECT * FROM ADMPRM$PM.PROJISSU WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJPCAT AS SELECT * FROM ADMPRM$PM.PROJPCAT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJPROP AS SELECT * FROM ADMPRM$PM.PROJPROP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJRISK AS SELECT * FROM ADMPRM$PM.PROJRISK WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJSHAR FOR ADMPRM$PM.PROJSHAR
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJTHRS AS SELECT * FROM ADMPRM$PM.PROJTHRS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJWBS AS SELECT * FROM ADMPRM$PM.PROJWBS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJWSRPT AS SELECT * FROM ADMPRM$PM.PROJWSRPT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.PRPFOLIO AS SELECT * FROM ADMPRM$PM.PRPFOLIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PUBUSER FOR ADMPRM$PM.PUBUSER
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PUBPRM$PM.PUBUSER FOR ADMPRM$PM.PUBUSER
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.QUERYLIB AS SELECT * FROM ADMPRM$PM.QUERYLIB WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RCATTYPE AS SELECT * FROM ADMPRM$PM.RCATTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RCATVAL AS SELECT * FROM ADMPRM$PM.RCATVAL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.REFRDEL FOR ADMPRM$PM.REFRDEL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.REITTYPE AS SELECT * FROM ADMPRM$PM.REITTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RELEASE AS SELECT * FROM ADMPRM$PM.RELEASE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RELITEMS AS SELECT * FROM ADMPRM$PM.RELITEMS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RFOLIO AS SELECT * FROM ADMPRM$PM.RFOLIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RISKCTRL AS SELECT * FROM ADMPRM$PM.RISKCTRL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RISKTYPE AS SELECT * FROM ADMPRM$PM.RISKTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RLFOLIO AS SELECT * FROM ADMPRM$PM.RLFOLIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.ROLELIMIT AS SELECT * FROM ADMPRM$PM.ROLELIMIT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.ROLERATE AS SELECT * FROM ADMPRM$PM.ROLERATE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.ROLES AS SELECT * FROM ADMPRM$PM.ROLES WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.ROLFOLIO AS SELECT * FROM ADMPRM$PM.ROLFOLIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RPT AS SELECT * FROM ADMPRM$PM.RPT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RPTBATCH AS SELECT * FROM ADMPRM$PM.RPTBATCH WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RPTGROUP AS SELECT * FROM ADMPRM$PM.RPTGROUP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RPTLIST AS SELECT * FROM ADMPRM$PM.RPTLIST WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRC AS SELECT * FROM ADMPRM$PM.RSRC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCANDASH AS SELECT * FROM ADMPRM$PM.RSRCANDASH WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCANVIEW AS SELECT * FROM ADMPRM$PM.RSRCANVIEW WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCCURV AS SELECT * FROM ADMPRM$PM.RSRCCURV WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCHOUR AS SELECT * FROM ADMPRM$PM.RSRCHOUR WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCPROP AS SELECT * FROM ADMPRM$PM.RSRCPROP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCRATE AS SELECT * FROM ADMPRM$PM.RSRCRATE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCRCAT AS SELECT * FROM ADMPRM$PM.RSRCRCAT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCROLE AS SELECT * FROM ADMPRM$PM.RSRCROLE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCSEC AS SELECT * FROM ADMPRM$PM.RSRCSEC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRFOLIO AS SELECT * FROM ADMPRM$PM.RSRFOLIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.SCENARIO AS SELECT * FROM ADMPRM$PM.SCENARIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.SCENPROJ AS SELECT * FROM ADMPRM$PM.SCENPROJ WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.SCENROLE AS SELECT * FROM ADMPRM$PM.SCENROLE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.SCENUSER AS SELECT * FROM ADMPRM$PM.SCENUSER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.SETTINGS AS SELECT * FROM ADMPRM$PM.SETTINGS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.SHIFT AS SELECT * FROM ADMPRM$PM.SHIFT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.SHIFTPER AS SELECT * FROM ADMPRM$PM.SHIFTPER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SPIDMAP FOR ADMPRM$PM.SPIDMAP
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SUMPROJCOST FOR ADMPRM$PM.SUMPROJCOST
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SUMTASK FOR ADMPRM$PM.SUMTASK
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SUMTASKSPREAD FOR ADMPRM$PM.SUMTASKSPREAD
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SUMTRSRC FOR ADMPRM$PM.SUMTRSRC
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASK AS SELECT * FROM ADMPRM$PM.TASK WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKACTV AS SELECT * FROM ADMPRM$PM.TASKACTV WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKDOC AS SELECT * FROM ADMPRM$PM.TASKDOC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKFDBK AS SELECT * FROM ADMPRM$PM.TASKFDBK WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKFIN AS SELECT * FROM ADMPRM$PM.TASKFIN WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKMEMO AS SELECT * FROM ADMPRM$PM.TASKMEMO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKNOTE AS SELECT * FROM ADMPRM$PM.TASKNOTE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKPRED AS SELECT * FROM ADMPRM$PM.TASKPRED WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKPROC AS SELECT * FROM ADMPRM$PM.TASKPROC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKRISK AS SELECT * FROM ADMPRM$PM.TASKRISK WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKRSRC AS SELECT * FROM ADMPRM$PM.TASKRSRC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKSUM AS SELECT * FROM ADMPRM$PM.TASKSUM WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKSUMFIN AS SELECT * FROM ADMPRM$PM.TASKSUMFIN WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKUSER AS SELECT * FROM ADMPRM$PM.TASKUSER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKWKSP AS SELECT * FROM ADMPRM$PM.TASKWKSP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TEMPKEYS FOR ADMPRM$PM.TEMPKEYS
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.THRSPARM AS SELECT * FROM ADMPRM$PM.THRSPARM WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TIMESHT AS SELECT * FROM ADMPRM$PM.TIMESHT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TMPLCATG AS SELECT * FROM ADMPRM$PM.TMPLCATG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TPROJMAP FOR ADMPRM$PM.TPROJMAP
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TRAKVIEW AS SELECT * FROM ADMPRM$PM.TRAKVIEW WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TRSRCFIN AS SELECT * FROM ADMPRM$PM.TRSRCFIN WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TRSRCSUM AS SELECT * FROM ADMPRM$PM.TRSRCSUM WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TRSRCSUMFN AS SELECT * FROM ADMPRM$PM.TRSRCSUMFN WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TSAUDIT FOR ADMPRM$PM.TSAUDIT
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TSDATES AS SELECT * FROM ADMPRM$PM.TSDATES WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.TSDELEGATE AS SELECT * FROM ADMPRM$PM.TSDELEGATE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UACCESS FOR ADMPRM$PM.UACCESS
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.UDFCODE AS SELECT * FROM ADMPRM$PM.UDFCODE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.UDFTYPE AS SELECT * FROM ADMPRM$PM.UDFTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.UDFVALUE AS SELECT * FROM ADMPRM$PM.UDFVALUE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UEVNTREG FOR ADMPRM$PM.UEVNTREG
<09.01.2017 12:57:53> [INFO] [2017-09-01 12:57:53] CREATE OR REPLACE VIEW PRIVPRM$PM.UMEASURE AS SELECT * FROM ADMPRM$PM.UMEASURE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UPKLIST FOR ADMPRM$PM.UPKLIST
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.USERCOL AS SELECT * FROM ADMPRM$PM.USERCOL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.USERDATA AS SELECT * FROM ADMPRM$PM.USERDATA WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.USERENG AS SELECT * FROM ADMPRM$PM.USERENG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.USEROBS AS SELECT * FROM ADMPRM$PM.USEROBS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.USEROPEN AS SELECT * FROM ADMPRM$PM.USEROPEN WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.USERS AS SELECT * FROM ADMPRM$PM.USERS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.USERSET AS SELECT * FROM ADMPRM$PM.USERSET WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.USERWKSP AS SELECT * FROM ADMPRM$PM.USERWKSP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USESSAUD FOR ADMPRM$PM.USESSAUD
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.USESSION AS SELECT * FROM ADMPRM$PM.USESSION WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.USROPNVAL AS SELECT * FROM ADMPRM$PM.USROPNVAL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.VIEWPREF AS SELECT * FROM ADMPRM$PM.VIEWPREF WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.VIEWPROP AS SELECT * FROM ADMPRM$PM.VIEWPROP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.VWPREFDASH AS SELECT * FROM ADMPRM$PM.VWPREFDASH WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.VWPREFDATA AS SELECT * FROM ADMPRM$PM.VWPREFDATA WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.VWPREFUSER AS SELECT * FROM ADMPRM$PM.VWPREFUSER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.WBRSCAT AS SELECT * FROM ADMPRM$PM.WBRSCAT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.WBSBUDG AS SELECT * FROM ADMPRM$PM.WBSBUDG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.WBSMEMO AS SELECT * FROM ADMPRM$PM.WBSMEMO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.WBSRSRC AS SELECT * FROM ADMPRM$PM.WBSRSRC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.WBSRSRC_QTY AS SELECT * FROM ADMPRM$PM.WBSRSRC_QTY WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.WBSSTEP AS SELECT * FROM ADMPRM$PM.WBSSTEP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.WKFLTMPL AS SELECT * FROM ADMPRM$PM.WKFLTMPL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.WKFLUSER AS SELECT * FROM ADMPRM$PM.WKFLUSER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.WORKFLOW AS SELECT * FROM ADMPRM$PM.WORKFLOW WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE VIEW PRIVPRM$PM.WORKSPACE AS SELECT * FROM ADMPRM$PM.WORKSPACE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJRSRC_VIEW FOR ADMPRM$PM.PROJRSRC_VIEW
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJROLE_VIEW FOR ADMPRM$PM.PROJROLE_VIEW
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJRSRCROLE_VIEW FOR ADMPRM$PM.PROJRSRCROLE_VIEW
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJSHAR_BL_VIEW FOR ADMPRM$PM.PROJSHAR_BL_VIEW
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJRSRC_PS_VIEW FOR ADMPRM$PM.PROJRSRC_PS_VIEW
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJROLE_PS_VIEW FOR ADMPRM$PM.PROJROLE_PS_VIEW
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJRSRCROLE_PS_VIEW FOR ADMPRM$PM.PROJRSRCROLE_PS_VIEW
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PFLOAD_VIEW FOR ADMPRM$PM.PFLOAD_VIEW
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PFLOAD_IP_VIEW FOR ADMPRM$PM.PFLOAD_IP_VIEW
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PFLOAD_UACCESS_VIEW FOR ADMPRM$PM.PFLOAD_UACCESS_VIEW
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PFLOAD_IP_UACCESS_VIEW FOR ADMPRM$PM.PFLOAD_IP_UACCESS_VIEW
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_OBS FOR ADMPRM$PM.OPENING_OBS
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_ROLE FOR ADMPRM$PM.OPENING_ROLE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_ACCOUNT FOR ADMPRM$PM.OPENING_ACCOUNT
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_USERS FOR ADMPRM$PM.OPENING_USERS
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_RSRC FOR ADMPRM$PM.OPENING_RSRC
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_ACTVCODE FOR ADMPRM$PM.OPENING_ACTVCODE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_RSRCROLE FOR ADMPRM$PM.OPENING_RSRCROLE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_WEEK FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_WEEK
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_MONTH FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_MONTH
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_QTR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_QTR
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_YEAR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_YEAR
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_WEEK FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_WEEK
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_MONTH FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_MONTH
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_QTR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_QTR
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_YEAR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_YEAR
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_WEEK FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_WEEK
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_MONTH FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_MONTH
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_QTR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_QTR
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_YEAR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_YEAR
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_WEEK FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_WEEK
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_MON FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_MON
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_QTR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_QTR
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_YEAR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_YEAR
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_WEEK FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_WEEK
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_MON FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_MON
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_QTR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_QTR
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_YEAR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_YEAR
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_MON FOR ADMPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_MON
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_QTR FOR ADMPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_QTR
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_WEEK FOR ADMPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_WEEK
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_YEAR FOR ADMPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_YEAR
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSN_BY_PROJ_BY_FP FOR ADMPRM$PM.WBSRSRC_ASSN_BY_PROJ_BY_FP
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSN_BY_PROJROLE_BY_FP FOR ADMPRM$PM.WBSRSRC_ASSN_BY_PROJROLE_BY_FP
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSN_BY_PROJRSRC_BY_FP FOR ADMPRM$PM.WBSRSRC_ASSN_BY_PROJRSRC_BY_FP
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSN_SUMMARY_BY_FP FOR ADMPRM$PM.WBSRSRC_ASSN_SUMMARY_BY_FP
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UTILS FOR ADMPRM$PM.UTILS
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_READ_STRING FOR ADMPRM$PM.SETTINGS_READ_STRING
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_READ_NUMBER FOR ADMPRM$PM.SETTINGS_READ_NUMBER
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_READ_BOOL FOR ADMPRM$PM.SETTINGS_READ_BOOL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_READ_DATE FOR ADMPRM$PM.SETTINGS_READ_DATE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_WRITE_STRING FOR ADMPRM$PM.SETTINGS_WRITE_STRING
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_WRITE_NUMBER FOR ADMPRM$PM.SETTINGS_WRITE_NUMBER
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_WRITE_BOOL FOR ADMPRM$PM.SETTINGS_WRITE_BOOL
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_WRITE_DATE FOR ADMPRM$PM.SETTINGS_WRITE_DATE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BGP_WRITE_TO_LOG FOR ADMPRM$PM.BGP_WRITE_TO_LOG
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CURRENT_SESSION FOR ADMPRM$PM.CURRENT_SESSION
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GET_INTERVAL_DIFFERENCE FOR ADMPRM$PM.GET_INTERVAL_DIFFERENCE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.APPLY_ACTUALS_TASK FOR ADMPRM$PM.APPLY_ACTUALS_TASK
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.APPLY_ACTUALS_TASKRSRC FOR ADMPRM$PM.APPLY_ACTUALS_TASKRSRC
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.APPLY_ESTIMATE_TASK FOR ADMPRM$PM.APPLY_ESTIMATE_TASK
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.APPLY_ESTIMATE_TASKRSRC FOR ADMPRM$PM.APPLY_ESTIMATE_TASKRSRC
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJSHAR_INSERT_REC FOR ADMPRM$PM.PROJSHAR_INSERT_REC
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJSHAR_INSERT FOR ADMPRM$PM.PROJSHAR_INSERT
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJSHAR_INSERT_UPD FOR ADMPRM$PM.PROJSHAR_INSERT_UPD
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.POPULATE_UACCESS FOR ADMPRM$PM.POPULATE_UACCESS
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UACCESS_MAINTAIN_FOR_USER FOR ADMPRM$PM.UACCESS_MAINTAIN_FOR_USER
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UPDATE_TASKACTV FOR ADMPRM$PM.UPDATE_TASKACTV
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GETNEXTKEYS FOR ADMPRM$PM.GETNEXTKEYS
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BRE_ADD FOR ADMPRM$PM.BRE_ADD
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BRE_CHECKCHANGE FOR ADMPRM$PM.BRE_CHECKCHANGE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BRE_REMOVE FOR ADMPRM$PM.BRE_REMOVE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BRE_KEEPALIVE FOR ADMPRM$PM.BRE_KEEPALIVE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BRE_PING FOR ADMPRM$PM.BRE_PING
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.COUNT_RSRC_LVLS FOR ADMPRM$PM.COUNT_RSRC_LVLS
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GET_RSRC_ASSOC_TYPES FOR ADMPRM$PM.GET_RSRC_ASSOC_TYPES
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GUID FOR ADMPRM$PM.GUID
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.COPY_UTILS FOR ADMPRM$PM.COPY_UTILS
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TASK_COPY_PKG FOR ADMPRM$PM.TASK_COPY_PKG
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJECT_COPY_PKG FOR ADMPRM$PM.PROJECT_COPY_PKG
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.MULTI_PROJECT_COPY FOR ADMPRM$PM.MULTI_PROJECT_COPY
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJECT_COPY FOR ADMPRM$PM.PROJECT_COPY
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TIME_APPROVAL_WBS FOR ADMPRM$PM.TIME_APPROVAL_WBS
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PV_WBS_ROOT_PROC_CAND FOR ADMPRM$PM.PV_WBS_ROOT_PROC_CAND
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PV_WBS_ROOT_NODES FOR ADMPRM$PM.PV_WBS_ROOT_NODES
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBS_TREE_HAS_RSRC_ASSGN FOR ADMPRM$PM.WBS_TREE_HAS_RSRC_ASSGN
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBS_TREE_HAS_ROLE_ASSGN FOR ADMPRM$PM.WBS_TREE_HAS_ROLE_ASSGN
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DB_TO_IANA_CHARSET FOR ADMPRM$PM.DB_TO_IANA_CHARSET
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BLOB_INTERFACE FOR ADMPRM$PM.BLOB_INTERFACE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GS_SAVE_BLOB FOR ADMPRM$PM.GS_SAVE_BLOB
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GS_GET_BLOB FOR ADMPRM$PM.GS_GET_BLOB
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GS_GET_BLOB_NEXT FOR ADMPRM$PM.GS_GET_BLOB_NEXT
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GET_SAFETY_DATE FOR ADMPRM$PM.GET_SAFETY_DATE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.POPULATE_DELAYED_LOADING FOR ADMPRM$PM.POPULATE_DELAYED_LOADING
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GLOBAL_TABLE_CHANGE FOR ADMPRM$PM.GLOBAL_TABLE_CHANGE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPEN_TABLE_CHANGE FOR ADMPRM$PM.OPEN_TABLE_CHANGE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CHECK_LAST_SUMM FOR ADMPRM$PM.CHECK_LAST_SUMM
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.REFRDEL_CLEANUP FOR ADMPRM$PM.REFRDEL_CLEANUP
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PRM_AUDIT FOR ADMPRM$PM.PRM_AUDIT
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.AUDIT_IDENTITY FOR ADMPRM$PM.AUDIT_IDENTITY
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.INTERNAL_AUDITING_SETTING FOR ADMPRM$PM.INTERNAL_AUDITING_SETTING
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.AUDITING_ENABLE FOR ADMPRM$PM.AUDITING_ENABLE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.AUDITING_DISABLE FOR ADMPRM$PM.AUDITING_DISABLE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CLEANUP_USESSAUD FOR ADMPRM$PM.CLEANUP_USESSAUD
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USESSAUD_ENABLE FOR ADMPRM$PM.USESSAUD_ENABLE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USESSAUD_DISABLE FOR ADMPRM$PM.USESSAUD_DISABLE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.HAS_RSRC_ACCESS FOR ADMPRM$PM.HAS_RSRC_ACCESS
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UPDATE_RSRC_SECURITY FOR ADMPRM$PM.UPDATE_RSRC_SECURITY
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GET_PRIMARY_KEY FOR ADMPRM$PM.GET_PRIMARY_KEY
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CASCADE_DELETE_CHILD FOR ADMPRM$PM.CASCADE_DELETE_CHILD
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CASCADE_DELETE FOR ADMPRM$PM.CASCADE_DELETE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CLEANUP_LOGICAL_DELETES FOR ADMPRM$PM.CLEANUP_LOGICAL_DELETES
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.HQUERY_PROCESS_REC FOR ADMPRM$PM.HQUERY_PROCESS_REC
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.HQUERY_POPULATE FOR ADMPRM$PM.HQUERY_POPULATE
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CHECK_SYS_PRIVS FOR ADMPRM$PM.CHECK_SYS_PRIVS
<09.01.2017 12:57:54> [INFO] [2017-09-01 12:57:54] CREATE OR REPLACE SYNONYM PRIVPRM$PM.HAS_TIMESHEETS FOR ADMPRM$PM.HAS_TIMESHEETS
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SYNC_UDFTYPE FOR ADMPRM$PM.SYNC_UDFTYPE
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USESSION_CLEANUP FOR ADMPRM$PM.USESSION_CLEANUP
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USESSION_CLEAR_LOGICAL_DELETES FOR ADMPRM$PM.USESSION_CLEAR_LOGICAL_DELETES
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USESSION_CLEANUP_EXPIRED FOR ADMPRM$PM.USESSION_CLEANUP_EXPIRED
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USER_DEFINED_BACKGROUND FOR ADMPRM$PM.USER_DEFINED_BACKGROUND
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CLEANUP_OLD_DATA FOR ADMPRM$PM.CLEANUP_OLD_DATA
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BGPLOG_CLEANUP FOR ADMPRM$PM.BGPLOG_CLEANUP
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJECT_COPY_LIST FOR ADMPRM$PM.PROJECT_COPY_LIST
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.ADD_DATABASE_JOB FOR ADMPRM$PM.ADD_DATABASE_JOB
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DELETE_PROJECT_CODE_SCENARIOS FOR ADMPRM$PM.DELETE_PROJECT_CODE_SCENARIOS
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DROP_BACKGROUND_PROCS FOR ADMPRM$PM.DROP_BACKGROUND_PROCS
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PRMAUDIT_CLEANUP FOR ADMPRM$PM.PRMAUDIT_CLEANUP
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PV_LOGIN FOR ADMPRM$PM.PV_LOGIN
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SQL_TRACE_USER_ENABLE FOR ADMPRM$PM.SQL_TRACE_USER_ENABLE
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SQL_TRACE_USER_DISABLE FOR ADMPRM$PM.SQL_TRACE_USER_DISABLE
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SQL_TRACE_START FOR ADMPRM$PM.SQL_TRACE_START
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SQL_TRACE_END FOR ADMPRM$PM.SQL_TRACE_END
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PRIMAVERA_EVENT FOR ADMPRM$PM.PRIMAVERA_EVENT
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJECT_COPY_BASELINE FOR ADMPRM$PM.PROJECT_COPY_BASELINE
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJECT_DELETE_WBS FOR ADMPRM$PM.PROJECT_DELETE_WBS
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJECT_DELETE FOR ADMPRM$PM.PROJECT_DELETE
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.REPLACE_REFLECTION_PROJECT FOR ADMPRM$PM.REPLACE_REFLECTION_PROJECT
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ_UPDATE_PROCESS_KEYS FOR ADMPRM$PM.OBSPROJ_UPDATE_PROCESS_KEYS
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ_UPDATE_EPS FOR ADMPRM$PM.OBSPROJ_UPDATE_EPS
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ_UPDATE_PROJECT FOR ADMPRM$PM.OBSPROJ_UPDATE_PROJECT
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ_UPDATE FOR ADMPRM$PM.OBSPROJ_UPDATE
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ_FULL_REBUILD FOR ADMPRM$PM.OBSPROJ_FULL_REBUILD
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PRMQUEUE_ADD FOR ADMPRM$PM.PRMQUEUE_ADD
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ_PROCESS_QUEUE FOR ADMPRM$PM.OBSPROJ_PROCESS_QUEUE
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CLEANUP_PRMQUEUE FOR ADMPRM$PM.CLEANUP_PRMQUEUE
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_VALIDATE FOR ADMPRM$PM.WBSRSRC_VALIDATE
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SYSTEM_MONITOR FOR ADMPRM$PM.SYSTEM_MONITOR
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DATA_MONITOR FOR ADMPRM$PM.DATA_MONITOR
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CHECK_BACKGROUND_JOBS FOR ADMPRM$PM.CHECK_BACKGROUND_JOBS
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TA_GATHER_TIMESHEETS FOR ADMPRM$PM.TA_GATHER_TIMESHEETS
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TS_AUDIT FOR ADMPRM$PM.TS_AUDIT
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PV_OPEN_PROJECT FOR ADMPRM$PM.PV_OPEN_PROJECT
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SOURCE_VERSION FOR ADMPRM$PM.SOURCE_VERSION
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.ACTIVITY_COPY_API FOR ADMPRM$PM.ACTIVITY_COPY_API
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SYNC_BASELINE_TASKS FOR ADMPRM$PM.SYNC_BASELINE_TASKS
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBS_MERGE_DELETE FOR ADMPRM$PM.OBS_MERGE_DELETE
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CREATE_PROJECT_TEMPLATE FOR ADMPRM$PM.CREATE_PROJECT_TEMPLATE
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CREATE_PROJECT_FROM_TEMPLATE FOR ADMPRM$PM.CREATE_PROJECT_FROM_TEMPLATE
<09.01.2017 12:57:55> [INFO] [2017-09-01 12:57:55] Dataloader target set to admprm$pm/admin@oracle:LAPTOP-78JK8QNU:1521:XE
<09.01.2017 12:58:00> [INFO] [2017-09-01 12:58:00] Dataloader source set to SAMPLE:ppmdb_mk.zip
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table WORKSPACE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table WORKFLOW
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table WKFLUSER
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table WKFLTMPL
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table WBSSTEP
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table WBSRSRC_QTY
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table WBSRSRC
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table WBSMEMO
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table WBSBUDG
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table WBRSCAT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table VWPREFUSER
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table VWPREFDATA
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table VWPREFDASH
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table VIEWPROP
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table VIEWPREF
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table USROPNVAL
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table USERWKSP
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table USERSET
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table USERS
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table USEROPEN
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table USEROBS
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table USERENG
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table USERDATA
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table USERCOL
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table UMEASURE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table UEVNTREG
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table UDFVALUE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table UDFTYPE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table UDFCODE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table UACCESS
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TSDELEGATE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TSDATES
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TSAUDIT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TRSRCSUMFN
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TRSRCSUM
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TRSRCFIN
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TRAKVIEW
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TMPLCATG
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TIMESHT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table THRSPARM
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKWKSP
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKUSER
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKSUMFIN
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKSUM
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKRSRC
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKRISK
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKPROC
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKPRED
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKNOTE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKMEMO
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKFIN
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKFDBK
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKDOC
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASKACTV
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table TASK
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table SUMTRSRC
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table SUMTASKSPREAD
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table SUMTASK
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table SUMPROJCOST
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table SHIFTPER
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table SHIFT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table SCENUSER
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table SCENROLE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table SCENPROJ
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table SCENARIO
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RSRFOLIO
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RSRCSEC
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RSRCROLE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RSRCRCAT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RSRCRATE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RSRCPROP
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RSRCHOUR
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RSRCCURV
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RSRCANVIEW
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RSRCANDASH
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RSRC
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RPTLIST
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RPTGROUP
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RPTBATCH
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RPT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table ROLFOLIO
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table ROLES
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table ROLERATE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table ROLELIMIT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RLFOLIO
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RISKTYPE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RISKCTRL
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RFOLIO
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RELITEMS
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RELEASE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table REITTYPE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table REFRDEL
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RCATVAL
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table RCATTYPE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table QUERYLIB
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PUBUSER
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PRPFOLIO
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROJWSRPT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROJWBS
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROJTHRS
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROJSHAR
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROJRISK
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROJPROP
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROJPCAT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROJISSU
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROJFUND
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROJEST
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROJECT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROJCOST
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROFPRIV
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROFILE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROCITEM
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PROCGROUP
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PREFER
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table POBS
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PHASE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PFOLIO
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PCATVAL
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PCATUSER
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table PCATTYPE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table OBSPROJ
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table OBS
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table NOTE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table NONWORK
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table NEXTKEY
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table MEMOTYPE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table LOCATION
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table JOBSVC
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table JOBRPT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table JOBLOG
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table ITERGOAL
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table ITERDAYS
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table ITERATION
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table ISSUHIST
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table HQUERY
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table HQDATA
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table GCHANGE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table FUNDSRC
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table FORMTMPL
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table FORMPROJ
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table FORMCATG
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table FINDATES
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table FILTPROP
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table FACTVAL
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table FACTOR
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table EXTAPP
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table EXPPROJ
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table DOCUMENT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table DOCSTAT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table DOCREVIEWTASK
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table DOCREVIEW
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table DOCCATG
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table DASHUSER
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table DASHBOARD
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table CURRTYPE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table COSTTYPE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table CALENDAR
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table BUDGCHNG
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table BRE_REGISTRY
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table BASETYPE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table ADMIN_CONFIG
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table ACTVTYPE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table ACTVCODE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Clearing table ACCOUNT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Begin Table Load ACCOUNT
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Begin Table Load ACTVCODE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Begin Table Load ACTVTYPE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Begin Table Load ADMIN_CONFIG
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Begin Table Load BASETYPE
<09.01.2017 12:58:02> [INFO] [2017-09-01 12:58:02] Begin Table Load BRE_REGISTRY
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load BUDGCHNG
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load CALENDAR
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load COSTTYPE
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load CURRTYPE
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load DASHBOARD
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load DASHUSER
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load DOCCATG
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load DOCREVIEW
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load DOCREVIEWTASK
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load DOCSTAT
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load DOCUMENT
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load EXPPROJ
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load EXTAPP
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load FACTOR
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load FACTVAL
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load FILTPROP
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load FINDATES
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load FORMCATG
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load FORMPROJ
<09.01.2017 12:58:03> [INFO] [2017-09-01 12:58:03] Begin Table Load FORMTMPL
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load FUNDSRC
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load GCHANGE
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load HQDATA
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load HQUERY
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load ISSUHIST
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load ITERATION
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load ITERDAYS
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load ITERGOAL
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load JOBLOG
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load JOBRPT
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load JOBSVC
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load LOCATION
<09.01.2017 12:58:04> [INFO] [2017-09-01 12:58:04] Begin Table Load MEMOTYPE
<09.01.2017 12:58:05> [INFO] [2017-09-01 12:58:05] Begin Table Load NEXTKEY
<09.01.2017 12:58:05> [INFO] [2017-09-01 12:58:05] Begin Table Load NONWORK
<09.01.2017 12:58:05> [INFO] [2017-09-01 12:58:05] Begin Table Load NOTE
<09.01.2017 12:58:05> [INFO] [2017-09-01 12:58:05] Begin Table Load OBS
<09.01.2017 12:58:06> [INFO] [2017-09-01 12:58:06] Begin Table Load OBSPROJ
<09.01.2017 12:58:06> [INFO] [2017-09-01 12:58:06] Begin Table Load PCATTYPE
<09.01.2017 12:58:06> [INFO] [2017-09-01 12:58:06] Begin Table Load PCATUSER
<09.01.2017 12:58:06> [INFO] [2017-09-01 12:58:06] Begin Table Load PCATVAL
<09.01.2017 12:58:06> [INFO] [2017-09-01 12:58:06] Begin Table Load PFOLIO
<09.01.2017 12:58:06> [INFO] [2017-09-01 12:58:06] Begin Table Load PHASE
<09.01.2017 12:58:06> [INFO] [2017-09-01 12:58:06] Begin Table Load POBS
<09.01.2017 12:58:06> [INFO] [2017-09-01 12:58:06] Begin Table Load PREFER
<09.01.2017 12:58:07> [INFO] [2017-09-01 12:58:07] Begin Table Load PROCGROUP
<09.01.2017 12:58:07> [INFO] [2017-09-01 12:58:07] Begin Table Load PROCITEM
<09.01.2017 12:58:07> [INFO] [2017-09-01 12:58:07] Begin Table Load PROFILE
<09.01.2017 12:58:07> [INFO] [2017-09-01 12:58:07] Begin Table Load PROFPRIV
<09.01.2017 12:58:07> [INFO] [2017-09-01 12:58:07] Begin Table Load PROJCOST
<09.01.2017 12:58:07> [INFO] [2017-09-01 12:58:07] Begin Table Load PROJECT
<09.01.2017 12:58:08> [INFO] [2017-09-01 12:58:08] Begin Table Load PROJEST
<09.01.2017 12:58:08> [INFO] [2017-09-01 12:58:08] Begin Table Load PROJFUND
<09.01.2017 12:58:08> [INFO] [2017-09-01 12:58:08] Begin Table Load PROJISSU
<09.01.2017 12:58:11> [INFO] [2017-09-01 12:58:11] Begin Table Load PROJPCAT
<09.01.2017 12:58:11> [INFO] [2017-09-01 12:58:11] Begin Table Load PROJPROP
<09.01.2017 12:58:11> [INFO] [2017-09-01 12:58:11] Begin Table Load PROJRISK
<09.01.2017 12:58:11> [INFO] [2017-09-01 12:58:11] Begin Table Load PROJSHAR
<09.01.2017 12:58:11> [INFO] [2017-09-01 12:58:11] Begin Table Load PROJTHRS
<09.01.2017 12:58:11> [INFO] [2017-09-01 12:58:11] Begin Table Load PROJWBS
<09.01.2017 12:58:12> [INFO] [2017-09-01 12:58:12] Begin Table Load PROJWSRPT
<09.01.2017 12:58:12> [INFO] [2017-09-01 12:58:12] Begin Table Load PRPFOLIO
<09.01.2017 12:58:12> [INFO] [2017-09-01 12:58:12] Begin Table Load PUBUSER
<09.01.2017 12:58:12> [INFO] [2017-09-01 12:58:12] Begin Table Load QUERYLIB
<09.01.2017 12:58:12> [INFO] [2017-09-01 12:58:12] Begin Table Load RCATTYPE
<09.01.2017 12:58:12> [INFO] [2017-09-01 12:58:12] Begin Table Load RCATVAL
<09.01.2017 12:58:12> [INFO] [2017-09-01 12:58:12] Begin Table Load REFRDEL
<09.01.2017 12:58:12> [INFO] [2017-09-01 12:58:12] Begin Table Load REITTYPE
<09.01.2017 12:58:12> [INFO] [2017-09-01 12:58:12] Begin Table Load RELEASE
<09.01.2017 12:58:12> [INFO] [2017-09-01 12:58:12] Begin Table Load RELITEMS
<09.01.2017 12:58:13> [INFO] [2017-09-01 12:58:13] Begin Table Load RFOLIO
<09.01.2017 12:58:13> [INFO] [2017-09-01 12:58:13] Begin Table Load RISKCTRL
<09.01.2017 12:58:15> [INFO] [2017-09-01 12:58:15] Begin Table Load RISKTYPE
<09.01.2017 12:58:15> [INFO] [2017-09-01 12:58:15] Begin Table Load RLFOLIO
<09.01.2017 12:58:15> [INFO] [2017-09-01 12:58:15] Begin Table Load ROLELIMIT
<09.01.2017 12:58:15> [INFO] [2017-09-01 12:58:15] Begin Table Load ROLERATE
<09.01.2017 12:58:15> [INFO] [2017-09-01 12:58:15] Begin Table Load ROLES
<09.01.2017 12:58:15> [INFO] [2017-09-01 12:58:15] Begin Table Load ROLFOLIO
<09.01.2017 12:58:15> [INFO] [2017-09-01 12:58:15] Begin Table Load RPT
<09.01.2017 12:58:25> [INFO] [2017-09-01 12:58:25] Begin Table Load RPTBATCH
<09.01.2017 12:58:25> [INFO] [2017-09-01 12:58:25] Begin Table Load RPTGROUP
<09.01.2017 12:58:25> [INFO] [2017-09-01 12:58:25] Begin Table Load RPTLIST
<09.01.2017 12:58:25> [INFO] [2017-09-01 12:58:25] Begin Table Load RSRC
<09.01.2017 12:58:26> [INFO] [2017-09-01 12:58:26] Begin Table Load RSRCANDASH
<09.01.2017 12:58:26> [INFO] [2017-09-01 12:58:26] Begin Table Load RSRCANVIEW
<09.01.2017 12:58:26> [INFO] [2017-09-01 12:58:26] Begin Table Load RSRCCURV
<09.01.2017 12:58:26> [INFO] [2017-09-01 12:58:26] Begin Table Load RSRCHOUR
<09.01.2017 12:58:27> [INFO] [2017-09-01 12:58:27] Begin Table Load RSRCPROP
<09.01.2017 12:58:27> [INFO] [2017-09-01 12:58:27] Begin Table Load RSRCRATE
<09.01.2017 12:58:27> [INFO] [2017-09-01 12:58:27] Begin Table Load RSRCRCAT
<09.01.2017 12:58:27> [INFO] [2017-09-01 12:58:27] Begin Table Load RSRCROLE
<09.01.2017 12:58:27> [INFO] [2017-09-01 12:58:27] Begin Table Load RSRCSEC
<09.01.2017 12:58:27> [INFO] [2017-09-01 12:58:27] Begin Table Load RSRFOLIO
<09.01.2017 12:58:27> [INFO] [2017-09-01 12:58:27] Begin Table Load SCENARIO
<09.01.2017 12:58:27> [INFO] [2017-09-01 12:58:27] Begin Table Load SCENPROJ
<09.01.2017 12:58:27> [INFO] [2017-09-01 12:58:27] Begin Table Load SCENROLE
<09.01.2017 12:58:27> [INFO] [2017-09-01 12:58:27] Begin Table Load SCENUSER
<09.01.2017 12:58:28> [INFO] [2017-09-01 12:58:28] Begin Table Load SHIFT
<09.01.2017 12:58:28> [INFO] [2017-09-01 12:58:28] Begin Table Load SHIFTPER
<09.01.2017 12:58:28> [INFO] [2017-09-01 12:58:28] Begin Table Load SUMPROJCOST
<09.01.2017 12:58:28> [INFO] [2017-09-01 12:58:28] Begin Table Load SUMTASK
<09.01.2017 12:58:28> [INFO] [2017-09-01 12:58:28] Begin Table Load SUMTASKSPREAD
<09.01.2017 12:58:33> [INFO] [2017-09-01 12:58:33] Begin Table Load SUMTRSRC
<09.01.2017 12:59:00> [INFO] [2017-09-01 12:59:00] Begin Table Load TASK
<09.01.2017 12:59:03> [INFO] [2017-09-01 12:59:03] Begin Table Load TASKACTV
<09.01.2017 12:59:05> [INFO] [2017-09-01 12:59:05] Begin Table Load TASKDOC
<09.01.2017 12:59:07> [INFO] [2017-09-01 12:59:07] Begin Table Load TASKFDBK
<09.01.2017 12:59:09> [INFO] [2017-09-01 12:59:09] Begin Table Load TASKFIN
<09.01.2017 12:59:10> [INFO] [2017-09-01 12:59:10] Begin Table Load TASKMEMO
<09.01.2017 12:59:12> [INFO] [2017-09-01 12:59:12] Begin Table Load TASKNOTE
<09.01.2017 12:59:14> [INFO] [2017-09-01 12:59:14] Begin Table Load TASKPRED
<09.01.2017 12:59:16> [INFO] [2017-09-01 12:59:16] Begin Table Load TASKPROC
<09.01.2017 12:59:19> [INFO] [2017-09-01 12:59:19] Begin Table Load TASKRISK
<09.01.2017 12:59:21> [INFO] [2017-09-01 12:59:21] Begin Table Load TASKRSRC
<09.01.2017 12:59:25> [INFO] [2017-09-01 12:59:25] Begin Table Load TASKSUM
<09.01.2017 12:59:26> [INFO] [2017-09-01 12:59:26] Begin Table Load TASKSUMFIN
<09.01.2017 12:59:28> [INFO] [2017-09-01 12:59:28] Begin Table Load TASKUSER
<09.01.2017 12:59:29> [INFO] [2017-09-01 12:59:29] Begin Table Load TASKWKSP
<09.01.2017 12:59:31> [INFO] [2017-09-01 12:59:31] Begin Table Load THRSPARM
<09.01.2017 12:59:33> [INFO] [2017-09-01 12:59:33] Begin Table Load TIMESHT
<09.01.2017 12:59:35> [INFO] [2017-09-01 12:59:35] Begin Table Load TMPLCATG
<09.01.2017 12:59:36> [INFO] [2017-09-01 12:59:36] Begin Table Load TRAKVIEW
<09.01.2017 12:59:41> [INFO] [2017-09-01 12:59:41] Begin Table Load TRSRCFIN
<09.01.2017 12:59:43> [INFO] [2017-09-01 12:59:43] Begin Table Load TRSRCSUM
<09.01.2017 12:59:45> [INFO] [2017-09-01 12:59:45] Begin Table Load TRSRCSUMFN
<09.01.2017 12:59:46> [INFO] [2017-09-01 12:59:46] Begin Table Load TSAUDIT
<09.01.2017 12:59:48> [INFO] [2017-09-01 12:59:48] Begin Table Load TSDATES
<09.01.2017 12:59:50> [INFO] [2017-09-01 12:59:50] Begin Table Load TSDELEGATE
<09.01.2017 12:59:51> [INFO] [2017-09-01 12:59:51] Begin Table Load UACCESS
<09.01.2017 12:59:53> [INFO] [2017-09-01 12:59:53] Begin Table Load UDFCODE
<09.01.2017 12:59:54> [INFO] [2017-09-01 12:59:54] Begin Table Load UDFTYPE
<09.01.2017 12:59:56> [INFO] [2017-09-01 12:59:56] Begin Table Load UDFVALUE
<09.01.2017 12:59:58> [INFO] [2017-09-01 12:59:58] Begin Table Load UEVNTREG
<09.01.2017 12:59:59> [INFO] [2017-09-01 12:59:59] Begin Table Load UMEASURE
<09.01.2017 13:00:01> [INFO] [2017-09-01 13:00:01] Begin Table Load USERCOL
<09.01.2017 13:00:03> [INFO] [2017-09-01 13:00:03] Begin Table Load USERDATA
<09.01.2017 13:00:09> [INFO] [2017-09-01 13:00:09] Begin Table Load USERENG
<09.01.2017 13:00:11> [INFO] [2017-09-01 13:00:11] Begin Table Load USEROBS
<09.01.2017 13:00:13> [INFO] [2017-09-01 13:00:13] Begin Table Load USEROPEN
<09.01.2017 13:00:15> [INFO] [2017-09-01 13:00:15] Begin Table Load USERS
<09.01.2017 13:00:17> [INFO] [2017-09-01 13:00:17] Begin Table Load USERSET
<09.01.2017 13:00:19> [INFO] [2017-09-01 13:00:19] Begin Table Load USERWKSP
<09.01.2017 13:00:20> [INFO] [2017-09-01 13:00:20] Begin Table Load USROPNVAL
<09.01.2017 13:00:22> [INFO] [2017-09-01 13:00:22] Begin Table Load VIEWPREF
<09.01.2017 13:00:23> [INFO] [2017-09-01 13:00:23] Begin Table Load VIEWPROP
<09.01.2017 13:00:25> [INFO] [2017-09-01 13:00:25] Begin Table Load VWPREFDASH
<09.01.2017 13:00:27> [INFO] [2017-09-01 13:00:27] Begin Table Load VWPREFDATA
<09.01.2017 13:00:30> [INFO] [2017-09-01 13:00:30] Begin Table Load VWPREFUSER
<09.01.2017 13:00:31> [INFO] [2017-09-01 13:00:31] Begin Table Load WBRSCAT
<09.01.2017 13:00:33> [INFO] [2017-09-01 13:00:33] Begin Table Load WBSBUDG
<09.01.2017 13:00:35> [INFO] [2017-09-01 13:00:35] Begin Table Load WBSMEMO
<09.01.2017 13:00:38> [INFO] [2017-09-01 13:00:38] Begin Table Load WBSRSRC
<09.01.2017 13:00:40> [INFO] [2017-09-01 13:00:40] Begin Table Load WBSRSRC_QTY
<09.01.2017 13:00:41> [INFO] [2017-09-01 13:00:41] Begin Table Load WBSSTEP
<09.01.2017 13:00:43> [INFO] [2017-09-01 13:00:43] Begin Table Load WKFLTMPL
<09.01.2017 13:00:44> [INFO] [2017-09-01 13:00:44] Begin Table Load WKFLUSER
<09.01.2017 13:00:46> [INFO] [2017-09-01 13:00:46] Begin Table Load WORKFLOW
<09.01.2017 13:00:47> [INFO] [2017-09-01 13:00:47] Begin Table Load WORKSPACE
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] [USER] Data Load Complete in 169.318 seconds
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] DECLARE
 V_CURR_RATE CURRTYPE.BASE_EXCH_RATE%TYPE;
 V_OLD_CURR_ID CURRTYPE.CURR_ID%TYPE;
 V_NEW_CURR_ID CURRTYPE.CURR_ID%TYPE;
 V_EXISTING_BASE_CURRENCY VARCHAR2(25);
 V_NEW_BASE_CURRENCY VARCHAR2(25);
 BEGIN
 V_EXISTING_BASE_CURRENCY := 'USD';
 V_NEW_BASE_CURRENCY := 'USD';
 IF (V_EXISTING_BASE_CURRENCY <> V_NEW_BASE_CURRENCY) THEN
     SELECT BASE_EXCH_RATE, CURR_ID
       INTO V_CURR_RATE, V_NEW_CURR_ID
       FROM CURRTYPE
      WHERE CURR_SHORT_NAME = V_NEW_BASE_CURRENCY;
     SELECT CURR_ID
       INTO V_OLD_CURR_ID
       FROM CURRTYPE
      WHERE CURR_SHORT_NAME = V_EXISTING_BASE_CURRENCY;
     UPDATE CURRTYPE
        SET CURR_ID = V_NEW_CURR_ID
      WHERE CURR_ID = V_OLD_CURR_ID;
     UPDATE CURRTYPE
        SET CURR_ID = V_OLD_CURR_ID
      WHERE CURR_SHORT_NAME = V_NEW_BASE_CURRENCY;
     UPDATE CURRTYPE SET BASE_EXCH_RATE = BASE_EXCH_RATE / V_CURR_RATE;
   END IF;
 EXCEPTION 
  WHEN NO_DATA_FOUND THEN
       DBMS_OUTPUT.PUT_LINE('SPECIFIED CURRENCY DOES NOT EXIST');
  WHEN OTHERS THEN 
       DBMS_OUTPUT.PUT_LINE(SQLERRM);
 END;
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] DELETE FROM QUERYLIB WHERE CORE_FLAG='Y'
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] UPDATE QUERYLIB SET QUERY_LIB_ID=QUERY_LIB_ID+100000 WHERE CORE_FLAG='N'
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 1,'CLIENT_SERVER','Y','SELECT :COLS1 FROM PROJECT ST :HS1 ,UDFVALUE UV :HS2 , UDFTYPE UT :HS3 WHERE ORIG_PROJ_ID IS NULL AND (ST.PROJ_ID=UV.FK_ID) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS1) UNION SELECT :HO1 :COLS2 FROM RSRC R :HS4 , UDFVALUE UV :HS5 , UDFTYPE UT :HS6 WHERE (USER_ID = :BN1) AND (UV.FK_ID= R.RSRC_ID) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS2) UNION SELECT :HO2 :COLS3 FROM UDFVALUE UV :HS7 , UDFTYPE UT :HS8 WHERE (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS3)','QH=/*+ ORDERED */;HO2=/*+ INDEX(UV PK_UDFVALUE) USE_NL(UV UT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 2,'CLIENT_SERVER','Y','SELECT :COLS1 FROM PROJECT ST :HS1 ,UDFVALUE UV :HS2 , UDFTYPE UT :HS3 WHERE ORIG_PROJ_ID IS NULL AND (ST.PROJ_ID=UV.FK_ID) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS1) UNION SELECT :HO1 :COLS2 FROM UDFVALUE UV :HS4 , UDFTYPE UT :HS5 WHERE (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME IN (:INCL1))','QH=/*+ ORDERED */;HO1=/*+ INDEX(UV PK_UDFVALUE) USE_NL(UV UT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 3,'CLIENT_SERVER','Y','SELECT :COLS1 FROM ACTVCODE AC :HS1 , ACTVTYPE ACT :HS2 WHERE ACT.ACTV_CODE_TYPE_ID = AC.ACTV_CODE_TYPE_ID AND ( ACT.PROJ_ID IS NULL OR ACT.PROJ_ID IN (SELECT :HO1 :COLS2 FROM PROJWBS PW :HS3 , PROJECT P :HS4 WHERE P.PROJ_ID = PW.PROJ_ID AND PW.PROJ_NODE_FLAG = :BS1 AND P.PROJECT_FLAG = :BS2) OR (1=2) ) ORDER BY AC.ACTV_CODE_ID','QH=/*+ USE_NL(ACT AC) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 4,'CLIENT_SERVER','Y','SELECT :COLS1 FROM PROJECT ST :HS1 ,PFLOAD_VIEW PRJ :HS2 , UDFVALUE UV :HS3 , UDFTYPE UT :HS4 WHERE ( ST.PROJ_ID = PRJ.PROJ_ID AND PRJ.PFOLIO_ID IN (:INCL1)) AND (ST.PROJ_ID=UV.FK_ID) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS1) UNION SELECT :HO1 :COLS2 FROM UDFVALUE UV :HS5 , UDFTYPE UT :HS6 WHERE UT.UDF_TYPE_ID = UV.UDF_TYPE_ID AND UT.TABLE_NAME IN (:INCL2)','QH=/*+ ORDERED */;HO1=/*+ INDEX(UV PK_UDFVALUE) USE_NL(UV UT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 5,'CLIENT_SERVER','Y','SELECT :COLS1 FROM PROJECT ST :HS1 ,PFLOAD_VIEW PRJ :HS2 , UDFVALUE UV :HS3 , UDFTYPE UT :HS4 WHERE ( ST.PROJ_ID = PRJ.PROJ_ID AND PRJ.PFOLIO_ID IN (:INCL1)) AND (ST.PROJ_ID=UV.FK_ID) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS1) UNION SELECT :HO1 :COLS2 FROM RSRC R :HS5 , UDFVALUE UV :HS6 , UDFTYPE UT :HS7 WHERE (USER_ID = :BN1) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UV.FK_ID= R.RSRC_ID) AND (UT.TABLE_NAME=:BS2) UNION SELECT :HO2 :COLS3 FROM UDFVALUE UV :HS8 , UDFTYPE UT :HS9 WHERE UT.UDF_TYPE_ID = UV.UDF_TYPE_ID AND UT.TABLE_NAME = :BS3','QH=/*+ ORDERED */;HO2=/*+ INDEX(UV PK_UDFVALUE) USE_NL(UV UT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 6,'CLIENT_SERVER','Y','SELECT :COLS1 FROM UDFVALUE UV :HS1 , UDFTYPE UT :HS2 WHERE UT.UDF_TYPE_ID = UV.UDF_TYPE_ID AND UT.TABLE_NAME IN (:INCL1)','QH=/*+ INDEX(UV PK_UDFVALUE) USE_NL(UV UT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 7,'CLIENT_SERVER','Y','SELECT :COLS1 FROM PROJECT ST :HS1 ,UDFVALUE UV :HS2 , UDFTYPE UT :HS3 WHERE (ST.PROJ_ID=UV.FK_ID) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS1) AND ST.PROJ_ID IN ( SELECT :HO1 :COLS2 FROM PROJWBS PW START WITH PW.WBS_ID IN ( SELECT :HO2 :COLS3 FROM PRPFOLIO :HS4 WHERE PFOLIO_ID = :BN1) CONNECT BY PRIOR PW.PARENT_WBS_ID = PW.WBS_ID) UNION SELECT :HO3 :COLS4 FROM UDFVALUE UV :HS5 , UDFTYPE UT :HS6 WHERE (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME IN (:INCL1))','HO3=/*+ INDEX(UV PK_UDFVALUE) USE_NL(UV UT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 8,'CLIENT_SERVER','Y','SELECT :COLS1 FROM PROJECT ST :HS1 ,UACCESS PRJ :HS2 ,UDFVALUE UV :HS3 , UDFTYPE UT :HS4 WHERE ( ST.PROJ_ID = PRJ.PROJ_ID AND ORIG_PROJ_ID IS NULL AND PRJ.USER_ID = :BN1 AND PRJ.ACCESS_FLAG=:BS1) AND (ST.PROJ_ID=UV.FK_ID) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS2) UNION SELECT :HO1 :COLS2 FROM UDFVALUE UV :HS5 , UDFTYPE UT :HS6 WHERE (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME IN (:INCL1))','HO1=/*+ INDEX(UV PK_UDFVALUE) USE_NL(UV UT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 9,'CLIENT_SERVER','Y','SELECT :COLS1 FROM PROJECT ST :HS1 ,PFLOAD_UACCESS_VIEW PRJ :HS2 , UDFVALUE UV :HS3 , UDFTYPE UT :HS4 WHERE ( ST.PROJ_ID = PRJ.PROJ_ID AND PRJ.PFOLIO_ID IN (:INCL1) AND USER_ID = :BN1 AND ACCESS_FLAG = :BS1) AND (ST.PROJ_ID=UV.FK_ID) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS2) UNION SELECT :HO1 :COLS2 FROM UDFVALUE UV :HS5 , UDFTYPE UT :HS6 WHERE UT.UDF_TYPE_ID = UV.UDF_TYPE_ID AND UT.TABLE_NAME IN (:INCL2)','HO1=/*+ INDEX(UV PK_UDFVALUE) USE_NL(UV UT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 10,'CLIENT_SERVER','Y','SELECT :COLS1 FROM PROJECT ST :HS1 , UACCESS UA :HS2 , UDFVALUE UV :HS3 , UDFTYPE UT :HS4 WHERE (ST.PROJ_ID=UV.FK_ID) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS1) AND (UA.PROJ_ID = ST.PROJ_ID) AND UA.USER_ID = :BN1 AND UA.ACCESS_FLAG = :BS2 AND ST.PROJ_ID IN ( SELECT :HO1 :COLS2 FROM PROJWBS PW START WITH PW.WBS_ID IN ( SELECT :HO2 :COLS3 FROM PRPFOLIO :HS5 WHERE PFOLIO_ID = :BN2) CONNECT BY PRIOR PW.PARENT_WBS_ID = PW.WBS_ID) UNION SELECT :HO3 :COLS4 FROM UDFVALUE UV :HS6 , UDFTYPE UT :HS7 WHERE UT.UDF_TYPE_ID = UV.UDF_TYPE_ID AND UT.TABLE_NAME IN (:INCL1)','HO3=/*+ INDEX(UV PK_UDFVALUE) USE_NL(UV UT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 11,'CLIENT_SERVER','Y','SELECT :COLS1 FROM PROJECT ST :HS1 ,UACCESS PRJ :HS2 , UDFVALUE UV :HS3 , UDFTYPE UT :HS4 WHERE ( ST.PROJ_ID = PRJ.PROJ_ID AND ORIG_PROJ_ID IS NULL AND PRJ.USER_ID = :BN1 AND PRJ.ACCESS_FLAG=:BS1) AND (ST.PROJ_ID=UV.FK_ID) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS2) UNION SELECT :HO1 :COLS2 FROM RSRC R :HS5 , UDFVALUE UV :HS6 , UDFTYPE UT :HS7 WHERE (USER_ID = :BN2) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UV.FK_ID= R.RSRC_ID) AND (UT.TABLE_NAME=:BS3) UNION SELECT :HO2 :COLS3 FROM UDFVALUE UV :HS8 , UDFTYPE UT :HS9 WHERE UT.UDF_TYPE_ID = UV.UDF_TYPE_ID AND UT.TABLE_NAME = :BS4','HO2=/*+ INDEX(UV PK_UDFVALUE) USE_NL(UV UT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 16,'CLIENT_SERVER','Y','SELECT :COLS1 FROM PROJECT ST :HS1 , UACCESS UA :HS2 , UDFVALUE UV :HS3 , UDFTYPE UT :HS4 WHERE (ST.PROJ_ID=UV.FK_ID) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS1) AND (UA.PROJ_ID = ST.PROJ_ID) AND UA.USER_ID = :BN1 AND UA.ACCESS_FLAG = :BS2 AND ST.PROJ_ID IN ( SELECT :HO1 :COLS2 FROM PROJWBS PW START WITH PW.WBS_ID IN ( SELECT :HO2 :COLS3 FROM PRPFOLIO :HS5 WHERE PFOLIO_ID = :BN2) CONNECT BY PRIOR PW.PARENT_WBS_ID = PW.WBS_ID) UNION SELECT :HO3 :COLS4 FROM RSRC R :HS6 , UDFVALUE UV :HS7 , UDFTYPE UT :HS8 WHERE (USER_ID = :BN3) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UV.FK_ID= R.RSRC_ID) AND (UT.TABLE_NAME=:BS3) UNION SELECT :HO4 :COLS5 FROM UDFVALUE UV :HS9 , UDFTYPE UT :HS10 WHERE UT.UDF_TYPE_ID = UV.UDF_TYPE_ID AND UT.TABLE_NAME = :BS4','HO4=/*+ INDEX(UV PK_UDFVALUE) USE_NL(UV UT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 17,'CLIENT_SERVER','Y','SELECT :COLS1 FROM PROJECT ST :HS1 ,PFLOAD_UACCESS_VIEW PRJ :HS2 , UDFVALUE UV :HS3 , UDFTYPE UT :HS4 WHERE ( ST.PROJ_ID = PRJ.PROJ_ID AND PRJ.PFOLIO_ID IN (:INCL1) AND USER_ID = :BN1 AND ACCESS_FLAG = :BS1) AND (ST.PROJ_ID=UV.FK_ID) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UT.TABLE_NAME=:BS2) UNION SELECT :HO1 :COLS2 FROM RSRC R :HS5 , UDFVALUE UV :HS6 , UDFTYPE UT :HS7 WHERE (USER_ID = :BN2) AND (UV.UDF_TYPE_ID=UT.UDF_TYPE_ID) AND (UV.FK_ID= R.RSRC_ID) AND (UT.TABLE_NAME=:BS3) UNION SELECT :HO2 :COLS3 FROM UDFVALUE UV :HS8 , UDFTYPE UT :HS9 WHERE UT.UDF_TYPE_ID = UV.UDF_TYPE_ID AND UT.TABLE_NAME = :BS4','HO2=/*+ INDEX(UV PK_UDFVALUE) USE_NL(UV UT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 500,'CLIENT_SERVER','Y','SELECT :COLS1 FROM RSRC R :HS1 , TIMESHT TS :HS2 , TSDATES TSD :HS3 WHERE R.RSRC_ID = TS.RSRC_ID AND TS.STATUS_CODE <> :BS1 AND TS.TS_ID = TSD.TS_ID AND TSD.START_DATE >= TO_DATE(:BS2, :BS3) AND TSD.END_DATE <= TO_DATE(:BS4, :BS5) ORDER BY R.RSRC_ID','QH=/*+ FULL(TSD) INDEX(TS PK_TIMESHT) */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 18,'CLIENT_SERVER','Y','SELECT :COLS1 FROM RSRCHOUR RH :HS1 , TIMESHT TS :HS2 , TSDATES TD :HS3 WHERE ( RH.PROJ_ID IN (SELECT :HO1 :COLS2 FROM PROJSHAR :HS4 WHERE SESSION_ID = :BN1 AND LOAD_STATUS = :BS1)) AND RH.NONWORK_TYPE_ID IS NULL AND RH.TASK_TS_FLAG = :BS2 AND (RH.HR_CNT IS NOT NULL OR RH.OT_HR_CNT IS NOT NULL) AND RH.TS_ID = TS.TS_ID AND RH.RSRC_ID = TS.RSRC_ID AND TS.STATUS_CODE = :BS3 AND RH.TS_ID = TD.TS_ID ORDER BY RSRC_HR_ID','QH=/*+ ORDERED */')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 19,'MYPRIMAVERA','Y','SELECT :COLS1 FROM TASKRSRC :HS1 , TASK :HS2 , RSRC :HS3 , PROJECT :HS4 , ROLES :HS5 , PROJWBS ALIAS_PROJWBS :HS6 WHERE TASKRSRC.PROJ_ID=PROJECT.PROJ_ID AND TASKRSRC.TASK_ID=TASK.TASK_ID AND TASKRSRC.PROJ_ID=ALIAS_PROJWBS.PROJ_ID AND ALIAS_PROJWBS.PROJ_NODE_FLAG=:BS1 AND TASKRSRC.ROLE_ID=ROLES.ROLE_ID(+) AND TASKRSRC.RSRC_ID=RSRC.RSRC_ID(+) AND ( ( TASKRSRC.ROLE_ID IS NOT NULL) AND ( ( DECODE(PROJECT.ORIG_PROJ_ID, NULL, :BS2 , :BS3 ) = :BS4 AND DECODE(ALIAS_PROJWBS.STATUS_CODE, :BS5 , :BS6 , :BS7 ) = :BS8 AND DECODE(ALIAS_PROJWBS.STATUS_CODE, :BS9 , :BS10 , :BS11 ) = :BS12 ) ) ) ORDER BY TASKRSRC.TASKRSRC_ID ASC','QH=/*+ FIRST_ROWS*/')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] INSERT INTO QUERYLIB(QUERY_LIB_ID,APP_NAME,CORE_FLAG,MATCH_SQL,HINTS)VALUES(
 20,'MYPRIMAVERA','Y','SELECT :COLS1 FROM TASKRSRC :HS1 , TASK :HS2 , RSRC :HS3 , PROJECT :HS4 , ROLES :HS5 , PROJWBS ALIAS_PROJWBS :HS6 WHERE TASKRSRC.PROJ_ID=PROJECT.PROJ_ID AND TASKRSRC.TASK_ID=TASK.TASK_ID AND TASKRSRC.PROJ_ID=ALIAS_PROJWBS.PROJ_ID AND ALIAS_PROJWBS.PROJ_NODE_FLAG=:BS1 AND TASKRSRC.ROLE_ID=ROLES.ROLE_ID(+) AND TASKRSRC.RSRC_ID=RSRC.RSRC_ID(+) AND ( ( TASKRSRC.ROLE_ID IS NULL) AND ( ( DECODE(PROJECT.ORIG_PROJ_ID, NULL, :BS2 , :BS3 ) = :BS4 AND DECODE(ALIAS_PROJWBS.STATUS_CODE, :BS5 , :BS6 , :BS7 ) = :BS8 AND DECODE(ALIAS_PROJWBS.STATUS_CODE, :BS9 , :BS10 , :BS11 ) = :BS12 ) ) ) ORDER BY TASKRSRC.TASKRSRC_ID ASC','QH=/*+ FIRST_ROWS*/')
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] ALTER TABLE ACCOUNT
 ADD CONSTRAINT PK_ACCOUNT PRIMARY KEY (ACCT_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 30K NEXT 30K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] ALTER TABLE ACTVCODE
 ADD CONSTRAINT PK_ACTVCODE PRIMARY KEY (ACTV_CODE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] ALTER TABLE ACTVTYPE
 ADD CONSTRAINT PK_ACTVTYPE PRIMARY KEY (ACTV_CODE_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] ALTER TABLE ADMIN_CONFIG
 ADD CONSTRAINT PK_ADMIN_CONFIG PRIMARY KEY (CONFIG_NAME)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] ALTER TABLE BASETYPE
 ADD CONSTRAINT PK_BASETYPE PRIMARY KEY (BASE_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 20K NEXT 20K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] ALTER TABLE BRE_REGISTRY
 ADD CONSTRAINT PK_BRE_REGISTRY PRIMARY KEY (BRE_REGISTRY_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] ALTER TABLE BUDGCHNG
 ADD CONSTRAINT PK_BUDGCHNG PRIMARY KEY (BUDG_CHNG_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] ALTER TABLE CALENDAR
 ADD CONSTRAINT PK_CALENDAR PRIMARY KEY (CLNDR_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] ALTER TABLE COSTTYPE
 ADD CONSTRAINT PK_COSTTYPE PRIMARY KEY (COST_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 20K NEXT 20K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] ALTER TABLE CURRTYPE
 ADD CONSTRAINT PK_CURRTYPE PRIMARY KEY (CURR_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 20K NEXT 20K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:49> [INFO] [2017-09-01 13:00:49] ALTER TABLE DASHBOARD
 ADD CONSTRAINT PK_DASHBOARD PRIMARY KEY (DASHBOARD_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE DASHUSER
 ADD CONSTRAINT PK_DASHUSER PRIMARY KEY (DASHBOARD_ID,USER_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE DOCCATG
 ADD CONSTRAINT PK_DOCCATG PRIMARY KEY (DOC_CATG_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE DOCREVIEW
 ADD CONSTRAINT PK_DOCREVIEW PRIMARY KEY (DOC_REVIEW_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE DOCREVIEWTASK
 ADD CONSTRAINT PK_DOCREVIEWTASK PRIMARY KEY (REVIEW_TASK_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE DOCSTAT
 ADD CONSTRAINT PK_DOCSTAT PRIMARY KEY (DOC_STATUS_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 20K NEXT 20K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE DOCUMENT
 ADD CONSTRAINT PK_DOCUMENT PRIMARY KEY (DOC_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE EXPPROJ
 ADD CONSTRAINT PK_EXPPROJ PRIMARY KEY (PROJ_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE EXTAPP
 ADD CONSTRAINT PK_EXTAPP PRIMARY KEY (APP_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE FACTOR
 ADD CONSTRAINT PK_FACTOR PRIMARY KEY (FACT_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 30K NEXT 30K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE FACTVAL
 ADD CONSTRAINT PK_FACTVAL PRIMARY KEY (FACT_VAL_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE FILTPROP
 ADD CONSTRAINT PK_FILTPROP PRIMARY KEY (FILTER_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE FINDATES
 ADD CONSTRAINT PK_FINDATES PRIMARY KEY (FIN_DATES_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE FORMCATG
 ADD CONSTRAINT PK_FORMCATG PRIMARY KEY (FORM_CATG_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE FORMPROJ
 ADD CONSTRAINT PK_FORMPROJ PRIMARY KEY (FORM_TMPL_ID,PROJ_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE FORMTMPL
 ADD CONSTRAINT PK_FORMTMPL PRIMARY KEY (FORM_TMPL_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE FUNDSRC
 ADD CONSTRAINT PK_FUNDSRC PRIMARY KEY (FUND_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE GCHANGE
 ADD CONSTRAINT PK_GCHANGE_ID PRIMARY KEY (GCHANGE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE HQDATA
 ADD CONSTRAINT PK_HQDATA PRIMARY KEY (SESSION_ID,CONTEXT_ID,FK_ID,VALUE)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 5M NEXT 5M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE HQUERY
 ADD CONSTRAINT PK_HQUERY PRIMARY KEY (SESSION_ID,CONTEXT_ID,FK_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 5M NEXT 5M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE ISSUHIST
 ADD CONSTRAINT PK_ISSUHIST PRIMARY KEY (ISSUE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE ITERATION
 ADD CONSTRAINT PK_ITERATION PRIMARY KEY (ITERATION_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 64K NEXT 64K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE ITERDAYS
 ADD CONSTRAINT PK_ITERDAYS PRIMARY KEY (TASK_ID,DAY_NUMBER)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE ITERGOAL
 ADD CONSTRAINT PK_ITERGOAL PRIMARY KEY (ITER_GOAL_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE JOBLOG
 ADD CONSTRAINT PK_JOBLOG PRIMARY KEY (JOB_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE JOBRPT
 ADD CONSTRAINT PK_JOBRPT PRIMARY KEY (JOB_ID,RPT_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE JOBSVC
 ADD CONSTRAINT PK_JOBSVC PRIMARY KEY (JOB_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE LOCATION
 ADD CONSTRAINT PK_LOCATION PRIMARY KEY (LOCATION_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE MEMOTYPE
 ADD CONSTRAINT PK_MEMOTYPE PRIMARY KEY (MEMO_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 30K NEXT 30K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE NEXTKEY
 ADD CONSTRAINT PK_NEXTKEY PRIMARY KEY (KEY_NAME)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 20K NEXT 20K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE NONWORK
 ADD CONSTRAINT PK_NONWORK PRIMARY KEY (NONWORK_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 20K NEXT 20K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE NOTE
 ADD CONSTRAINT PK_NOTE PRIMARY KEY (NOTE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE OBS
 ADD CONSTRAINT PK_OBS PRIMARY KEY (OBS_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE OBSPROJ
 ADD CONSTRAINT PK_OBSPROJ PRIMARY KEY (OBS_ID,PROJ_ID,WBS_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PCATTYPE
 ADD CONSTRAINT PK_PCATTYPE PRIMARY KEY (PROJ_CATG_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 30K NEXT 30K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PCATUSER
 ADD CONSTRAINT PK_PCATUSER PRIMARY KEY (PROJ_CATG_ID,USER_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PCATVAL
 ADD CONSTRAINT PK_PCATVAL PRIMARY KEY (PROJ_CATG_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PFOLIO
 ADD CONSTRAINT PK_PFOLIO PRIMARY KEY (PFOLIO_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PHASE
 ADD CONSTRAINT PK_PHASE PRIMARY KEY (PHASE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 30K NEXT 30K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE POBS
 ADD CONSTRAINT PK_POBS PRIMARY KEY (POBS_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PREFER
 ADD CONSTRAINT PK_PREFER PRIMARY KEY (PREFER_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 8K NEXT 8K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PRMQUEUE
 ADD CONSTRAINT PK_PRMQUEUE PRIMARY KEY (QUEUE_NAME,MSG_KEY,ENQUEUE_DATE)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROCGROUP
 ADD CONSTRAINT PK_PROCGROUP PRIMARY KEY (PROC_GROUP_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 30K NEXT 30K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROCITEM
 ADD CONSTRAINT PK_PROCITEM PRIMARY KEY (PROC_ITEM_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 64K NEXT 64K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROFILE
 ADD CONSTRAINT PK_PROFILE PRIMARY KEY (PROF_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 30K NEXT 30K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROFPRIV
 ADD CONSTRAINT PK_PROFPRIV PRIMARY KEY (PROF_ID,PRIV_NUM)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROJCOST
 ADD CONSTRAINT PK_PROJCOST PRIMARY KEY (COST_ITEM_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROJECT
 ADD CONSTRAINT PK_PROJECT PRIMARY KEY (PROJ_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROJEST
 ADD CONSTRAINT PK_PROJEST PRIMARY KEY (PROJ_EST_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROJFUND
 ADD CONSTRAINT PK_PROJFUND PRIMARY KEY (PROJ_FUND_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROJISSU
 ADD CONSTRAINT PK_PROJISSU PRIMARY KEY (ISSUE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROJPCAT
 ADD CONSTRAINT PK_PROJPCAT PRIMARY KEY (PROJ_ID,PROJ_CATG_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 30K NEXT 30K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROJPROP
 ADD CONSTRAINT PK_PROJPROP PRIMARY KEY (PROJ_ID,PROP_NAME)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROJRISK
 ADD CONSTRAINT PK_PROJRISK PRIMARY KEY (RISK_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROJSHAR
 ADD CONSTRAINT PK_PROJSHAR PRIMARY KEY (PROJ_ID,SESSION_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROJTHRS
 ADD CONSTRAINT PK_PROJTHRS PRIMARY KEY (THRESH_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROJWBS
 ADD CONSTRAINT PK_PROJWBS PRIMARY KEY (WBS_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PROJWSRPT
 ADD CONSTRAINT PK_PROJWSRPT PRIMARY KEY (RPT_ID,PROJ_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PRPFOLIO
 ADD CONSTRAINT PK_PRPFOLIO PRIMARY KEY (PFOLIO_ID,WBS_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE PUBUSER
 ADD CONSTRAINT PK_PUBUSER PRIMARY KEY (PUBLIC_GROUP_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 30K NEXT 30K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE QUERYLIB
 ADD CONSTRAINT PK_QUERYLIB PRIMARY KEY (QUERY_LIB_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RCATTYPE
 ADD CONSTRAINT PK_RCATTYPE PRIMARY KEY (RSRC_CATG_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 30K NEXT 30K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RCATVAL
 ADD CONSTRAINT PK_RCATVAL PRIMARY KEY (RSRC_CATG_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE REITTYPE
 ADD CONSTRAINT PK_REITTYPE PRIMARY KEY (RELATED_ITEM_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 32K NEXT 32K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RELEASE
 ADD CONSTRAINT PK_RELEASE PRIMARY KEY (RELEASE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RELITEMS
 ADD CONSTRAINT PK_RELITEMS PRIMARY KEY (ITEM_TYPE_ID,FK_ID,RELATED_ITEM_TYPE_ID,RELATED_FK_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 2M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RFOLIO
 ADD CONSTRAINT PK_RFOLIO PRIMARY KEY (RFOLIO_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RISKCTRL
 ADD CONSTRAINT PK_RISKCTRL PRIMARY KEY (RISK_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RISKTYPE
 ADD CONSTRAINT PK_RISKTYPE PRIMARY KEY (RISK_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 20K NEXT 20K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RLFOLIO
 ADD CONSTRAINT PK_RLFOLIO_ID PRIMARY KEY (RLFOLIO_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE ROLELIMIT
 ADD CONSTRAINT PK_ROLELIMIT PRIMARY KEY (ROLELIMIT_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE ROLERATE
 ADD CONSTRAINT PK_ROLERATE PRIMARY KEY (ROLE_RATE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE ROLES
 ADD CONSTRAINT PK_ROLES PRIMARY KEY (ROLE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 90K NEXT 90K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE ROLFOLIO
 ADD CONSTRAINT PK_ROLFOLIO PRIMARY KEY (RLFOLIO_ID,ROLE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RPT
 ADD CONSTRAINT PK_RPT PRIMARY KEY (RPT_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RPTBATCH
 ADD CONSTRAINT PK_RPTBATCH PRIMARY KEY (RPT_BATCH_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RPTGROUP
 ADD CONSTRAINT PK_RPTGROUP PRIMARY KEY (RPT_GROUP_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RPTLIST
 ADD CONSTRAINT PK_RPTLIST PRIMARY KEY (RPT_BATCH_ID,RPT_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RSRC
 ADD CONSTRAINT PK_RSRC PRIMARY KEY (RSRC_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RSRCANDASH
 ADD CONSTRAINT PK_RSRCANDASH PRIMARY KEY (DASHBOARD_ID,RSRCAN_VIEW_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RSRCANVIEW
 ADD CONSTRAINT PK_RSRCANVIEW PRIMARY KEY (RSRCAN_VIEW_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RSRCCURV
 ADD CONSTRAINT PK_RSRCCURV PRIMARY KEY (CURV_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RSRCHOUR
 ADD CONSTRAINT PK_RSRCHOUR PRIMARY KEY (RSRC_HR_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 800K NEXT 800K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RSRCPROP
 ADD CONSTRAINT PK_RSRCPROP PRIMARY KEY (RSRC_ID,PROP_NAME)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RSRCRATE
 ADD CONSTRAINT PK_RSRCRATE PRIMARY KEY (RSRC_RATE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RSRCRCAT
 ADD CONSTRAINT PK_RSRCRCAT PRIMARY KEY (RSRC_ID,RSRC_CATG_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RSRCROLE
 ADD CONSTRAINT PK_RSRCROLE PRIMARY KEY (RSRC_ID,ROLE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RSRCSEC
 ADD CONSTRAINT PK_RSRCSEC PRIMARY KEY (USER_ID,RSRC_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 200K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE RSRFOLIO
 ADD CONSTRAINT PK_RSRFOLIO PRIMARY KEY (RFOLIO_ID,RSRC_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE SCENARIO
 ADD CONSTRAINT PK_SCENARIO PRIMARY KEY (SCENARIO_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE SCENPROJ
 ADD CONSTRAINT PK_SCENPROG PRIMARY KEY (SCENARIO_ID,PROJ_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE SCENROLE
 ADD CONSTRAINT PK_SCENROLE PRIMARY KEY (SCENARIO_ID,ROLE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE SCENUSER
 ADD CONSTRAINT PK_SCENUSER PRIMARY KEY (SCENARIO_ID,USER_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE SETTINGS
 ADD CONSTRAINT PK_SETTINGS PRIMARY KEY (NAMESPACE,SETTING_NAME)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE SHIFT
 ADD CONSTRAINT PK_SHIFT PRIMARY KEY (SHIFT_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 30K NEXT 30K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE SHIFTPER
 ADD CONSTRAINT PK_SHIFTPER PRIMARY KEY (SHIFT_PERIOD_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE SPIDMAP
 ADD CONSTRAINT PK_SPIDMAP PRIMARY KEY (SPID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE SUMTRSRC
 ADD CONSTRAINT PK_SUMTRSRC PRIMARY KEY (SUMTRSRC_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASK
 ADD CONSTRAINT PK_TASK PRIMARY KEY (TASK_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 2M NEXT 2M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKACTV
 ADD CONSTRAINT PK_TASKACTV PRIMARY KEY (TASK_ID,ACTV_CODE_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKDOC
 ADD CONSTRAINT PK_TASKDOC PRIMARY KEY (TASKDOC_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKFDBK
 ADD CONSTRAINT PK_TASKFDBK PRIMARY KEY (TASK_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKFIN
 ADD CONSTRAINT PK_TASKFIN PRIMARY KEY (FIN_DATES_ID,TASK_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKMEMO
 ADD CONSTRAINT PK_TASKMEMO PRIMARY KEY (MEMO_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 400K NEXT 400K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKNOTE
 ADD CONSTRAINT PK_TASKNOTE PRIMARY KEY (TASK_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 300K NEXT 300K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKPRED
 ADD CONSTRAINT PK_TASKPRED PRIMARY KEY (TASK_PRED_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKPROC
 ADD CONSTRAINT PK_TASKPROC PRIMARY KEY (PROC_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKRISK
 ADD CONSTRAINT PK_RISK_TASK PRIMARY KEY (RISK_ID,TASK_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKRSRC
 ADD CONSTRAINT PK_TASKRSRC PRIMARY KEY (TASKRSRC_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKSUM
 ADD CONSTRAINT PK_TASKSUM PRIMARY KEY (TASK_SUM_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKSUMFIN
 ADD CONSTRAINT PK_TASKSUMFIN PRIMARY KEY (TASK_SUM_FIN_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKUSER
 ADD CONSTRAINT PK_TASKUSER PRIMARY KEY (TASK_ID,USER_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TASKWKSP
 ADD CONSTRAINT PK_TASKWKSP PRIMARY KEY (WORKSPACE_ID,TASK_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE THRSPARM
 ADD CONSTRAINT PK_THRSPARM PRIMARY KEY (THRESH_PARM_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TIMESHT
 ADD CONSTRAINT PK_TIMESHT PRIMARY KEY (TS_ID,RSRC_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TMPLCATG
 ADD CONSTRAINT PK_TMPLCATG PRIMARY KEY (TMPLCATG_CATG_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TRAKVIEW
 ADD CONSTRAINT PK_TRAKVIEW PRIMARY KEY (TRACK_VIEW_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TRSRCFIN
 ADD CONSTRAINT PK_TRSRCFIN PRIMARY KEY (FIN_DATES_ID,TASKRSRC_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TRSRCSUM
 ADD CONSTRAINT PK_TRSRCSUM PRIMARY KEY (TASKRSRC_SUM_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TRSRCSUMFN
 ADD CONSTRAINT PK_TRSRCSUMFN PRIMARY KEY (TRSRC_SUM_FIN_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TSAUDIT
 ADD CONSTRAINT PK_TSAUDIT PRIMARY KEY (TS_AUDIT_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TSDATES
 ADD CONSTRAINT PK_TSDATES PRIMARY KEY (TS_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE TSDELEGATE
 ADD CONSTRAINT PK_TSDELEGATE PRIMARY KEY (TS_DELEGATE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE UACCESS
 ADD CONSTRAINT PK_UACCESS PRIMARY KEY (USER_ID,PROJ_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS 99 PCTINCREASE 50)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE UDFCODE
 ADD CONSTRAINT PK_UDFCODE PRIMARY KEY (UDF_CODE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 32K NEXT 16K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE UDFTYPE
 ADD CONSTRAINT PK_UDFTYPE PRIMARY KEY (UDF_TYPE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 32K NEXT 16K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE UDFVALUE
 ADD CONSTRAINT PK_UDFVALUE PRIMARY KEY (UDF_TYPE_ID,FK_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE UEVNTREG
 ADD CONSTRAINT PK_UEVNTREG PRIMARY KEY (USER_ID,APP_NAME,OPERATION_NAME,ACTION_NAME)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 256K NEXT 32K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:50> [INFO] [2017-09-01 13:00:50] ALTER TABLE UMEASURE
 ADD CONSTRAINT PK_UMEASURE PRIMARY KEY (UNIT_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 256K NEXT 32K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE USERCOL
 ADD CONSTRAINT PK_USERCOL PRIMARY KEY (USER_COL_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE USERDATA
 ADD CONSTRAINT PK_USERDATA PRIMARY KEY (USER_DATA_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE USERENG
 ADD CONSTRAINT PK_USERENG PRIMARY KEY (USER_ENG_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE USEROBS
 ADD CONSTRAINT PK_USEROBS PRIMARY KEY (USER_ID,OBS_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE USEROPEN
 ADD CONSTRAINT PK_USEROPEN PRIMARY KEY (USER_OPEN_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE USERS
 ADD CONSTRAINT PK_USERS PRIMARY KEY (USER_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE USERSET
 ADD CONSTRAINT PK_USERSET PRIMARY KEY (NAMESPACE,SETTING_NAME,USER_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE USERWKSP
 ADD CONSTRAINT PK_USERWKSP PRIMARY KEY (USER_ID,WORKSPACE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 256K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE USESSION
 ADD CONSTRAINT PK_USESSION PRIMARY KEY (SESSION_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE USROPNVAL
 ADD CONSTRAINT PK_USROPNVAL PRIMARY KEY (USER_OPEN_ID,PK_ID,USROPN_TYPE)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE VIEWPREF
 ADD CONSTRAINT PK_VIEWPREF PRIMARY KEY (VIEW_PREF_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE VIEWPROP
 ADD CONSTRAINT PK_VIEWPROP PRIMARY KEY (VIEW_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE VWPREFDASH
 ADD CONSTRAINT PK_VWPREFDASH PRIMARY KEY (DASHBOARD_ID,VIEW_PREF_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE VWPREFDATA
 ADD CONSTRAINT PK_VWPREFDATA PRIMARY KEY (VIEW_PREF_ID,VIEW_PREF_KEY)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE VWPREFUSER
 ADD CONSTRAINT PK_VWPREFUSER PRIMARY KEY (VIEW_PREF_ID,USER_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE WBRSCAT
 ADD CONSTRAINT PK_WBRSCAT PRIMARY KEY (WBRS_CAT_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 256K NEXT 32K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE WBSBUDG
 ADD CONSTRAINT PK_WBSBUDG PRIMARY KEY (WBS_BUDG_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE WBSMEMO
 ADD CONSTRAINT PK_WBSMEMO PRIMARY KEY (WBS_MEMO_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE WBSRSRC
 ADD CONSTRAINT PK_WBSRSRC PRIMARY KEY (WBSRSRC_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 256K NEXT 32K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE WBSRSRC_QTY
 ADD CONSTRAINT PK_WBSRSRC_QTY PRIMARY KEY (WBSRSRC_ID,WEEK_START,MONTH_START)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 256K NEXT 32K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE WBSSTEP
 ADD CONSTRAINT PK_WBSSTEP PRIMARY KEY (WBS_STEP_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE WKFLTMPL
 ADD CONSTRAINT PK_WKFLTMPL PRIMARY KEY (WKFL_TMPL_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE WKFLUSER
 ADD CONSTRAINT PK_WKFLUSER PRIMARY KEY (WORK_FLOW_ID,USER_ID,STAGE_NUM)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 256K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE WORKFLOW
 ADD CONSTRAINT PK_WORKFLOW PRIMARY KEY (WORK_FLOW_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 256K NEXT 32K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE WORKSPACE
 ADD CONSTRAINT PK_WORKSPACE PRIMARY KEY (WORKSPACE_ID)
 USING INDEX
                       TABLESPACE PMDB_NDX1
                 PCTFREE 10
                 STORAGE (INITIAL 256K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ACTVCODE
 ADD CONSTRAINT FK_ACTVCODE_ACTVTYPE FOREIGN KEY (ACTV_CODE_TYPE_ID)
 REFERENCES ACTVTYPE (ACTV_CODE_TYPE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ACTVTYPE
 ADD CONSTRAINT FK_ACTVTYPE_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE BUDGCHNG
 ADD CONSTRAINT FK_BUDGCHNG_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE BUDGCHNG
 ADD CONSTRAINT FK_BUDGCHNG_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE CALENDAR
 ADD CONSTRAINT FK_CALENDAR_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE DASHBOARD
 ADD CONSTRAINT FK_DASHBOARD_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE DASHUSER
 ADD CONSTRAINT FK_DASHUSER_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE DASHUSER
 ADD CONSTRAINT FK_DASHUSER_DASHBOARD FOREIGN KEY (DASHBOARD_ID)
 REFERENCES DASHBOARD (DASHBOARD_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE DOCREVIEW
 ADD CONSTRAINT FK_DOCREVIEW_DOCUMENT FOREIGN KEY (DOC_ID)
 REFERENCES DOCUMENT (DOC_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE DOCREVIEW
 ADD CONSTRAINT FK_DOCREVIEW_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE DOCREVIEWTASK
 ADD CONSTRAINT FK_DOCREVIEWTASK_DOCREVIEW FOREIGN KEY (DOC_REVIEW_ID)
 REFERENCES DOCREVIEW (DOC_REVIEW_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE DOCREVIEWTASK
 ADD CONSTRAINT FK_DOCREVIEWTASK_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE DOCUMENT
 ADD CONSTRAINT FK_DOCUMENT_DOCCATG FOREIGN KEY (DOC_CATG_ID)
 REFERENCES DOCCATG (DOC_CATG_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE DOCUMENT
 ADD CONSTRAINT FK_DOCUMENT_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE DOCUMENT
 ADD CONSTRAINT FK_DOCUMENT_DOCSTAT FOREIGN KEY (DOC_STATUS_ID)
 REFERENCES DOCSTAT (DOC_STATUS_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE DOCUMENT
 ADD CONSTRAINT FK_DOCUMENT_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE EXPPROJ
 ADD CONSTRAINT FK_EXPPROJ_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE EXTAPP
 ADD CONSTRAINT FK_EXTAPP_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE FACTVAL
 ADD CONSTRAINT FK_FACTVAL_FACTOR FOREIGN KEY (FACT_ID)
 REFERENCES FACTOR (FACT_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE FILTPROP
 ADD CONSTRAINT FK_FILTPROP_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE FORMPROJ
 ADD CONSTRAINT FK_FORMPROJ_FORMTMPL FOREIGN KEY (FORM_TMPL_ID)
 REFERENCES FORMTMPL (FORM_TMPL_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE FORMPROJ
 ADD CONSTRAINT FK_FORMPROJ_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE FORMTMPL
 ADD CONSTRAINT FK_FORMTMPL_FORMCATG FOREIGN KEY (FORM_CATG_ID)
 REFERENCES FORMCATG (FORM_CATG_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE GCHANGE
 ADD CONSTRAINT FK_GCHANGE_USER FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE HQDATA
 ADD CONSTRAINT FK_HQDATA_USESSION FOREIGN KEY (SESSION_ID)
 REFERENCES USESSION (SESSION_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE HQUERY
 ADD CONSTRAINT FK_HQUERY_USESSION FOREIGN KEY (SESSION_ID)
 REFERENCES USESSION (SESSION_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ISSUHIST
 ADD CONSTRAINT FK_ISSUHIST_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ISSUHIST
 ADD CONSTRAINT FK_ISSUHIST_PROJISSU FOREIGN KEY (ISSUE_ID)
 REFERENCES PROJISSU (ISSUE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ITERATION
 ADD CONSTRAINT FK_ITERATION_RELEASE FOREIGN KEY (RELEASE_ID)
 REFERENCES RELEASE (RELEASE_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ITERDAYS
 ADD CONSTRAINT FK_ITERDAYS_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ITERDAYS
 ADD CONSTRAINT FK_ITERDAYS_ITERATION FOREIGN KEY (ITERATION_ID)
 REFERENCES ITERATION (ITERATION_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ITERDAYS
 ADD CONSTRAINT FK_ITERDAYS_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ITERGOAL
 ADD CONSTRAINT FK_ITERGOAL_ITERATION FOREIGN KEY (ITERATION_ID)
 REFERENCES ITERATION (ITERATION_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ITERGOAL
 ADD CONSTRAINT FK_ITERGOAL_RFOLIO FOREIGN KEY (RFOLIO_ID)
 REFERENCES RFOLIO (RFOLIO_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE JOBLOG
 ADD CONSTRAINT FK_JOBLOG_JOBSVC FOREIGN KEY (JOB_ID)
 REFERENCES JOBSVC (JOB_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE JOBRPT
 ADD CONSTRAINT FK_JOBRPT_JOBSVC FOREIGN KEY (JOB_ID)
 REFERENCES JOBSVC (JOB_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE JOBRPT
 ADD CONSTRAINT FK_JOBRPT_RPT FOREIGN KEY (RPT_ID)
 REFERENCES RPT (RPT_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE JOBSVC
 ADD CONSTRAINT FK_JOBSVC_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE OBSPROJ
 ADD CONSTRAINT FK_OBSPROJ_OBS FOREIGN KEY (OBS_ID)
 REFERENCES OBS (OBS_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE OBSPROJ
 ADD CONSTRAINT FK_OBSPROJ_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PCATUSER
 ADD CONSTRAINT FK_PCATUSER_USER FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PCATUSER
 ADD CONSTRAINT FK_PCATUSER_PCATVAL FOREIGN KEY (PROJ_CATG_ID)
 REFERENCES PCATVAL (PROJ_CATG_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PCATVAL
 ADD CONSTRAINT FK_PCATVAL_PCATTYPE FOREIGN KEY (PROJ_CATG_TYPE_ID)
 REFERENCES PCATTYPE (PROJ_CATG_TYPE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PFOLIO
 ADD CONSTRAINT FK_PFOLIO_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PREFER
 ADD CONSTRAINT FK_PREFER_CURRTYPE FOREIGN KEY (CURR_ID)
 REFERENCES CURRTYPE (CURR_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PREFER
 ADD CONSTRAINT FK_PREFER_USERS FOREIGN KEY (TS_APPROVE_USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PREFER
 ADD CONSTRAINT FK_PREFER_RSRC FOREIGN KEY (DEFAULT_RSRC_SEC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROCITEM
 ADD CONSTRAINT FK_PROCITEM_PROCGROUP FOREIGN KEY (PROC_GROUP_ID)
 REFERENCES PROCGROUP (PROC_GROUP_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROFPRIV
 ADD CONSTRAINT FK_PROFPRIV_PROFILE FOREIGN KEY (PROF_ID)
 REFERENCES PROFILE (PROF_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJCOST
 ADD CONSTRAINT FK_PROJCOST_ACCOUNT FOREIGN KEY (ACCT_ID)
 REFERENCES ACCOUNT (ACCT_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJCOST
 ADD CONSTRAINT FK_PROJCOST_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJCOST
 ADD CONSTRAINT FK_PROJCOST_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJCOST
 ADD CONSTRAINT FK_PROJCOST_COSTTYPE FOREIGN KEY (COST_TYPE_ID)
 REFERENCES COSTTYPE (COST_TYPE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJCOST
 ADD CONSTRAINT FK_PROJCOST_POBS FOREIGN KEY (POBS_ID)
 REFERENCES POBS (POBS_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJECT
 ADD CONSTRAINT FK_PROJECT_ACCOUNT FOREIGN KEY (ACCT_ID)
 REFERENCES ACCOUNT (ACCT_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJECT
 ADD CONSTRAINT FK_PROJECT_BASETYPE FOREIGN KEY (BASE_TYPE_ID)
 REFERENCES BASETYPE (BASE_TYPE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJECT
 ADD CONSTRAINT FK_PROJECT_FINDATES FOREIGN KEY (LAST_FIN_DATES_ID)
 REFERENCES FINDATES (FIN_DATES_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJECT
 ADD CONSTRAINT FK_PROJECT_USERS FOREIGN KEY (CHECKOUT_USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJEST
 ADD CONSTRAINT FK_PROJEST_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJEST
 ADD CONSTRAINT FK_PROJEST_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJEST
 ADD CONSTRAINT FK_PROJEST_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJFUND
 ADD CONSTRAINT FK_PROJFUND_FUNDSRC FOREIGN KEY (FUND_ID)
 REFERENCES FUNDSRC (FUND_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJFUND
 ADD CONSTRAINT FK_PROJFUND_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJISSU
 ADD CONSTRAINT FK_PROJISSU_OBS FOREIGN KEY (OBS_ID)
 REFERENCES OBS (OBS_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJISSU
 ADD CONSTRAINT FK_PROJISSU_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJISSU
 ADD CONSTRAINT FK_PROJISSU_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJISSU
 ADD CONSTRAINT FK_PROJISSU_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJISSU
 ADD CONSTRAINT FK_PROJISSU_TRAKVIEW FOREIGN KEY (TRACK_VIEW_ID)
 REFERENCES TRAKVIEW (TRACK_VIEW_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJISSU
 ADD CONSTRAINT FK_PROJISSU_THRSPARM FOREIGN KEY (THRESH_PARM_ID)
 REFERENCES THRSPARM (THRESH_PARM_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJISSU
 ADD CONSTRAINT FK_PROJISSU_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJISSU
 ADD CONSTRAINT FK_PROJISSU_PROJTHRS FOREIGN KEY (THRESH_ID)
 REFERENCES PROJTHRS (THRESH_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJISSU
 ADD CONSTRAINT FK_PROJISSU_WORKSPACE FOREIGN KEY (WORKSPACE_ID)
 REFERENCES WORKSPACE (WORKSPACE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJPCAT
 ADD CONSTRAINT FK_PROJPCAT_PCATTYPE FOREIGN KEY (PROJ_CATG_TYPE_ID)
 REFERENCES PCATTYPE (PROJ_CATG_TYPE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJPCAT
 ADD CONSTRAINT FK_PROJPCAT_PCATVAL FOREIGN KEY (PROJ_CATG_ID)
 REFERENCES PCATVAL (PROJ_CATG_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJPCAT
 ADD CONSTRAINT FK_PROJPCAT_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJPROP
 ADD CONSTRAINT FK_PROJPROP_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJSHAR
 ADD CONSTRAINT FK_PROJSHAR_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJSHAR
 ADD CONSTRAINT FK_PROJSHAR_USESSION FOREIGN KEY (SESSION_ID)
 REFERENCES USESSION (SESSION_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJTHRS
 ADD CONSTRAINT FK_PROJTHRS_OBS FOREIGN KEY (OBS_ID)
 REFERENCES OBS (OBS_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJTHRS
 ADD CONSTRAINT FK_PROJTHRS_TRAKVIEW FOREIGN KEY (TRACK_VIEW_ID)
 REFERENCES TRAKVIEW (TRACK_VIEW_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJTHRS
 ADD CONSTRAINT FK_PROJTHRS_THRSPARM FOREIGN KEY (THRESH_PARM_ID)
 REFERENCES THRSPARM (THRESH_PARM_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJTHRS
 ADD CONSTRAINT FK_PROJTHRS_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJTHRS
 ADD CONSTRAINT FK_PROJTHRS_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJWBS
 ADD CONSTRAINT FK_PROJWBS_OBS FOREIGN KEY (OBS_ID)
 REFERENCES OBS (OBS_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJWBS
 ADD CONSTRAINT FK_PROJWBS_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJWBS
 ADD CONSTRAINT FK_PROJWBS_PHASE FOREIGN KEY (PHASE_ID)
 REFERENCES PHASE (PHASE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJWBS
 ADD CONSTRAINT FK_PROJWBS_RFOLIO_TEAM FOREIGN KEY (RESP_TEAM_ID)
 REFERENCES RFOLIO (RFOLIO_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJWBS
 ADD CONSTRAINT FK_PROJWBS_ITERATION FOREIGN KEY (ITERATION_ID)
 REFERENCES ITERATION (ITERATION_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJWSRPT
 ADD CONSTRAINT FK_PROJWSRPT_RPT FOREIGN KEY (RPT_ID)
 REFERENCES RPT (RPT_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PROJWSRPT
 ADD CONSTRAINT FK_PROJWSRPT_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PRPFOLIO
 ADD CONSTRAINT FK_PRPFOLIO_PFOLIO FOREIGN KEY (PFOLIO_ID)
 REFERENCES PFOLIO (PFOLIO_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE PRPFOLIO
 ADD CONSTRAINT FK_PRPFOLIO_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RCATVAL
 ADD CONSTRAINT FK_RCATVAL_RCATTYPE FOREIGN KEY (RSRC_CATG_TYPE_ID)
 REFERENCES RCATTYPE (RSRC_CATG_TYPE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RELEASE
 ADD CONSTRAINT FK_RELEASE_RFOLIO FOREIGN KEY (RFOLIO_ID)
 REFERENCES RFOLIO (RFOLIO_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RELEASE
 ADD CONSTRAINT FK_RELEASE_PROJ_ID FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RELITEMS
 ADD CONSTRAINT FK_RELITEMS_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RELITEMS
 ADD CONSTRAINT FK_RELITEMS_REITTYPE FOREIGN KEY (ITEM_TYPE_ID)
 REFERENCES REITTYPE (RELATED_ITEM_TYPE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RELITEMS
 ADD CONSTRAINT FK_RELITEMS_REITTYPE_RELATED FOREIGN KEY (RELATED_ITEM_TYPE_ID)
 REFERENCES REITTYPE (RELATED_ITEM_TYPE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RFOLIO
 ADD CONSTRAINT FK_RFOLIO_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RLFOLIO
 ADD CONSTRAINT FK_RLFOLIO_USER FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ROLELIMIT
 ADD CONSTRAINT FK_ROLELIMIT_ROLES FOREIGN KEY (ROLE_ID)
 REFERENCES ROLES (ROLE_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ROLERATE
 ADD CONSTRAINT FK_ROLERATE_ROLES FOREIGN KEY (ROLE_ID)
 REFERENCES ROLES (ROLE_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ROLES
 ADD CONSTRAINT FK_ROLES_POBS FOREIGN KEY (POBS_ID)
 REFERENCES POBS (POBS_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ROLFOLIO
 ADD CONSTRAINT FK_ROLFOLIO_RLFOLIO FOREIGN KEY (RLFOLIO_ID)
 REFERENCES RLFOLIO (RLFOLIO_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE ROLFOLIO
 ADD CONSTRAINT FK_ROLFOLIO_ROLE FOREIGN KEY (ROLE_ID)
 REFERENCES ROLES (ROLE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RPT
 ADD CONSTRAINT FK_RPT_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RPT
 ADD CONSTRAINT FK_RPT_RPTGROUP FOREIGN KEY (RPT_GROUP_ID)
 REFERENCES RPTGROUP (RPT_GROUP_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RPTBATCH
 ADD CONSTRAINT FK_RPTBATCH_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RPTLIST
 ADD CONSTRAINT FK_RPTLIST_RPT FOREIGN KEY (RPT_ID)
 REFERENCES RPT (RPT_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RPTLIST
 ADD CONSTRAINT FK_RPTLIST_RPTBATCH FOREIGN KEY (RPT_BATCH_ID)
 REFERENCES RPTBATCH (RPT_BATCH_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRC
 ADD CONSTRAINT FK_RSRC_CALENDAR FOREIGN KEY (CLNDR_ID)
 REFERENCES CALENDAR (CLNDR_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRC
 ADD CONSTRAINT FK_RSRC_CURRTYPE FOREIGN KEY (CURR_ID)
 REFERENCES CURRTYPE (CURR_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRC
 ADD CONSTRAINT FK_RSRC_SHIFT FOREIGN KEY (SHIFT_ID)
 REFERENCES SHIFT (SHIFT_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRC
 ADD CONSTRAINT FK_RSRC_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRC
 ADD CONSTRAINT FK_RSRC_ROLES FOREIGN KEY (ROLE_ID)
 REFERENCES ROLES (ROLE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRC
 ADD CONSTRAINT FK_RSRC_UMEASURE FOREIGN KEY (UNIT_ID)
 REFERENCES UMEASURE (UNIT_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRC
 ADD CONSTRAINT FK_RSRC_POBS FOREIGN KEY (POBS_ID)
 REFERENCES POBS (POBS_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRCANDASH
 ADD CONSTRAINT FK_RSRCANDASH_DASHBOARD FOREIGN KEY (DASHBOARD_ID)
 REFERENCES DASHBOARD (DASHBOARD_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRCANDASH
 ADD CONSTRAINT FK_RSRCANDASH_RSRCANVIEW FOREIGN KEY (RSRCAN_VIEW_ID)
 REFERENCES RSRCANVIEW (RSRCAN_VIEW_ID)  ON DELETE CASCADE
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRCANVIEW
 ADD CONSTRAINT FK_RSRCANVIEW_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRCHOUR
 ADD CONSTRAINT FK_RSRCHOUR_NONWORK FOREIGN KEY (NONWORK_TYPE_ID)
 REFERENCES NONWORK (NONWORK_TYPE_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRCHOUR
 ADD CONSTRAINT FK_RSRCHOUR_TASKRSRC FOREIGN KEY (TASKRSRC_ID)
 REFERENCES TASKRSRC (TASKRSRC_ID)
<09.01.2017 13:00:51> [INFO] [2017-09-01 13:00:51] ALTER TABLE RSRCHOUR
 ADD CONSTRAINT FK_RSRCHOUR_TIMESHT FOREIGN KEY (TS_ID,RSRC_ID)
 REFERENCES TIMESHT (TS_ID,RSRC_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRCHOUR
 ADD CONSTRAINT FK_RSRCHOUR_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRCPROP
 ADD CONSTRAINT FK_RSRCPROP_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRCRATE
 ADD CONSTRAINT FK_RSRCRATE_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRCRATE
 ADD CONSTRAINT FK_RSRCRATE_SHIFTPER FOREIGN KEY (SHIFT_PERIOD_ID)
 REFERENCES SHIFTPER (SHIFT_PERIOD_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRCRCAT
 ADD CONSTRAINT FK_RSRCRCAT_RCATTYPE FOREIGN KEY (RSRC_CATG_TYPE_ID)
 REFERENCES RCATTYPE (RSRC_CATG_TYPE_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRCRCAT
 ADD CONSTRAINT FK_RSRCRCAT_RCATVAL FOREIGN KEY (RSRC_CATG_ID)
 REFERENCES RCATVAL (RSRC_CATG_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRCRCAT
 ADD CONSTRAINT FK_RSRCRCAT_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRCROLE
 ADD CONSTRAINT FK_RSRCROLE_ROLES FOREIGN KEY (ROLE_ID)
 REFERENCES ROLES (ROLE_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRCROLE
 ADD CONSTRAINT FK_RSRCROLE_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRCSEC
 ADD CONSTRAINT FK_RSRCSEC_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRCSEC
 ADD CONSTRAINT FK_RSRCSEC_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRFOLIO
 ADD CONSTRAINT FK_RSRFOLIO_RFOLIO FOREIGN KEY (RFOLIO_ID)
 REFERENCES RFOLIO (RFOLIO_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE RSRFOLIO
 ADD CONSTRAINT FK_RSRFOLIO_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SCENARIO
 ADD CONSTRAINT FK_SCENARIO_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SCENARIO
 ADD CONSTRAINT FK_SCENARIO_VIEWPREF FOREIGN KEY (VIEW_PREF_ID)
 REFERENCES VIEWPREF (VIEW_PREF_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SCENPROJ
 ADD CONSTRAINT FK_SCENPROJ_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SCENPROJ
 ADD CONSTRAINT FK_SCENPROJ_SCENARIO FOREIGN KEY (SCENARIO_ID)
 REFERENCES SCENARIO (SCENARIO_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SCENROLE
 ADD CONSTRAINT FK_SCENROLE_ROLES FOREIGN KEY (ROLE_ID)
 REFERENCES ROLES (ROLE_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SCENROLE
 ADD CONSTRAINT FK_SCENROLE_SCENARIO FOREIGN KEY (SCENARIO_ID)
 REFERENCES SCENARIO (SCENARIO_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SCENUSER
 ADD CONSTRAINT FK_SCENUSER_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SCENUSER
 ADD CONSTRAINT FK_SCENUSER_SCENARIO FOREIGN KEY (SCENARIO_ID)
 REFERENCES SCENARIO (SCENARIO_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SHIFTPER
 ADD CONSTRAINT FK_SHIFTPER_SHIFT FOREIGN KEY (SHIFT_ID)
 REFERENCES SHIFT (SHIFT_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SUMPROJCOST
 ADD CONSTRAINT FK_SUMPROJCOST_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SUMPROJCOST
 ADD CONSTRAINT FK_SUMPROJCOST_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SUMPROJCOST
 ADD CONSTRAINT FK_SUMPROJCOST_COSTTYPE FOREIGN KEY (COST_TYPE_ID)
 REFERENCES COSTTYPE (COST_TYPE_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SUMTASK
 ADD CONSTRAINT FK_SUMTASK_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SUMTASK
 ADD CONSTRAINT FK_SUMTASK_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SUMTASKSPREAD
 ADD CONSTRAINT FK_SUMTASKSPREAD_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SUMTASKSPREAD
 ADD CONSTRAINT FK_SUMTASKSPREAD_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SUMTRSRC
 ADD CONSTRAINT FK_SUMTRSRC_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE SUMTRSRC
 ADD CONSTRAINT FK_SUMTRSRC_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASK
 ADD CONSTRAINT FK_TASK_CALENDAR FOREIGN KEY (CLNDR_ID)
 REFERENCES CALENDAR (CLNDR_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASK
 ADD CONSTRAINT FK_TASK_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASK
 ADD CONSTRAINT FK_TASK_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASK
 ADD CONSTRAINT FK_TASK_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKACTV
 ADD CONSTRAINT FK_TASKACTV_ACTVCODE FOREIGN KEY (ACTV_CODE_ID)
 REFERENCES ACTVCODE (ACTV_CODE_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKACTV
 ADD CONSTRAINT FK_TASKACTV_ACTVTYPE FOREIGN KEY (ACTV_CODE_TYPE_ID)
 REFERENCES ACTVTYPE (ACTV_CODE_TYPE_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKACTV
 ADD CONSTRAINT FK_TASKACTV_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKACTV
 ADD CONSTRAINT FK_TASKACTV_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKDOC
 ADD CONSTRAINT FK_TASKDOC_DOCUMENT FOREIGN KEY (DOC_ID)
 REFERENCES DOCUMENT (DOC_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKDOC
 ADD CONSTRAINT FK_TASKDOC_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKDOC
 ADD CONSTRAINT FK_TASKDOC_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKDOC
 ADD CONSTRAINT FK_TASKDOC_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKFDBK
 ADD CONSTRAINT FK_TASKFDBK_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKFDBK
 ADD CONSTRAINT FK_TASKFDBK_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKFIN
 ADD CONSTRAINT FK_TASKFIN_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKFIN
 ADD CONSTRAINT FK_TASKFIN_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKFIN
 ADD CONSTRAINT FK_TASKFIN_FINDATES FOREIGN KEY (FIN_DATES_ID)
 REFERENCES FINDATES (FIN_DATES_ID)  ON DELETE CASCADE
<09.01.2017 13:00:52> [INFO] [2017-09-01 13:00:52] ALTER TABLE TASKMEMO
 ADD CONSTRAINT FK_TASKMEMO_MEMOTYPE FOREIGN KEY (MEMO_TYPE_ID)
 REFERENCES MEMOTYPE (MEMO_TYPE_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKMEMO
 ADD CONSTRAINT FK_TASKMEMO_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKMEMO
 ADD CONSTRAINT FK_TASKMEMO_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKNOTE
 ADD CONSTRAINT FK_TASKNOTE_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKNOTE
 ADD CONSTRAINT FK_TASKNOTE_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKPRED
 ADD CONSTRAINT FK_TASKPRED_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKPRED
 ADD CONSTRAINT FK_TASKPRED_PROJECT_2 FOREIGN KEY (PRED_PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKPRED
 ADD CONSTRAINT FK_TASKPRED_TASK_2 FOREIGN KEY (PRED_TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKPRED
 ADD CONSTRAINT FK_TASKPRED_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKPROC
 ADD CONSTRAINT FK_TASKPROC_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKPROC
 ADD CONSTRAINT FK_TASKPROC_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKRISK
 ADD CONSTRAINT FK_RISK_RISKID FOREIGN KEY (RISK_ID)
 REFERENCES PROJRISK (RISK_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKRISK
 ADD CONSTRAINT FK_RISK_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKRISK
 ADD CONSTRAINT FK_TASKRISK_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKRSRC
 ADD CONSTRAINT FK_TASKRSRC_ACCOUNT FOREIGN KEY (ACCT_ID)
 REFERENCES ACCOUNT (ACCT_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKRSRC
 ADD CONSTRAINT FK_TASKRSRC_ROLES FOREIGN KEY (ROLE_ID)
 REFERENCES ROLES (ROLE_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKRSRC
 ADD CONSTRAINT FK_TASKRSRC_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKRSRC
 ADD CONSTRAINT FK_TASKRSRC_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKRSRC
 ADD CONSTRAINT FK_TASKRSRC_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKRSRC
 ADD CONSTRAINT FK_TASKRSRC_RSRCCURV FOREIGN KEY (CURV_ID)
 REFERENCES RSRCCURV (CURV_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKRSRC
 ADD CONSTRAINT FK_TASKRSRC_POBS FOREIGN KEY (POBS_ID)
 REFERENCES POBS (POBS_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKUSER
 ADD CONSTRAINT FK_TASKUSER_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKUSER
 ADD CONSTRAINT FK_TASKUSER_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKUSER
 ADD CONSTRAINT FK_TASKUSER_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKWKSP
 ADD CONSTRAINT FK_TASKWKSP_WORKSPACE FOREIGN KEY (WORKSPACE_ID)
 REFERENCES WORKSPACE (WORKSPACE_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKWKSP
 ADD CONSTRAINT FK_TASKWKSP_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TASKWKSP
 ADD CONSTRAINT FK_TASKWKSP_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TRAKVIEW
 ADD CONSTRAINT FK_TRAKVIEW_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TRSRCFIN
 ADD CONSTRAINT FK_TRSRCFIN_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TRSRCFIN
 ADD CONSTRAINT FK_TRSRCFIN_TASK FOREIGN KEY (TASK_ID)
 REFERENCES TASK (TASK_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TRSRCFIN
 ADD CONSTRAINT FK_TRSRCFIN_TASKRSRC FOREIGN KEY (TASKRSRC_ID)
 REFERENCES TASKRSRC (TASKRSRC_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TRSRCFIN
 ADD CONSTRAINT FK_TRSRCFIN_FINDATES FOREIGN KEY (FIN_DATES_ID)
 REFERENCES FINDATES (FIN_DATES_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TSDELEGATE
 ADD CONSTRAINT FK_TSDELEGATE_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TSDELEGATE
 ADD CONSTRAINT FK_TSDELEGATE_USERS2 FOREIGN KEY (TS_DELEGATE_USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE TSDELEGATE
 ADD CONSTRAINT FK_TSDELEGATE_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE UACCESS
 ADD CONSTRAINT FK_UACCESS_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE UDFCODE
 ADD CONSTRAINT FK_UDFCODE_UDFTYPE FOREIGN KEY (UDF_TYPE_ID)
 REFERENCES UDFTYPE (UDF_TYPE_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE UDFVALUE
 ADD CONSTRAINT FK_UDFVALUE_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE UDFVALUE
 ADD CONSTRAINT FK_UDFVALUE_UDFTYPE FOREIGN KEY (UDF_TYPE_ID)
 REFERENCES UDFTYPE (UDF_TYPE_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE UDFVALUE
 ADD CONSTRAINT FK_UDFVALUE_UDFCODE FOREIGN KEY (UDF_CODE_ID)
 REFERENCES UDFCODE (UDF_CODE_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE UEVNTREG
 ADD CONSTRAINT FK_UEVNTREG_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE UPKLIST
 ADD CONSTRAINT FK_UPKLIST_USESSION FOREIGN KEY (SESSION_ID)
 REFERENCES USESSION (SESSION_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USERDATA
 ADD CONSTRAINT FK_USERDATA_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USERENG
 ADD CONSTRAINT FK_USERENG_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USEROBS
 ADD CONSTRAINT FK_USEROBS_OBS FOREIGN KEY (OBS_ID)
 REFERENCES OBS (OBS_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USEROBS
 ADD CONSTRAINT FK_USEROBS_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USEROBS
 ADD CONSTRAINT FK_USEROBS_PROFILE FOREIGN KEY (PROF_ID)
 REFERENCES PROFILE (PROF_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USEROPEN
 ADD CONSTRAINT FK_USEROPEN_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USERS
 ADD CONSTRAINT FK_USERS_CURRTYPE FOREIGN KEY (CURR_ID)
 REFERENCES CURRTYPE (CURR_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USERS
 ADD CONSTRAINT FK_USERS_PROFILE FOREIGN KEY (PROF_ID)
 REFERENCES PROFILE (PROF_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USERSET
 ADD CONSTRAINT FK_USERSET_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USERWKSP
 ADD CONSTRAINT FK_USERWKSP_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USERWKSP
 ADD CONSTRAINT FK_USERWKSP_WORKSPACE FOREIGN KEY (WORKSPACE_ID)
 REFERENCES WORKSPACE (WORKSPACE_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USERWKSP
 ADD CONSTRAINT FK_USERWKSP_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USESSION
 ADD CONSTRAINT FK_USESSION_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE USROPNVAL
 ADD CONSTRAINT FK_USROPNVAL_USEROPEN FOREIGN KEY (USER_OPEN_ID)
 REFERENCES USEROPEN (USER_OPEN_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE VIEWPREF
 ADD CONSTRAINT FK_VIEWPREF_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE VIEWPROP
 ADD CONSTRAINT FK_VIEWPROP_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE VIEWPROP
 ADD CONSTRAINT FK_VIEWPROP_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE VWPREFDASH
 ADD CONSTRAINT FK_VWPREFDASH_DASHBOARD FOREIGN KEY (DASHBOARD_ID)
 REFERENCES DASHBOARD (DASHBOARD_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE VWPREFDASH
 ADD CONSTRAINT FK_VWPREFDASH_VIEWPREF FOREIGN KEY (VIEW_PREF_ID)
 REFERENCES VIEWPREF (VIEW_PREF_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE VWPREFDATA
 ADD CONSTRAINT FK_VWPREFDATA_VIEWPREF FOREIGN KEY (VIEW_PREF_ID)
 REFERENCES VIEWPREF (VIEW_PREF_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE VWPREFUSER
 ADD CONSTRAINT FK_VWPREFUSER_VIEWPREF FOREIGN KEY (VIEW_PREF_ID)
 REFERENCES VIEWPREF (VIEW_PREF_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE VWPREFUSER
 ADD CONSTRAINT FK_VWPREFUSER_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSBUDG
 ADD CONSTRAINT FK_WBSBUDG_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSBUDG
 ADD CONSTRAINT FK_WBSBUDG_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSMEMO
 ADD CONSTRAINT FK_WBSMEMO_MEMOTYPE FOREIGN KEY (MEMO_TYPE_ID)
 REFERENCES MEMOTYPE (MEMO_TYPE_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSMEMO
 ADD CONSTRAINT FK_WBSMEMO_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSMEMO
 ADD CONSTRAINT FK_WBSMEMO_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSRSRC
 ADD CONSTRAINT FK_WBSRSRC_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSRSRC
 ADD CONSTRAINT FK_WBSRSRC_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSRSRC
 ADD CONSTRAINT FK_WBSRSRC_RSRC FOREIGN KEY (RSRC_ID)
 REFERENCES RSRC (RSRC_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSRSRC
 ADD CONSTRAINT FK_WBSRSRC_ROLE FOREIGN KEY (ROLE_ID)
 REFERENCES ROLES (ROLE_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSRSRC
 ADD CONSTRAINT FK_WBSRSRC_WBRSCAT FOREIGN KEY (WBRS_CAT_ID)
 REFERENCES WBRSCAT (WBRS_CAT_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSRSRC_QTY
 ADD CONSTRAINT FK_WBSRSRC_QTY_WBSRSRC FOREIGN KEY (WBSRSRC_ID)
 REFERENCES WBSRSRC (WBSRSRC_ID)  ON DELETE CASCADE
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSRSRC_QTY
 ADD CONSTRAINT FK_WBSRSRC_QTY_FINDATES1 FOREIGN KEY (FIN_DATES_ID1)
 REFERENCES FINDATES (FIN_DATES_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSRSRC_QTY
 ADD CONSTRAINT FK_WBSRSRC_QTY_FINDATES2 FOREIGN KEY (FIN_DATES_ID2)
 REFERENCES FINDATES (FIN_DATES_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSSTEP
 ADD CONSTRAINT FK_WBSSTEP_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WBSSTEP
 ADD CONSTRAINT FK_WBSSTEP_PROJWBS FOREIGN KEY (WBS_ID)
 REFERENCES PROJWBS (WBS_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WKFLTMPL
 ADD CONSTRAINT FK_WKFLTMPL_TMPLCATG FOREIGN KEY (TMPLCATG_CATG_ID)
 REFERENCES TMPLCATG (TMPLCATG_CATG_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WKFLUSER
 ADD CONSTRAINT FK_WKFLUSER_WORKFLOW FOREIGN KEY (WORK_FLOW_ID)
 REFERENCES WORKFLOW (WORK_FLOW_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WKFLUSER
 ADD CONSTRAINT NDX_WKFLUSER_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WORKFLOW
 ADD CONSTRAINT FK_WORKFLOW_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WORKFLOW
 ADD CONSTRAINT FK_WORKFLOW_USERS FOREIGN KEY (USER_ID)
 REFERENCES USERS (USER_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WORKFLOW
 ADD CONSTRAINT FK_WORKFLOW_WORKSPACE FOREIGN KEY (WORKSPACE_ID)
 REFERENCES WORKSPACE (WORKSPACE_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE WORKSPACE
 ADD CONSTRAINT FK_WORKSPACE_PROJECT FOREIGN KEY (PROJ_ID)
 REFERENCES PROJECT (PROJ_ID)
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE CALENDAR
 ADD CONSTRAINT CK_CALENDAR_DEFAULT_FLAG CHECK (DEFAULT_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE DOCUMENT
 ADD CONSTRAINT CK_DOCUMENT_DELIV_FLAG CHECK (DELIV_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE EXPPROJ
 ADD CONSTRAINT CK_EXPPROJ_LOGIN_SUPPLIED_FLAG CHECK (LOGIN_SUPPLIED_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE EXTAPP
 ADD CONSTRAINT CK_EXTAPP_LOGIN_SUPPLY_FLAG CHECK (LOGIN_SUPPLY_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE JOBSVC
 ADD CONSTRAINT CK_JOBSVC_AUDIT_FLAG CHECK (AUDIT_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE MEMOTYPE
 ADD CONSTRAINT CK_MEMOTYPE_EPS_FLAG CHECK (EPS_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE MEMOTYPE
 ADD CONSTRAINT CK_MEMOTYPE_PROJ_FLAG CHECK (PROJ_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE MEMOTYPE
 ADD CONSTRAINT CK_MEMOTYPE_TASK_FLAG CHECK (TASK_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE MEMOTYPE
 ADD CONSTRAINT CK_MEMOTYPE_WBS_FLAG CHECK (WBS_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PFOLIO
 ADD CONSTRAINT CK_PFOLIO_CLOSED_FLAG CHECK (CLOSED_PROJ_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PFOLIO
 ADD CONSTRAINT CK_PFOLIO_WHATIF_FLAG CHECK (WHATIF_PROJ_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PREFER
 ADD CONSTRAINT CK_PREFER_COMPLETE_TASK_HRS CHECK (COMPLETE_TASK_HRS_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PREFER
 ADD CONSTRAINT CK_PREFER_DEFAULT_TIMESHEET CHECK (DEFAULT_TIMESHEET_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PREFER
 ADD CONSTRAINT CK_PREFER_EV_FIX_COST_FLAG CHECK (EV_FIX_COST_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PREFER
 ADD CONSTRAINT CK_PREFER_FUTURE_TS_HRS_FLAG CHECK (FUTURE_TS_HRS_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PREFER
 ADD CONSTRAINT CK_PREFER_NOTSTART_TASK_HRS CHECK (NOTSTART_TASK_HRS_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PREFER
 ADD CONSTRAINT CK_PREFER_POSTEND_TASK_HRS CHECK (POSTEND_TASK_HRS_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PREFER
 ADD CONSTRAINT CK_PREFER_PRESTART_TASK_HRS CHECK (PRESTART_TASK_HRS_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PREFER
 ADD CONSTRAINT CK_PREFER_TS_DAILY_FLAG CHECK (TS_DAILY_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PROFILE
 ADD CONSTRAINT CK_PROFILE_DEFAULT_FLAG CHECK (DEFAULT_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PROFILE
 ADD CONSTRAINT CK_PROFILE_SUPERUSER_FLAG CHECK (SUPERUSER_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:53> [INFO] [2017-09-01 13:00:53] ALTER TABLE PROFPRIV
 ADD CONSTRAINT CK_PROFPRIV_ALLOW_FLAG CHECK (ALLOW_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJCOST
 ADD CONSTRAINT CK_PROJCOST_AUTO_COMPUTE_ACT CHECK (AUTO_COMPUTE_ACT_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJECT
 ADD CONSTRAINT CK_PROJECT_ALLOW_COMPLETE_FLAG CHECK (ALLOW_COMPLETE_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJECT
 ADD CONSTRAINT CK_PROJECT_BATCH_SUM_FLAG CHECK (BATCH_SUM_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJECT
 ADD CONSTRAINT CK_PROJECT_CHNG_EFF_CMP_PCT CHECK (CHNG_EFF_CMP_PCT_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJECT
 ADD CONSTRAINT CK_PROJECT_PROJECT_FLAG CHECK (PROJECT_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJECT
 ADD CONSTRAINT CK_PROJ_COST_QTY_RECALC_FLAG CHECK (COST_QTY_RECALC_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJECT
 ADD CONSTRAINT CK_PROJECT_RSRC_SELF_ADD_FLAG CHECK (RSRC_SELF_ADD_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJECT
 ADD CONSTRAINT CK_PROJECT_STEP_COMPLETE_FLAG CHECK (STEP_COMPLETE_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJECT
 ADD CONSTRAINT CK_PROJECT_SUM_ONLY_FLAG CHECK (SUM_ONLY_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJECT
 ADD CONSTRAINT CK_ACT_THIS_LNK_FLAG CHECK (ACT_THIS_PER_LINK_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJECT
 ADD CONSTRAINT CK_ACT_PCT_LINK_FLAG CHECK (ACT_PCT_LINK_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJECT
 ADD CONSTRAINT CK_ADD_ACT_REMAIN_FLAG CHECK (ADD_ACT_REMAIN_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJECT
 ADD CONSTRAINT CK_PROJECT_TSK_CD_PRFX_FLAG CHECK (TASK_CODE_PREFIX_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJEST
 ADD CONSTRAINT CK_PROJEST_APPLIED_FLAG CHECK (APPLIED_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJWBS
 ADD CONSTRAINT CK_PROJWBS_PROJ_NODE_FLAG CHECK (PROJ_NODE_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE PROJWBS
 ADD CONSTRAINT CK_PROJWBS_SUM_DATA_FLAG CHECK (SUM_DATA_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE RPT
 ADD CONSTRAINT CK_RPT_GLOBAL_FLAG CHECK (GLOBAL_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE RSRC
 ADD CONSTRAINT CK_RSRC_ACTIVE_FLAG CHECK (ACTIVE_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE RSRC
 ADD CONSTRAINT CK_RSRC_AUTO_COMPUTE_ACT_FLAG CHECK (AUTO_COMPUTE_ACT_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE RSRC
 ADD CONSTRAINT CK_RSRC_OT_FLAG CHECK (OT_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE RSRC
 ADD CONSTRAINT CK_RSRC_TIMESHEET_FLAG CHECK (TIMESHEET_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE RSRC
 ADD CONSTRAINT CK_RSRC_DEF_COST_QTY_FLAG CHECK (DEF_COST_QTY_LINK_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE RSRCCURV
 ADD CONSTRAINT CK_RSRCCURV_DEFAULT_FLAG CHECK (DEFAULT_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE RSRCHOUR
 ADD CONSTRAINT CK_RSRCHOUR_TASK_TS_FLAG CHECK (TASK_TS_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE TASK
 ADD CONSTRAINT CK_TASK_AUTO_COMPUTE_ACT_FLAG CHECK (AUTO_COMPUTE_ACT_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE TASK
 ADD CONSTRAINT CK_TASK_REV_FDBK_FLAG CHECK (REV_FDBK_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE TASK
 ADD CONSTRAINT CK_TASK_LOCK_PLAN_FLAG CHECK (LOCK_PLAN_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE TASK
 ADD CONSTRAINT CK_DRIVING_PATH_FLAG CHECK (DRIVING_PATH_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE TASKDOC
 ADD CONSTRAINT CK_TASKDOC_WP_FLAG CHECK (WP_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE TASKPROC
 ADD CONSTRAINT CK_TASKPROC_COMPLETE_FLAG CHECK (COMPLETE_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE TASKRSRC
 ADD CONSTRAINT CK_TASKRSRC_COST_QTY_FLAG CHECK (COST_QTY_LINK_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE THRSPARM
 ADD CONSTRAINT CK_THRSPARM_RSRC_FLAG CHECK (RSRC_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE THRSPARM
 ADD CONSTRAINT CK_THRSPARM_TASK_FLAG CHECK (TASK_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE THRSPARM
 ADD CONSTRAINT CK_THRSPARM_WBS_FLAG CHECK (WBS_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE TIMESHT
 ADD CONSTRAINT CK_TIMESHT_DAILY_FLAG CHECK (DAILY_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE TRAKVIEW
 ADD CONSTRAINT CK_TRAKVIEW_WEB_VIEW_FLAG CHECK (WEB_VIEW_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE USERS
 ADD CONSTRAINT CK_USERS_GLOBAL_FLAG CHECK (GLOBAL_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE WBSSTEP
 ADD CONSTRAINT CK_WBSSTEP_COMPLETE_FLAG CHECK (COMPLETE_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] ALTER TABLE WORKFLOW
 ADD CONSTRAINT CK_WORKFLOW_EXISTING_PROJ_FLAG CHECK (EXISTING_PROJECT_FLAG IN ('Y', 'N'))
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON ACCOUNT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON ACTVCODE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON ACTVTYPE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON ADMIN_CONFIG TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON BASETYPE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON BGPLOG TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON BRE_REGISTRY TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON BUDGCHNG TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON CALENDAR TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON COSTTYPE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON CURRTYPE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DASHBOARD TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DASHUSER TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTACCT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTACTV TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTOBS TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTROLE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTRSRC TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTRSRL TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DLTUSER TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DOCCATG TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DOCREVIEW TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DOCREVIEWTASK TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DOCSTAT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON DOCUMENT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON EXPPROJ TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON EXTAPP TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON FACTOR TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON FACTVAL TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON FILTPROP TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON FINDATES TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON FORMCATG TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON FORMPROJ TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON FORMTMPL TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON FUNDSRC TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON GCHANGE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON HQDATA TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON HQUERY TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON ISSUHIST TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON ITERATION TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON ITERDAYS TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON ITERGOAL TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON JOBLOG TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON JOBRPT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON JOBSVC TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON LOCATION TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON MEMOTYPE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON NEXTKEY TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON NONWORK TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON NOTE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON OBS TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON OBSPROJ TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PCATTYPE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PCATUSER TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PCATVAL TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PFOLIO TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PHASE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PKXREF TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON POBS TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PREFER TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PRMAUDIT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PRMQUEUE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROCGROUP TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROCITEM TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROFILE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROFPRIV TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJCOST TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJECT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJEST TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJFUND TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJISSU TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJPCAT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJPROP TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJRISK TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJSHAR TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJTHRS TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJWBS TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PROJWSRPT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PRPFOLIO TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON PUBUSER TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT ON PUBUSER TO PUBPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON QUERYLIB TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RCATTYPE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RCATVAL TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON REFRDEL TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON REITTYPE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RELEASE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RELITEMS TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RFOLIO TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RISKCTRL TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RISKTYPE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RLFOLIO TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON ROLELIMIT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON ROLERATE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON ROLES TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON ROLFOLIO TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RPT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RPTBATCH TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RPTGROUP TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RPTLIST TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRC TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCANDASH TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCANVIEW TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCCURV TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCHOUR TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCPROP TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCRATE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCRCAT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCROLE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRCSEC TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON RSRFOLIO TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON SCENARIO TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON SCENPROJ TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON SCENROLE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON SCENUSER TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON SETTINGS TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON SHIFT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON SHIFTPER TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON SPIDMAP TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON SUMPROJCOST TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON SUMTASK TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON SUMTASKSPREAD TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON SUMTRSRC TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASK TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKACTV TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKDOC TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKFDBK TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKFIN TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKMEMO TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKNOTE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKPRED TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKPROC TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKRISK TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKRSRC TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKSUM TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKSUMFIN TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKUSER TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TASKWKSP TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TEMPKEYS TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON THRSPARM TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TIMESHT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TMPLCATG TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TPROJMAP TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TRAKVIEW TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TRSRCFIN TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TRSRCSUM TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TRSRCSUMFN TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TSAUDIT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TSDATES TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON TSDELEGATE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON UACCESS TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON UDFCODE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON UDFTYPE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON UDFVALUE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON UEVNTREG TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON UMEASURE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON UPKLIST TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON USERCOL TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON USERDATA TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON USERENG TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON USEROBS TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON USEROPEN TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON USERS TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON USERSET TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON USERWKSP TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON USESSAUD TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON USESSION TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON USROPNVAL TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON VIEWPREF TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON VIEWPROP TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON VWPREFDASH TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON VWPREFDATA TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON VWPREFUSER TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON WBRSCAT TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON WBSBUDG TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON WBSMEMO TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON WBSRSRC TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON WBSRSRC_QTY TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON WBSSTEP TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON WKFLTMPL TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON WKFLUSER TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON WORKFLOW TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] GRANT SELECT,INSERT,UPDATE,DELETE ON WORKSPACE TO PRIVPRM$PM
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] CREATE OR REPLACE VIEW PRIVPRM$PM.ACCOUNT AS SELECT * FROM ADMPRM$PM.ACCOUNT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] CREATE OR REPLACE VIEW PRIVPRM$PM.ACTVCODE AS SELECT * FROM ADMPRM$PM.ACTVCODE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] CREATE OR REPLACE VIEW PRIVPRM$PM.ACTVTYPE AS SELECT * FROM ADMPRM$PM.ACTVTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] CREATE OR REPLACE VIEW PRIVPRM$PM.ADMIN_CONFIG AS SELECT * FROM ADMPRM$PM.ADMIN_CONFIG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:54> [INFO] [2017-09-01 13:00:54] CREATE OR REPLACE VIEW PRIVPRM$PM.BASETYPE AS SELECT * FROM ADMPRM$PM.BASETYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BGPLOG FOR ADMPRM$PM.BGPLOG
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.BRE_REGISTRY AS SELECT * FROM ADMPRM$PM.BRE_REGISTRY WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.BUDGCHNG AS SELECT * FROM ADMPRM$PM.BUDGCHNG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.CALENDAR AS SELECT * FROM ADMPRM$PM.CALENDAR WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.COSTTYPE AS SELECT * FROM ADMPRM$PM.COSTTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.CURRTYPE AS SELECT * FROM ADMPRM$PM.CURRTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.DASHBOARD AS SELECT * FROM ADMPRM$PM.DASHBOARD WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.DASHUSER AS SELECT * FROM ADMPRM$PM.DASHUSER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTACCT FOR ADMPRM$PM.DLTACCT
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTACTV FOR ADMPRM$PM.DLTACTV
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTOBS FOR ADMPRM$PM.DLTOBS
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTROLE FOR ADMPRM$PM.DLTROLE
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTRSRC FOR ADMPRM$PM.DLTRSRC
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTRSRL FOR ADMPRM$PM.DLTRSRL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DLTUSER FOR ADMPRM$PM.DLTUSER
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.DOCCATG AS SELECT * FROM ADMPRM$PM.DOCCATG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.DOCREVIEW AS SELECT * FROM ADMPRM$PM.DOCREVIEW WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.DOCREVIEWTASK AS SELECT * FROM ADMPRM$PM.DOCREVIEWTASK WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.DOCSTAT AS SELECT * FROM ADMPRM$PM.DOCSTAT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.DOCUMENT AS SELECT * FROM ADMPRM$PM.DOCUMENT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.EXPPROJ AS SELECT * FROM ADMPRM$PM.EXPPROJ WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.EXTAPP AS SELECT * FROM ADMPRM$PM.EXTAPP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.FACTOR AS SELECT * FROM ADMPRM$PM.FACTOR WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.FACTVAL AS SELECT * FROM ADMPRM$PM.FACTVAL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.FILTPROP AS SELECT * FROM ADMPRM$PM.FILTPROP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.FINDATES AS SELECT * FROM ADMPRM$PM.FINDATES WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.FORMCATG AS SELECT * FROM ADMPRM$PM.FORMCATG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.FORMPROJ AS SELECT * FROM ADMPRM$PM.FORMPROJ WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.FORMTMPL AS SELECT * FROM ADMPRM$PM.FORMTMPL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.FUNDSRC AS SELECT * FROM ADMPRM$PM.FUNDSRC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.GCHANGE AS SELECT * FROM ADMPRM$PM.GCHANGE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.HQDATA FOR ADMPRM$PM.HQDATA
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.HQUERY FOR ADMPRM$PM.HQUERY
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.ISSUHIST AS SELECT * FROM ADMPRM$PM.ISSUHIST WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.ITERATION AS SELECT * FROM ADMPRM$PM.ITERATION WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.ITERDAYS AS SELECT * FROM ADMPRM$PM.ITERDAYS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.ITERGOAL AS SELECT * FROM ADMPRM$PM.ITERGOAL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.JOBLOG AS SELECT * FROM ADMPRM$PM.JOBLOG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.JOBRPT AS SELECT * FROM ADMPRM$PM.JOBRPT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.JOBSVC AS SELECT * FROM ADMPRM$PM.JOBSVC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.LOCATION AS SELECT * FROM ADMPRM$PM.LOCATION WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.MEMOTYPE AS SELECT * FROM ADMPRM$PM.MEMOTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.NEXTKEY FOR ADMPRM$PM.NEXTKEY
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.NONWORK AS SELECT * FROM ADMPRM$PM.NONWORK WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.NOTE AS SELECT * FROM ADMPRM$PM.NOTE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.OBS AS SELECT * FROM ADMPRM$PM.OBS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ FOR ADMPRM$PM.OBSPROJ
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PCATTYPE AS SELECT * FROM ADMPRM$PM.PCATTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PCATUSER AS SELECT * FROM ADMPRM$PM.PCATUSER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PCATVAL AS SELECT * FROM ADMPRM$PM.PCATVAL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PFOLIO AS SELECT * FROM ADMPRM$PM.PFOLIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PHASE AS SELECT * FROM ADMPRM$PM.PHASE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PKXREF FOR ADMPRM$PM.PKXREF
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.POBS AS SELECT * FROM ADMPRM$PM.POBS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PREFER AS SELECT * FROM ADMPRM$PM.PREFER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PRMAUDIT FOR ADMPRM$PM.PRMAUDIT
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PRMQUEUE FOR ADMPRM$PM.PRMQUEUE
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROCGROUP AS SELECT * FROM ADMPRM$PM.PROCGROUP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROCITEM AS SELECT * FROM ADMPRM$PM.PROCITEM WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROFILE AS SELECT * FROM ADMPRM$PM.PROFILE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROFPRIV AS SELECT * FROM ADMPRM$PM.PROFPRIV WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJCOST AS SELECT * FROM ADMPRM$PM.PROJCOST WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJECT AS SELECT * FROM ADMPRM$PM.PROJECT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJEST AS SELECT * FROM ADMPRM$PM.PROJEST WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJFUND AS SELECT * FROM ADMPRM$PM.PROJFUND WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJISSU AS SELECT * FROM ADMPRM$PM.PROJISSU WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJPCAT AS SELECT * FROM ADMPRM$PM.PROJPCAT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJPROP AS SELECT * FROM ADMPRM$PM.PROJPROP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJRISK AS SELECT * FROM ADMPRM$PM.PROJRISK WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJSHAR FOR ADMPRM$PM.PROJSHAR
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJTHRS AS SELECT * FROM ADMPRM$PM.PROJTHRS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJWBS AS SELECT * FROM ADMPRM$PM.PROJWBS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PROJWSRPT AS SELECT * FROM ADMPRM$PM.PROJWSRPT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.PRPFOLIO AS SELECT * FROM ADMPRM$PM.PRPFOLIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PUBUSER FOR ADMPRM$PM.PUBUSER
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PUBPRM$PM.PUBUSER FOR ADMPRM$PM.PUBUSER
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.QUERYLIB AS SELECT * FROM ADMPRM$PM.QUERYLIB WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RCATTYPE AS SELECT * FROM ADMPRM$PM.RCATTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RCATVAL AS SELECT * FROM ADMPRM$PM.RCATVAL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.REFRDEL FOR ADMPRM$PM.REFRDEL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.REITTYPE AS SELECT * FROM ADMPRM$PM.REITTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RELEASE AS SELECT * FROM ADMPRM$PM.RELEASE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RELITEMS AS SELECT * FROM ADMPRM$PM.RELITEMS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RFOLIO AS SELECT * FROM ADMPRM$PM.RFOLIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RISKCTRL AS SELECT * FROM ADMPRM$PM.RISKCTRL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RISKTYPE AS SELECT * FROM ADMPRM$PM.RISKTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RLFOLIO AS SELECT * FROM ADMPRM$PM.RLFOLIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.ROLELIMIT AS SELECT * FROM ADMPRM$PM.ROLELIMIT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.ROLERATE AS SELECT * FROM ADMPRM$PM.ROLERATE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.ROLES AS SELECT * FROM ADMPRM$PM.ROLES WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.ROLFOLIO AS SELECT * FROM ADMPRM$PM.ROLFOLIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RPT AS SELECT * FROM ADMPRM$PM.RPT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RPTBATCH AS SELECT * FROM ADMPRM$PM.RPTBATCH WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RPTGROUP AS SELECT * FROM ADMPRM$PM.RPTGROUP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RPTLIST AS SELECT * FROM ADMPRM$PM.RPTLIST WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRC AS SELECT * FROM ADMPRM$PM.RSRC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCANDASH AS SELECT * FROM ADMPRM$PM.RSRCANDASH WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCANVIEW AS SELECT * FROM ADMPRM$PM.RSRCANVIEW WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCCURV AS SELECT * FROM ADMPRM$PM.RSRCCURV WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCHOUR AS SELECT * FROM ADMPRM$PM.RSRCHOUR WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCPROP AS SELECT * FROM ADMPRM$PM.RSRCPROP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCRATE AS SELECT * FROM ADMPRM$PM.RSRCRATE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCRCAT AS SELECT * FROM ADMPRM$PM.RSRCRCAT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCROLE AS SELECT * FROM ADMPRM$PM.RSRCROLE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRCSEC AS SELECT * FROM ADMPRM$PM.RSRCSEC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.RSRFOLIO AS SELECT * FROM ADMPRM$PM.RSRFOLIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.SCENARIO AS SELECT * FROM ADMPRM$PM.SCENARIO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.SCENPROJ AS SELECT * FROM ADMPRM$PM.SCENPROJ WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.SCENROLE AS SELECT * FROM ADMPRM$PM.SCENROLE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.SCENUSER AS SELECT * FROM ADMPRM$PM.SCENUSER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.SETTINGS AS SELECT * FROM ADMPRM$PM.SETTINGS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.SHIFT AS SELECT * FROM ADMPRM$PM.SHIFT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.SHIFTPER AS SELECT * FROM ADMPRM$PM.SHIFTPER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SPIDMAP FOR ADMPRM$PM.SPIDMAP
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SUMPROJCOST FOR ADMPRM$PM.SUMPROJCOST
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SUMTASK FOR ADMPRM$PM.SUMTASK
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SUMTASKSPREAD FOR ADMPRM$PM.SUMTASKSPREAD
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SUMTRSRC FOR ADMPRM$PM.SUMTRSRC
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASK AS SELECT * FROM ADMPRM$PM.TASK WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKACTV AS SELECT * FROM ADMPRM$PM.TASKACTV WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKDOC AS SELECT * FROM ADMPRM$PM.TASKDOC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKFDBK AS SELECT * FROM ADMPRM$PM.TASKFDBK WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKFIN AS SELECT * FROM ADMPRM$PM.TASKFIN WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKMEMO AS SELECT * FROM ADMPRM$PM.TASKMEMO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKNOTE AS SELECT * FROM ADMPRM$PM.TASKNOTE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKPRED AS SELECT * FROM ADMPRM$PM.TASKPRED WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKPROC AS SELECT * FROM ADMPRM$PM.TASKPROC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKRISK AS SELECT * FROM ADMPRM$PM.TASKRISK WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKRSRC AS SELECT * FROM ADMPRM$PM.TASKRSRC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKSUM AS SELECT * FROM ADMPRM$PM.TASKSUM WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:55> [INFO] [2017-09-01 13:00:55] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKSUMFIN AS SELECT * FROM ADMPRM$PM.TASKSUMFIN WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKUSER AS SELECT * FROM ADMPRM$PM.TASKUSER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.TASKWKSP AS SELECT * FROM ADMPRM$PM.TASKWKSP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TEMPKEYS FOR ADMPRM$PM.TEMPKEYS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.THRSPARM AS SELECT * FROM ADMPRM$PM.THRSPARM WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.TIMESHT AS SELECT * FROM ADMPRM$PM.TIMESHT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.TMPLCATG AS SELECT * FROM ADMPRM$PM.TMPLCATG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TPROJMAP FOR ADMPRM$PM.TPROJMAP
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.TRAKVIEW AS SELECT * FROM ADMPRM$PM.TRAKVIEW WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.TRSRCFIN AS SELECT * FROM ADMPRM$PM.TRSRCFIN WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.TRSRCSUM AS SELECT * FROM ADMPRM$PM.TRSRCSUM WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.TRSRCSUMFN AS SELECT * FROM ADMPRM$PM.TRSRCSUMFN WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TSAUDIT FOR ADMPRM$PM.TSAUDIT
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.TSDATES AS SELECT * FROM ADMPRM$PM.TSDATES WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.TSDELEGATE AS SELECT * FROM ADMPRM$PM.TSDELEGATE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UACCESS FOR ADMPRM$PM.UACCESS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.UDFCODE AS SELECT * FROM ADMPRM$PM.UDFCODE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.UDFTYPE AS SELECT * FROM ADMPRM$PM.UDFTYPE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.UDFVALUE AS SELECT * FROM ADMPRM$PM.UDFVALUE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UEVNTREG FOR ADMPRM$PM.UEVNTREG
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.UMEASURE AS SELECT * FROM ADMPRM$PM.UMEASURE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UPKLIST FOR ADMPRM$PM.UPKLIST
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.USERCOL AS SELECT * FROM ADMPRM$PM.USERCOL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.USERDATA AS SELECT * FROM ADMPRM$PM.USERDATA WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.USERENG AS SELECT * FROM ADMPRM$PM.USERENG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.USEROBS AS SELECT * FROM ADMPRM$PM.USEROBS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.USEROPEN AS SELECT * FROM ADMPRM$PM.USEROPEN WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.USERS AS SELECT * FROM ADMPRM$PM.USERS WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.USERSET AS SELECT * FROM ADMPRM$PM.USERSET WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.USERWKSP AS SELECT * FROM ADMPRM$PM.USERWKSP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USESSAUD FOR ADMPRM$PM.USESSAUD
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.USESSION AS SELECT * FROM ADMPRM$PM.USESSION WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.USROPNVAL AS SELECT * FROM ADMPRM$PM.USROPNVAL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.VIEWPREF AS SELECT * FROM ADMPRM$PM.VIEWPREF WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.VIEWPROP AS SELECT * FROM ADMPRM$PM.VIEWPROP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.VWPREFDASH AS SELECT * FROM ADMPRM$PM.VWPREFDASH WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.VWPREFDATA AS SELECT * FROM ADMPRM$PM.VWPREFDATA WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.VWPREFUSER AS SELECT * FROM ADMPRM$PM.VWPREFUSER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.WBRSCAT AS SELECT * FROM ADMPRM$PM.WBRSCAT WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.WBSBUDG AS SELECT * FROM ADMPRM$PM.WBSBUDG WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.WBSMEMO AS SELECT * FROM ADMPRM$PM.WBSMEMO WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.WBSRSRC AS SELECT * FROM ADMPRM$PM.WBSRSRC WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.WBSRSRC_QTY AS SELECT * FROM ADMPRM$PM.WBSRSRC_QTY WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.WBSSTEP AS SELECT * FROM ADMPRM$PM.WBSSTEP WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.WKFLTMPL AS SELECT * FROM ADMPRM$PM.WKFLTMPL WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.WKFLUSER AS SELECT * FROM ADMPRM$PM.WKFLUSER WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.WORKFLOW AS SELECT * FROM ADMPRM$PM.WORKFLOW WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE VIEW PRIVPRM$PM.WORKSPACE AS SELECT * FROM ADMPRM$PM.WORKSPACE WHERE DELETE_SESSION_ID IS NULL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJRSRC_VIEW FOR ADMPRM$PM.PROJRSRC_VIEW
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJROLE_VIEW FOR ADMPRM$PM.PROJROLE_VIEW
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJRSRCROLE_VIEW FOR ADMPRM$PM.PROJRSRCROLE_VIEW
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJSHAR_BL_VIEW FOR ADMPRM$PM.PROJSHAR_BL_VIEW
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJRSRC_PS_VIEW FOR ADMPRM$PM.PROJRSRC_PS_VIEW
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJROLE_PS_VIEW FOR ADMPRM$PM.PROJROLE_PS_VIEW
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJRSRCROLE_PS_VIEW FOR ADMPRM$PM.PROJRSRCROLE_PS_VIEW
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PFLOAD_VIEW FOR ADMPRM$PM.PFLOAD_VIEW
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PFLOAD_IP_VIEW FOR ADMPRM$PM.PFLOAD_IP_VIEW
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PFLOAD_UACCESS_VIEW FOR ADMPRM$PM.PFLOAD_UACCESS_VIEW
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PFLOAD_IP_UACCESS_VIEW FOR ADMPRM$PM.PFLOAD_IP_UACCESS_VIEW
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_OBS FOR ADMPRM$PM.OPENING_OBS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_ROLE FOR ADMPRM$PM.OPENING_ROLE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_ACCOUNT FOR ADMPRM$PM.OPENING_ACCOUNT
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_USERS FOR ADMPRM$PM.OPENING_USERS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_RSRC FOR ADMPRM$PM.OPENING_RSRC
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_ACTVCODE FOR ADMPRM$PM.OPENING_ACTVCODE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPENING_RSRCROLE FOR ADMPRM$PM.OPENING_RSRCROLE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_WEEK FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_WEEK
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_MONTH FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_MONTH
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_QTR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_QTR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_YEAR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJ_BY_YEAR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_WEEK FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_WEEK
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_MONTH FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_MONTH
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_QTR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_QTR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_YEAR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_RSRC_BY_YEAR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_WEEK FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_WEEK
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_MONTH FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_MONTH
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_QTR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_QTR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_YEAR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_ROLE_BY_YEAR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_WEEK FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_WEEK
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_MON FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_MON
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_QTR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_QTR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_YEAR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJRSRC_YEAR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_WEEK FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_WEEK
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_MON FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_MON
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_QTR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_QTR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_YEAR FOR ADMPRM$PM.WBSRSRC_ASSGN_BY_PROJROLE_YEAR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_MON FOR ADMPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_MON
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_QTR FOR ADMPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_QTR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_WEEK FOR ADMPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_WEEK
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_YEAR FOR ADMPRM$PM.WBSRSRC_ASSGN_SUMMARY_BY_YEAR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSN_BY_PROJ_BY_FP FOR ADMPRM$PM.WBSRSRC_ASSN_BY_PROJ_BY_FP
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSN_BY_PROJROLE_BY_FP FOR ADMPRM$PM.WBSRSRC_ASSN_BY_PROJROLE_BY_FP
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSN_BY_PROJRSRC_BY_FP FOR ADMPRM$PM.WBSRSRC_ASSN_BY_PROJRSRC_BY_FP
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_ASSN_SUMMARY_BY_FP FOR ADMPRM$PM.WBSRSRC_ASSN_SUMMARY_BY_FP
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UTILS FOR ADMPRM$PM.UTILS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_READ_STRING FOR ADMPRM$PM.SETTINGS_READ_STRING
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_READ_NUMBER FOR ADMPRM$PM.SETTINGS_READ_NUMBER
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_READ_BOOL FOR ADMPRM$PM.SETTINGS_READ_BOOL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_READ_DATE FOR ADMPRM$PM.SETTINGS_READ_DATE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_WRITE_STRING FOR ADMPRM$PM.SETTINGS_WRITE_STRING
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_WRITE_NUMBER FOR ADMPRM$PM.SETTINGS_WRITE_NUMBER
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_WRITE_BOOL FOR ADMPRM$PM.SETTINGS_WRITE_BOOL
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SETTINGS_WRITE_DATE FOR ADMPRM$PM.SETTINGS_WRITE_DATE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BGP_WRITE_TO_LOG FOR ADMPRM$PM.BGP_WRITE_TO_LOG
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CURRENT_SESSION FOR ADMPRM$PM.CURRENT_SESSION
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GET_INTERVAL_DIFFERENCE FOR ADMPRM$PM.GET_INTERVAL_DIFFERENCE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.APPLY_ACTUALS_TASK FOR ADMPRM$PM.APPLY_ACTUALS_TASK
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.APPLY_ACTUALS_TASKRSRC FOR ADMPRM$PM.APPLY_ACTUALS_TASKRSRC
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.APPLY_ESTIMATE_TASK FOR ADMPRM$PM.APPLY_ESTIMATE_TASK
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.APPLY_ESTIMATE_TASKRSRC FOR ADMPRM$PM.APPLY_ESTIMATE_TASKRSRC
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJSHAR_INSERT_REC FOR ADMPRM$PM.PROJSHAR_INSERT_REC
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJSHAR_INSERT FOR ADMPRM$PM.PROJSHAR_INSERT
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJSHAR_INSERT_UPD FOR ADMPRM$PM.PROJSHAR_INSERT_UPD
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.POPULATE_UACCESS FOR ADMPRM$PM.POPULATE_UACCESS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UACCESS_MAINTAIN_FOR_USER FOR ADMPRM$PM.UACCESS_MAINTAIN_FOR_USER
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UPDATE_TASKACTV FOR ADMPRM$PM.UPDATE_TASKACTV
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GETNEXTKEYS FOR ADMPRM$PM.GETNEXTKEYS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BRE_ADD FOR ADMPRM$PM.BRE_ADD
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BRE_CHECKCHANGE FOR ADMPRM$PM.BRE_CHECKCHANGE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BRE_REMOVE FOR ADMPRM$PM.BRE_REMOVE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BRE_KEEPALIVE FOR ADMPRM$PM.BRE_KEEPALIVE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BRE_PING FOR ADMPRM$PM.BRE_PING
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.COUNT_RSRC_LVLS FOR ADMPRM$PM.COUNT_RSRC_LVLS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GET_RSRC_ASSOC_TYPES FOR ADMPRM$PM.GET_RSRC_ASSOC_TYPES
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GUID FOR ADMPRM$PM.GUID
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.COPY_UTILS FOR ADMPRM$PM.COPY_UTILS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TASK_COPY_PKG FOR ADMPRM$PM.TASK_COPY_PKG
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJECT_COPY_PKG FOR ADMPRM$PM.PROJECT_COPY_PKG
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.MULTI_PROJECT_COPY FOR ADMPRM$PM.MULTI_PROJECT_COPY
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJECT_COPY FOR ADMPRM$PM.PROJECT_COPY
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TIME_APPROVAL_WBS FOR ADMPRM$PM.TIME_APPROVAL_WBS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PV_WBS_ROOT_PROC_CAND FOR ADMPRM$PM.PV_WBS_ROOT_PROC_CAND
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PV_WBS_ROOT_NODES FOR ADMPRM$PM.PV_WBS_ROOT_NODES
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBS_TREE_HAS_RSRC_ASSGN FOR ADMPRM$PM.WBS_TREE_HAS_RSRC_ASSGN
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBS_TREE_HAS_ROLE_ASSGN FOR ADMPRM$PM.WBS_TREE_HAS_ROLE_ASSGN
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DB_TO_IANA_CHARSET FOR ADMPRM$PM.DB_TO_IANA_CHARSET
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BLOB_INTERFACE FOR ADMPRM$PM.BLOB_INTERFACE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GS_SAVE_BLOB FOR ADMPRM$PM.GS_SAVE_BLOB
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GS_GET_BLOB FOR ADMPRM$PM.GS_GET_BLOB
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GS_GET_BLOB_NEXT FOR ADMPRM$PM.GS_GET_BLOB_NEXT
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GET_SAFETY_DATE FOR ADMPRM$PM.GET_SAFETY_DATE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.POPULATE_DELAYED_LOADING FOR ADMPRM$PM.POPULATE_DELAYED_LOADING
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GLOBAL_TABLE_CHANGE FOR ADMPRM$PM.GLOBAL_TABLE_CHANGE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OPEN_TABLE_CHANGE FOR ADMPRM$PM.OPEN_TABLE_CHANGE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CHECK_LAST_SUMM FOR ADMPRM$PM.CHECK_LAST_SUMM
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.REFRDEL_CLEANUP FOR ADMPRM$PM.REFRDEL_CLEANUP
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PRM_AUDIT FOR ADMPRM$PM.PRM_AUDIT
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.AUDIT_IDENTITY FOR ADMPRM$PM.AUDIT_IDENTITY
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.INTERNAL_AUDITING_SETTING FOR ADMPRM$PM.INTERNAL_AUDITING_SETTING
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.AUDITING_ENABLE FOR ADMPRM$PM.AUDITING_ENABLE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.AUDITING_DISABLE FOR ADMPRM$PM.AUDITING_DISABLE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CLEANUP_USESSAUD FOR ADMPRM$PM.CLEANUP_USESSAUD
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USESSAUD_ENABLE FOR ADMPRM$PM.USESSAUD_ENABLE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USESSAUD_DISABLE FOR ADMPRM$PM.USESSAUD_DISABLE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.HAS_RSRC_ACCESS FOR ADMPRM$PM.HAS_RSRC_ACCESS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.UPDATE_RSRC_SECURITY FOR ADMPRM$PM.UPDATE_RSRC_SECURITY
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.GET_PRIMARY_KEY FOR ADMPRM$PM.GET_PRIMARY_KEY
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CASCADE_DELETE_CHILD FOR ADMPRM$PM.CASCADE_DELETE_CHILD
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CASCADE_DELETE FOR ADMPRM$PM.CASCADE_DELETE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CLEANUP_LOGICAL_DELETES FOR ADMPRM$PM.CLEANUP_LOGICAL_DELETES
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.HQUERY_PROCESS_REC FOR ADMPRM$PM.HQUERY_PROCESS_REC
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.HQUERY_POPULATE FOR ADMPRM$PM.HQUERY_POPULATE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CHECK_SYS_PRIVS FOR ADMPRM$PM.CHECK_SYS_PRIVS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.HAS_TIMESHEETS FOR ADMPRM$PM.HAS_TIMESHEETS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SYNC_UDFTYPE FOR ADMPRM$PM.SYNC_UDFTYPE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USESSION_CLEANUP FOR ADMPRM$PM.USESSION_CLEANUP
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USESSION_CLEAR_LOGICAL_DELETES FOR ADMPRM$PM.USESSION_CLEAR_LOGICAL_DELETES
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USESSION_CLEANUP_EXPIRED FOR ADMPRM$PM.USESSION_CLEANUP_EXPIRED
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.USER_DEFINED_BACKGROUND FOR ADMPRM$PM.USER_DEFINED_BACKGROUND
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CLEANUP_OLD_DATA FOR ADMPRM$PM.CLEANUP_OLD_DATA
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.BGPLOG_CLEANUP FOR ADMPRM$PM.BGPLOG_CLEANUP
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJECT_COPY_LIST FOR ADMPRM$PM.PROJECT_COPY_LIST
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.ADD_DATABASE_JOB FOR ADMPRM$PM.ADD_DATABASE_JOB
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DELETE_PROJECT_CODE_SCENARIOS FOR ADMPRM$PM.DELETE_PROJECT_CODE_SCENARIOS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DROP_BACKGROUND_PROCS FOR ADMPRM$PM.DROP_BACKGROUND_PROCS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PRMAUDIT_CLEANUP FOR ADMPRM$PM.PRMAUDIT_CLEANUP
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PV_LOGIN FOR ADMPRM$PM.PV_LOGIN
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SQL_TRACE_USER_ENABLE FOR ADMPRM$PM.SQL_TRACE_USER_ENABLE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SQL_TRACE_USER_DISABLE FOR ADMPRM$PM.SQL_TRACE_USER_DISABLE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SQL_TRACE_START FOR ADMPRM$PM.SQL_TRACE_START
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SQL_TRACE_END FOR ADMPRM$PM.SQL_TRACE_END
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PRIMAVERA_EVENT FOR ADMPRM$PM.PRIMAVERA_EVENT
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJECT_COPY_BASELINE FOR ADMPRM$PM.PROJECT_COPY_BASELINE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJECT_DELETE_WBS FOR ADMPRM$PM.PROJECT_DELETE_WBS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PROJECT_DELETE FOR ADMPRM$PM.PROJECT_DELETE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.REPLACE_REFLECTION_PROJECT FOR ADMPRM$PM.REPLACE_REFLECTION_PROJECT
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ_UPDATE_PROCESS_KEYS FOR ADMPRM$PM.OBSPROJ_UPDATE_PROCESS_KEYS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ_UPDATE_EPS FOR ADMPRM$PM.OBSPROJ_UPDATE_EPS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ_UPDATE_PROJECT FOR ADMPRM$PM.OBSPROJ_UPDATE_PROJECT
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ_UPDATE FOR ADMPRM$PM.OBSPROJ_UPDATE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ_FULL_REBUILD FOR ADMPRM$PM.OBSPROJ_FULL_REBUILD
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PRMQUEUE_ADD FOR ADMPRM$PM.PRMQUEUE_ADD
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBSPROJ_PROCESS_QUEUE FOR ADMPRM$PM.OBSPROJ_PROCESS_QUEUE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CLEANUP_PRMQUEUE FOR ADMPRM$PM.CLEANUP_PRMQUEUE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.WBSRSRC_VALIDATE FOR ADMPRM$PM.WBSRSRC_VALIDATE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SYSTEM_MONITOR FOR ADMPRM$PM.SYSTEM_MONITOR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.DATA_MONITOR FOR ADMPRM$PM.DATA_MONITOR
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CHECK_BACKGROUND_JOBS FOR ADMPRM$PM.CHECK_BACKGROUND_JOBS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TA_GATHER_TIMESHEETS FOR ADMPRM$PM.TA_GATHER_TIMESHEETS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.TS_AUDIT FOR ADMPRM$PM.TS_AUDIT
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.PV_OPEN_PROJECT FOR ADMPRM$PM.PV_OPEN_PROJECT
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SOURCE_VERSION FOR ADMPRM$PM.SOURCE_VERSION
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.ACTIVITY_COPY_API FOR ADMPRM$PM.ACTIVITY_COPY_API
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.SYNC_BASELINE_TASKS FOR ADMPRM$PM.SYNC_BASELINE_TASKS
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.OBS_MERGE_DELETE FOR ADMPRM$PM.OBS_MERGE_DELETE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CREATE_PROJECT_TEMPLATE FOR ADMPRM$PM.CREATE_PROJECT_TEMPLATE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE OR REPLACE SYNONYM PRIVPRM$PM.CREATE_PROJECT_FROM_TEMPLATE FOR ADMPRM$PM.CREATE_PROJECT_FROM_TEMPLATE
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ACCOUNT_PARENT_ACCT
 ON ACCOUNT (PARENT_ACCT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ACCOUNT_DSI
 ON ACCOUNT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ACCOUNT_UPD
 ON ACCOUNT (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ACTVCODE_1
 ON ACTVCODE (ACTV_CODE_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ACTVCODE_PARENT_ACTV
 ON ACTVCODE (PARENT_ACTV_CODE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 400K NEXT 400K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ACTVCODE_UPDATE_DATE1
 ON ACTVCODE (UPDATE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 400K NEXT 400K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ACTVCODE_DSI
 ON ACTVCODE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 400K NEXT 400K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ACTVCODE_UPD
 ON ACTVCODE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ACTVTYPE_1
 ON ACTVTYPE (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ACTVTYPE_DSI
 ON ACTVTYPE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ACTVTYPE_UPD
 ON ACTVTYPE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ADMIN_CONFIG_DSI
 ON ADMIN_CONFIG (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_ADMIN_CONFIG_UPD
 ON ADMIN_CONFIG (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_BASETYPE_DSI
 ON BASETYPE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_BASETYPE_UPD
 ON BASETYPE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_BGPLOG
 ON BGPLOG (LOG_TIME)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_BRE_REGISTRY_DSI
 ON BRE_REGISTRY (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_BUDGCHNG_1
 ON BUDGCHNG (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_BUDGCHNG_2
 ON BUDGCHNG (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_BUDGCHNG_DSI
 ON BUDGCHNG (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_CALENDAR_1
 ON CALENDAR (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_CALENDAR_DSI
 ON CALENDAR (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:56> [INFO] [2017-09-01 13:00:56] CREATE INDEX NDX_CALENDAR_UPD
 ON CALENDAR (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_COSTTYPE_DSI
 ON COSTTYPE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_COSTTYPE_UPD
 ON COSTTYPE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE UNIQUE INDEX NDX_CURR_SHORT_NAME
 ON CURRTYPE (CURR_SHORT_NAME)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_CURRTYPE_DSI
 ON CURRTYPE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_CURRTYPE_UPD
 ON CURRTYPE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DASHBOARD_1
 ON DASHBOARD (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DASHBOARD_DSI
 ON DASHBOARD (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DASHBOARD_UPD
 ON DASHBOARD (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DASHUSER_1
 ON DASHUSER (USER_ID,DASHBOARD_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DASHUSER_DSI
 ON DASHUSER (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DASHUSER_UPD
 ON DASHUSER (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCCATG_DSI
 ON DOCCATG (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCCATG_UPD
 ON DOCCATG (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCREVIEW_DOCUMENT
 ON DOCREVIEW (DOC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCREVIEW_USERS
 ON DOCREVIEW (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCREVIEWTASK_DOCREVIEW
 ON DOCREVIEWTASK (DOC_REVIEW_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCREVIEWTASK_USERS
 ON DOCREVIEWTASK (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCSTAT_DSI
 ON DOCSTAT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCSTAT_UPD
 ON DOCSTAT (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCUMENT_1
 ON DOCUMENT (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCUMENT_DOCCATG
 ON DOCUMENT (DOC_CATG_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCUMENT_DOCSTAT
 ON DOCUMENT (DOC_STATUS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCUMENT_PARENT_DOC
 ON DOCUMENT (PARENT_DOC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCUMENT_DSI
 ON DOCUMENT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCUMENT_RSRC
 ON DOCUMENT (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_DOCUMENT_CR_EXTERNAL_KEY
 ON DOCUMENT (CR_EXTERNAL_DOC_KEY)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_EXPPROJ_DSI
 ON EXPPROJ (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_EXPPROJ_UPD
 ON EXPPROJ (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_EXTAPP_1
 ON EXTAPP (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_EXTAPP_DSI
 ON EXTAPP (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_EXTAPP_UPD
 ON EXTAPP (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FACTOR_DSI
 ON FACTOR (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FACTOR_UPD
 ON FACTOR (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FACTVAL_FACTOR
 ON FACTVAL (FACT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FACTVAL_DSI
 ON FACTVAL (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FACTVAL_UPD
 ON FACTVAL (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FILTPROP_1
 ON FILTPROP (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FILTPROP_DSI
 ON FILTPROP (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FILTPROP_UPD
 ON FILTPROP (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FINDATES_DSI
 ON FINDATES (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FINDATES_UPD
 ON FINDATES (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FINDATES_1
 ON FINDATES (START_DATE,END_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FORMCATG_DSI
 ON FORMCATG (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FORMPROJ_FORMTMPL
 ON FORMPROJ (FORM_TMPL_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FORMPROJ_PROJECT
 ON FORMPROJ (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FORMPROJ_DSI
 ON FORMPROJ (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FORMTMPL_FORMCATG
 ON FORMTMPL (FORM_CATG_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FORMTMPL_DSI
 ON FORMTMPL (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FUNDSRC_PARENT_FUND
 ON FUNDSRC (PARENT_FUND_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 1000K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FUNDSRC_DSI
 ON FUNDSRC (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_FUNDSRC_UPD
 ON FUNDSRC (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_GCHANGE_USER
 ON GCHANGE (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_GCHANGE_DSI
 ON GCHANGE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_GCHANGE_UPD
 ON GCHANGE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_ISSUHIST_1
 ON ISSUHIST (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_ISSUHIST_DSI
 ON ISSUHIST (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_ITERATION_RELEASE
 ON ITERATION (RELEASE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 64K NEXT 64K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_ITERATION_DSI
 ON ITERATION (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_ITERDAYS_PROJECT
 ON ITERDAYS (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_ITERDAYS_ITERATION
 ON ITERDAYS (ITERATION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_ITERDAYS_TASK
 ON ITERDAYS (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_ITERDAYS_DSI
 ON ITERDAYS (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_ITERGOAL_ITERATION
 ON ITERGOAL (ITERATION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_ITERGOAL_RFOLIO
 ON ITERGOAL (RFOLIO_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_ITERGOAL_DSI
 ON ITERGOAL (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_JOBLOG_DSI
 ON JOBLOG (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_JOBLOG_UPD
 ON JOBLOG (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE UNIQUE INDEX NDX_JOBRPT_JOBSVC
 ON JOBRPT (JOB_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_JOBRPT_RPT
 ON JOBRPT (RPT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_JOBRPT_DSI
 ON JOBRPT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_JOBRPT_UPD
 ON JOBRPT (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_JOBSVC_USERS
 ON JOBSVC (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_JOBSVC_DSI
 ON JOBSVC (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_JOBSVC_UPD
 ON JOBSVC (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_MEMOTYPE_DSI
 ON MEMOTYPE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_MEMOTYPE_UPD
 ON MEMOTYPE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_NONWORK_DSI
 ON NONWORK (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_NONWORK_UPD
 ON NONWORK (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_NOTE_DSI
 ON NOTE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_NOTE_UPD
 ON NOTE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_OBS_PARENT_OBS
 ON OBS (PARENT_OBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_OBS_DSI
 ON OBS (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_OBS_UPD
 ON OBS (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_OBSPROJ_PROJECT
 ON OBSPROJ (PROJ_ID,OBS_ID,WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_OBSPROJ_WBS
 ON OBSPROJ (WBS_ID,PROJ_ID,OBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PCATTYPE_DSI
 ON PCATTYPE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PCATTYPE_UPD
 ON PCATTYPE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PCATUSER_USER
 ON PCATUSER (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PCATUSER_DSI
 ON PCATUSER (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PCATUSER_UPD
 ON PCATUSER (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PCATVAL_PCATTYPE
 ON PCATVAL (PROJ_CATG_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PCATVAL_PARENT_CATG
 ON PCATVAL (PARENT_PROJ_CATG_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PCATVAL_DSI
 ON PCATVAL (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PCATVAL_UPD
 ON PCATVAL (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PFOLIO_1
 ON PFOLIO (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PFOLIO_DSI
 ON PFOLIO (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PFOLIO_UPD
 ON PFOLIO (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:57> [INFO] [2017-09-01 13:00:57] CREATE INDEX NDX_PHASE_DSI
 ON PHASE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PHASE_UPD
 ON PHASE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PKXREF_1
 ON PKXREF (SYSTEM_ID,CONTEXT_NAME,PK1,PK2)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PKXREF_2
 ON PKXREF (SYSTEM_ID,CONTEXT_NAME,OLD_PK1,OLD_PK2)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_POBS_PARENT_ID
 ON POBS (POBS_PARENT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_POBS_DSI
 ON POBS (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_POBS_UPD
 ON POBS (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PREFER_USERS
 ON PREFER (TS_APPROVE_USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 32K NEXT 32K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PREFER_USERS2
 ON PREFER (PROJINIT_ADMIN_USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 32K NEXT 32K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PREFER_RSRC
 ON PREFER (DEFAULT_RSRC_SEC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 32K NEXT 32K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PREFER_DSI
 ON PREFER (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PREFER_UPD
 ON PREFER (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PRMAUDIT_AUDIT_DATE
 ON PRMAUDIT (AUDIT_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PRMQUEUE_LOOKUP
 ON PRMQUEUE (QUEUE_NAME,MSG_TYPE,MSG_SUB_TYPE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROCGROUP_DSI
 ON PROCGROUP (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROCGROUP_UPD
 ON PROCGROUP (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROCITEM
 ON PROCITEM (PROC_GROUP_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 64K NEXT 64K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROCITEM_DSI
 ON PROCITEM (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROCITEM_UPD
 ON PROCITEM (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROFILE_DSI
 ON PROFILE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROFILE_UPD
 ON PROFILE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROFPRIV_DSI
 ON PROFPRIV (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROFPRIV_UPD
 ON PROFPRIV (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJCOST_1
 ON PROJCOST (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJCOST_ACCOUNT
 ON PROJCOST (ACCT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJCOST_COSTTYPE
 ON PROJCOST (COST_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJCOST_TASK
 ON PROJCOST (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJCOST_POBS
 ON PROJCOST (POBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJCOST_UPDATE_DATE1
 ON PROJCOST (UPDATE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJCOST_DSI
 ON PROJCOST (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJECT_ACCOUNT
 ON PROJECT (ACCT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJECT_BASETYPE
 ON PROJECT (BASE_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJECT_ORIG_PROJ_ID
 ON PROJECT (ORIG_PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJECT_CHECKOUT_USER_ID
 ON PROJECT (CHECKOUT_USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJECT_UPDATE_DATE1
 ON PROJECT (UPDATE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJECT_SOURCE_PROJ_ID
 ON PROJECT (SOURCE_PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJECT_CALENDAR
 ON PROJECT (CLNDR_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJECT_LAST_FIN_DATES
 ON PROJECT (LAST_FIN_DATES_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJECT_MATRIX
 ON PROJECT (MATRIX_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJECT_DSI
 ON PROJECT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJECT_UPD
 ON PROJECT (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJEST_1
 ON PROJEST (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJEST_PROJWBS
 ON PROJEST (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJEST_RSRC
 ON PROJEST (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJEST_DSI
 ON PROJEST (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJFUND_1
 ON PROJFUND (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJFUND_FUNDSRC
 ON PROJFUND (FUND_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJFUND_DSI
 ON PROJFUND (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJISSU_1
 ON PROJISSU (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJISSU_OBS
 ON PROJISSU (OBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJISSU_PROJTHRS
 ON PROJISSU (THRESH_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJISSU_PROJWBS
 ON PROJISSU (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJISSU_RSRC
 ON PROJISSU (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJISSU_TASK
 ON PROJISSU (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJISSU_THRSPARM
 ON PROJISSU (THRESH_PARM_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJISSU_TRAKVIEW
 ON PROJISSU (TRACK_VIEW_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJISSU_WORKSPACE
 ON PROJISSU (WORKSPACE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJISSU_DSI
 ON PROJISSU (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJPCAT_PCATTYPE
 ON PROJPCAT (PROJ_CATG_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJPCAT_PCATVAL
 ON PROJPCAT (PROJ_CATG_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJPCAT_UPDATE_DATE1
 ON PROJPCAT (UPDATE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJPCAT_DSI
 ON PROJPCAT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJPCAT_UPD
 ON PROJPCAT (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJPROP_DSI
 ON PROJPROP (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJRISK_1
 ON PROJRISK (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJRISK_RISKTYPE
 ON PROJRISK (RISK_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJRISK_RSRC
 ON PROJRISK (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJRISK_DSI
 ON PROJRISK (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJSHAR_USESSION
 ON PROJSHAR (SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJTHRS_1
 ON PROJTHRS (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJTHRS_OBS
 ON PROJTHRS (OBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJTHRS_PROJWBS
 ON PROJTHRS (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJTHRS_THRSPARM
 ON PROJTHRS (THRESH_PARM_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJTHRS_TRAKVIEW
 ON PROJTHRS (TRACK_VIEW_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJTHRS_DSI
 ON PROJTHRS (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWBS_1
 ON PROJWBS (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWBS_OBS
 ON PROJWBS (OBS_ID,PROJ_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWBS_PARENT_WBS_ID
 ON PROJWBS (PARENT_WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS 99 PCTINCREASE 50)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWBS_PHASE
 ON PROJWBS (PHASE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWBS_UPDATE_DATE1
 ON PROJWBS (UPDATE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWBS_RFOLIO_TEAM
 ON PROJWBS (RESP_TEAM_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWBS_ITERATION
 ON PROJWBS (ITERATION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWBS_PERF1
 ON PROJWBS (PROJ_NODE_FLAG,PROJ_ID,WBS_ID,PARENT_WBS_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWBS_PERF2
 ON PROJWBS (PROJ_NODE_FLAG,OBS_ID,WBS_ID,PROJ_ID,PARENT_WBS_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWBS_DSI
 ON PROJWBS (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWBS_UPD
 ON PROJWBS (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWSRPT_DSI
 ON PROJWSRPT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWSRPT_RPT
 ON PROJWSRPT (RPT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PROJWSRPT_PROJECT
 ON PROJWSRPT (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PRPFOLIO_PROJWBS
 ON PRPFOLIO (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PRPFOLIO_DSI
 ON PRPFOLIO (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_PRPFOLIO_UPD
 ON PRPFOLIO (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_QUERYLIB_DSI
 ON QUERYLIB (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RCATTYPE_DSI
 ON RCATTYPE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RCATTYPE_UPD
 ON RCATTYPE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RCATVAL_RCATTYPE
 ON RCATVAL (RSRC_CATG_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RCATVAL_PARENT_CATG
 ON RCATVAL (PARENT_RSRC_CATG_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RCATVAL_DSI
 ON RCATVAL (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RCATVAL_UPD
 ON RCATVAL (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_REFRDEL_DELETE_DATE
 ON REFRDEL (DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_REFRDEL_TABLE_PK
 ON REFRDEL (TABLE_NAME,PK1,PK2)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_REITTYPE_DSI
 ON REITTYPE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RELEASE_RFOLIO
 ON RELEASE (RFOLIO_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 0
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RELEASE_PROJECT
 ON RELEASE (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 0
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RELEASE_DSI
 ON RELEASE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RELITEMS_PROJECT
 ON RELITEMS (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 0
     STORAGE (INITIAL 256K NEXT 128K MINEXTENTS 1 MAXEXTENTS 99 PCTINCREASE 50)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RELITEMS_RELATED
 ON RELITEMS (RELATED_ITEM_TYPE_ID,RELATED_FK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 0
     STORAGE (INITIAL 512K NEXT 256K MINEXTENTS 1 MAXEXTENTS 99 PCTINCREASE 50)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RELITEMS_DSI
 ON RELITEMS (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RFOLIO_USER
 ON RFOLIO (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RFOLIO_DSI
 ON RFOLIO (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RFOLIO_UPD
 ON RFOLIO (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RISKCTRL_1
 ON RISKCTRL (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RISKCTRL_DSI
 ON RISKCTRL (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RISKTYPE_DSI
 ON RISKTYPE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RISKTYPE_UPD
 ON RISKTYPE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RLFOLIO_USER
 ON RLFOLIO (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RLFOLIO_DSI
 ON RLFOLIO (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RLFOLIO_UPD
 ON RLFOLIO (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLELIMIT_ROLES
 ON ROLELIMIT (ROLE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLELIMIT_DSI
 ON ROLELIMIT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLELIMIT_UPD
 ON ROLELIMIT (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLERATE_RSRC
 ON ROLERATE (ROLE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLERATE_DSI
 ON ROLERATE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLERATE_UPD
 ON ROLERATE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLES_PARENT_ROLE
 ON ROLES (PARENT_ROLE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLES_POBS
 ON ROLES (POBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLES_UPDATE_DATE1
 ON ROLES (UPDATE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLES_DSI
 ON ROLES (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLES_UPD
 ON ROLES (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLFOLIO_ROLE
 ON ROLFOLIO (ROLE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLFOLIO_DSI
 ON ROLFOLIO (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_ROLFOLIO_UPD
 ON ROLFOLIO (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPT_1
 ON RPT (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPT_RPTGROUP
 ON RPT (RPT_GROUP_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPT_DSI
 ON RPT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPT_UPD
 ON RPT (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPTBATCH_1
 ON RPTBATCH (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPTBATCH_DSI
 ON RPTBATCH (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPTBATCH_UPD
 ON RPTBATCH (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPTGROUP_PARENT_GROUP
 ON RPTGROUP (PARENT_GROUP_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPTGROUP_DSI
 ON RPTGROUP (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPTGROUP_UPD
 ON RPTGROUP (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPTLIST_RPT
 ON RPTLIST (RPT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPTLIST_DSI
 ON RPTLIST (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RPTLIST_UPD
 ON RPTLIST (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRC_CALENDAR
 ON RSRC (CLNDR_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRC_ROLES
 ON RSRC (ROLE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRC_SHIFT
 ON RSRC (SHIFT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRC_USERS
 ON RSRC (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRC_PARENT_RSRC_ID
 ON RSRC (PARENT_RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRC_POBS
 ON RSRC (POBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRC_UPDATE_DATE1
 ON RSRC (UPDATE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRC_UNIT
 ON RSRC (UNIT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRC_CURR
 ON RSRC (CURR_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRC_DSI
 ON RSRC (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRC_UPD
 ON RSRC (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCANDASH_1
 ON RSRCANDASH (RSRCAN_VIEW_ID,DASHBOARD_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCANDASH_DSI
 ON RSRCANDASH (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCANDASH_UPD
 ON RSRCANDASH (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCANVIEW_1
 ON RSRCANVIEW (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCANVIEW_DSI
 ON RSRCANVIEW (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCANVIEW_UPD
 ON RSRCANVIEW (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCCURV_DSI
 ON RSRCCURV (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCCURV_UPD
 ON RSRCCURV (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCHOUR_PROJECT
 ON RSRCHOUR (PROJ_ID,TS_ID,TASK_TS_FLAG,RSRC_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCHOUR_NONWORK
 ON RSRCHOUR (NONWORK_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCHOUR_RSRC
 ON RSRCHOUR (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCHOUR_TASKRSRC
 ON RSRCHOUR (TASKRSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCHOUR_TIMESHT
 ON RSRCHOUR (RSRC_ID,TS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCHOUR_WORK_DATE
 ON RSRCHOUR (WORK_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCHOUR_STATUS_CODE
 ON RSRCHOUR (STATUS_CODE,PROJ_ID,TS_ID,RSRC_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCHOUR_DSI
 ON RSRCHOUR (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCHOUR_TS_RSRC
 ON RSRCHOUR (TS_ID,RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCPROP_DSI
 ON RSRCPROP (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCRATE_RSRC
 ON RSRCRATE (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCRATE_SHIFTPER
 ON RSRCRATE (SHIFT_PERIOD_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCRATE_UPDATE_DATE1
 ON RSRCRATE (UPDATE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCRATE_DSI
 ON RSRCRATE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCRATE_UPD
 ON RSRCRATE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCRCAT_RCATTYPE
 ON RSRCRCAT (RSRC_CATG_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCRCAT_RCATVAL
 ON RSRCRCAT (RSRC_CATG_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCRCAT_UPDATE_DATE1
 ON RSRCRCAT (UPDATE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCRCAT_DSI
 ON RSRCRCAT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCRCAT_UPD
 ON RSRCRCAT (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:58> [INFO] [2017-09-01 13:00:58] CREATE INDEX NDX_RSRCROLE_ROLES
 ON RSRCROLE (ROLE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_RSRCROLE_DSI
 ON RSRCROLE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_RSRCROLE_UPD
 ON RSRCROLE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_RSRCSEC_RSRC
 ON RSRCSEC (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_RSRCSEC_DSI
 ON RSRCSEC (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_RSRCSEC_UPD
 ON RSRCSEC (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_RSRFOLIO_RSRC
 ON RSRFOLIO (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_RSRFOLIO_DSI
 ON RSRFOLIO (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_RSRFOLIO_UPD
 ON RSRFOLIO (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENARIO_1
 ON SCENARIO (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENARIO_VIEWPREF
 ON SCENARIO (VIEW_PREF_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENARIO_DSI
 ON SCENARIO (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENARIO_UPD
 ON SCENARIO (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENPROJ_1
 ON SCENPROJ (PROJ_ID,SCENARIO_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENPROJ_DSI
 ON SCENPROJ (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENPROJ_UPD
 ON SCENPROJ (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENROLE_ROLES
 ON SCENROLE (ROLE_ID,SCENARIO_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENROLE_DSI
 ON SCENROLE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENROLE_UPD
 ON SCENROLE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENUSER_1
 ON SCENUSER (USER_ID,SCENARIO_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENUSER_DSI
 ON SCENUSER (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SCENUSER_UPD
 ON SCENUSER (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SETTINGS_DSI
 ON SETTINGS (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SHIFT_DSI
 ON SHIFT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SHIFT_UPD
 ON SHIFT (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SHIFTPER_SHIFT
 ON SHIFTPER (SHIFT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE UNIQUE INDEX NDX_SHIFTPER_SHIFT_START
 ON SHIFTPER (SHIFT_ID,SHIFT_START_HR_NUM)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SHIFTPER_DSI
 ON SHIFTPER (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SHIFTPER_UPD
 ON SHIFTPER (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SUMPROJCOST_WBS
 ON SUMPROJCOST (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SUMPROJCOST_COST_TYPE
 ON SUMPROJCOST (COST_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SUMPROJCOST_PROJ
 ON SUMPROJCOST (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SUMTASK_PROJ
 ON SUMTASK (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SUMTASK_WBS
 ON SUMTASK (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SUMTASKSPREAD_PROJ
 ON SUMTASKSPREAD (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SUMTASKSPREAD_WBS
 ON SUMTASKSPREAD (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SUMTRSRC_PROJECT
 ON SUMTRSRC (PROJ_ID,SPREAD_TYPE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SUMTRSRC_PROJWBS
 ON SUMTRSRC (WBS_ID,SPREAD_TYPE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_SUMTRSRC_RSRCROLE
 ON SUMTRSRC (RSRC_ID,ROLE_ID,SPREAD_TYPE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_TASK_1
 ON TASK (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 2M NEXT 2M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_TASK_CALENDAR
 ON TASK (CLNDR_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_TASK_PROJWBS
 ON TASK (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_TASK_RSRC
 ON TASK (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_TASK_GUID
 ON TASK (GUID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:00:59> [INFO] [2017-09-01 13:00:59] CREATE INDEX NDX_TASK_PROJ_RSRC
 ON TASK (PROJ_ID,RSRC_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASK_DSI
 ON TASK (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_FN_TASK_CODE
 ON TASK (TASK_CODE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKACTV_1
 ON TASKACTV (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKACTV_ACTVCODE
 ON TASKACTV (ACTV_CODE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKACTV_ACTVTYPE
 ON TASKACTV (ACTV_CODE_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKACTV_TASK
 ON TASKACTV (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKACTV_PROJ_ACTV_CODE
 ON TASKACTV (PROJ_ID,ACTV_CODE_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKACTV_PROJ_TASK_ACTV
 ON TASKACTV (PROJ_ID,TASK_ID,ACTV_CODE_TYPE_ID,ACTV_CODE_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKACTV_DSI
 ON TASKACTV (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKDOC_1
 ON TASKDOC (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKDOC_DOCUMENT
 ON TASKDOC (DOC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKDOC_PROJWBS
 ON TASKDOC (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKDOC_TASK
 ON TASKDOC (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKDOC_DSI
 ON TASKDOC (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKFDBK_1
 ON TASKFDBK (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKFDBK_DSI
 ON TASKFDBK (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKFIN_PROJECT
 ON TASKFIN (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKFIN_TASK
 ON TASKFIN (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKFIN_FINDATES
 ON TASKFIN (FIN_DATES_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKFIN_DSI
 ON TASKFIN (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKMEMO_1
 ON TASKMEMO (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 400K NEXT 400K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKMEMO_MEMOTYPE
 ON TASKMEMO (MEMO_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKMEMO_TASK
 ON TASKMEMO (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKMEMO_DSI
 ON TASKMEMO (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKNOTE_1
 ON TASKNOTE (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 300K NEXT 300K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKNOTE_DSI
 ON TASKNOTE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKPRED_1
 ON TASKPRED (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKPRED_PRED_PROJ
 ON TASKPRED (PRED_PROJ_ID,PROJ_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKPRED_TASK
 ON TASKPRED (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKPRED_TASK_2
 ON TASKPRED (PRED_TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKPRED_PERFC1
 ON TASKPRED (PROJ_ID, PRED_PROJ_ID, TASK_PRED_ID, TASK_ID, PRED_TASK_ID, PRED_TYPE, LAG_HR_CNT, DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKPRED_PERFC2
 ON TASKPRED (PRED_PROJ_ID,PROJ_ID, TASK_ID, PRED_TASK_ID, TASK_PRED_ID, PRED_TYPE, LAG_HR_CNT, DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKPRED_DSI
 ON TASKPRED (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKPROC_1
 ON TASKPROC (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKPROC_TASK
 ON TASKPROC (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKPROC_DSI
 ON TASKPROC (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRISK_RISK
 ON TASKRISK (RISK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRISK_PROJ
 ON TASKRISK (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRISK_TASK
 ON TASKRISK (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRSRC_1
 ON TASKRSRC (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRSRC_ACCOUNT
 ON TASKRSRC (ACCT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRSRC_ROLES
 ON TASKRSRC (ROLE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRSRC_RSRC
 ON TASKRSRC (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRSRC_TASK
 ON TASKRSRC (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRSRC_RSRCCURV
 ON TASKRSRC (CURV_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRSRC_POBS
 ON TASKRSRC (POBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRSRC_PROJ_RSRC
 ON TASKRSRC (PROJ_ID,RSRC_ID, DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRSRC_PROJ_ROLE
 ON TASKRSRC (PROJ_ID,ROLE_ID, DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRSRC_PROJ_ACCT
 ON TASKRSRC (PROJ_ID,ACCT_ID, DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKRSRC_DSI
 ON TASKRSRC (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUM_1
 ON TASKSUM (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUM_PROJWBS
 ON TASKSUM (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUM_UPDATE_DATE
 ON TASKSUM (UPDATE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUM_DSI
 ON TASKSUM (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUM_UPD
 ON TASKSUM (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUM_M1
 ON TASKSUM (TASK_SUM_ID, WBS_ID, PROJ_ID, COMPLETE_CNT, ACTIVE_CNT, NOTSTARTED_CNT, BASE_COMPLETE_CNT, BASE_ACTIVE_CNT, BASE_NOTSTARTED_CNT, ACT_DRTN_HR_CNT, ACT_EQUIP_QTY, ACT_WORK_QTY, TOTAL_DRTN_HR_CNT, BASE_DRTN_HR_CNT, BASE_WORK_QTY, BASE_EQUIP_QTY, REMAIN_DRTN_HR_CNT, REMAIN_WORK_QTY, REMAIN_EQUIP_QTY, TOTAL_FLOAT_HR_CNT, ACT_EXPENSE_COST, ACT_WORK_COST, ACT_EQUIP_COST, BASE_EXPENSE_COST, BASE_WORK_COST, BASE_EQUIP_COST, DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUM_M2
 ON TASKSUM (TASK_SUM_ID, WBS_ID, PROJ_ID, BCWP, BCWS, REMAIN_EXPENSE_COST, REMAIN_WORK_COST, REMAIN_EQUIP_COST, PERFM_WORK_QTY, SCHED_WORK_QTY, ACT_END_DATE, ACT_START_DATE, BASE_END_DATE, BASE_START_DATE, REEND_DATE, RESTART_DATE, ETC_WORK_QTY, ETC, ACT_THIS_PER_WORK_COST, ACT_THIS_PER_WORK_QTY, ACT_THIS_PER_EQUIP_COST, ACT_THIS_PER_EQUIP_QTY, BASE_MAT_COST, ACT_MAT_COST, REMAIN_MAT_COST, ACT_THIS_PER_MAT_COST, DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUMFIN_1
 ON TASKSUMFIN (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUMFIN_PROJWBS
 ON TASKSUMFIN (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUMFIN_FINDATES
 ON TASKSUMFIN (FIN_DATES_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUMFIN_TASKSUM
 ON TASKSUMFIN (TASK_SUM_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUMFIN_DSI
 ON TASKSUMFIN (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKSUMFIN_UPD
 ON TASKSUMFIN (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKUSER_USER
 ON TASKUSER (USER_ID,TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKUSER_PROJECT
 ON TASKUSER (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKUSER_DSI
 ON TASKUSER (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKWKSP_PROJECT
 ON TASKWKSP (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKWKSP_TASK
 ON TASKWKSP (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 500K NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TASKWKSP_DSI
 ON TASKWKSP (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_THRSPARM_DSI
 ON THRSPARM (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TIMESHT_1
 ON TIMESHT (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TIMESHT_RSRC
 ON TIMESHT (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TIMESHT_TS_USER
 ON TIMESHT (TS_ID,USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TIMESHT_DSI
 ON TIMESHT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TMPLCATG_DSI
 ON TMPLCATG (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRAKVIEW_1
 ON TRAKVIEW (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRAKVIEW_DSI
 ON TRAKVIEW (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRAKVIEW_UPD
 ON TRAKVIEW (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCFIN_PROJECT
 ON TRSRCFIN (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCFIN_TASK
 ON TRSRCFIN (TASK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCFIN_TASKRSRC
 ON TRSRCFIN (TASKRSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCFIN_FINDATES
 ON TRSRCFIN (FIN_DATES_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCFIN_DSI
 ON TRSRCFIN (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCSUM_1
 ON TRSRCSUM (PROJ_ID,RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCSUM_ROLES
 ON TRSRCSUM (ROLE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCSUM_RSRC
 ON TRSRCSUM (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCSUM_UPDATE_DATE
 ON TRSRCSUM (UPDATE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCSUM_DSI
 ON TRSRCSUM (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCSUM_UPD
 ON TRSRCSUM (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCSUM_ROLE_DIALOG
 ON TRSRCSUM (PROJ_ID,TASKRSRC_SUM_ID,RSRC_ID,ROLE_ID,SKILL_LEVEL,OVERALLOC_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCSUMFN_1
 ON TRSRCSUMFN (FIN_DATES_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCSUMFN_PROJECT
 ON TRSRCSUMFN (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:00> [INFO] [2017-09-01 13:01:00] CREATE INDEX NDX_TRSRCSUMFN_ROLES
 ON TRSRCSUMFN (ROLE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_TRSRCSUMFN_RSRC
 ON TRSRCSUMFN (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_TRSRCSUMFN_TRSRCSUM
 ON TRSRCSUMFN (TASKRSRC_SUM_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_TRSRCSUMFN_DSI
 ON TRSRCSUMFN (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_TRSRCSUMFN_UPD
 ON TRSRCSUMFN (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_TSAUDIT_AUDIT_DATE
 ON TSAUDIT (AUDIT_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 80K NEXT 80K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_TSDATES_DSI
 ON TSDATES (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_TSDATES_UPD
 ON TSDATES (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_TSDELEGATE_1
 ON TSDELEGATE (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_TSDELEGATE_USERS1
 ON TSDELEGATE (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_TSDELEGATE_USERS2
 ON TSDELEGATE (TS_DELEGATE_USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UACCESS_PROJECT
 ON UACCESS (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 50)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UACCESS_USER_WBS
 ON UACCESS (USER_ID,WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 50)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UACCESS_USER_PARENT
 ON UACCESS (USER_ID,PARENT_WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 50)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UDFCODE_UDF_TYPE_ID
 ON UDFCODE (UDF_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 32K NEXT 32K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UDFCODE_DSI
 ON UDFCODE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UDFCODE_UPD
 ON UDFCODE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UDFTYPE_TABLE_NAME
 ON UDFTYPE (TABLE_NAME)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 32K NEXT 32K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UDFTYPE_DSI
 ON UDFTYPE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UDFTYPE_UPD
 ON UDFTYPE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UDFVALUE_PROJECT
 ON UDFVALUE (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UDFVALUE_FK
 ON UDFVALUE (FK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UDFVALUE_UPDATE_DATE1
 ON UDFVALUE (UPDATE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UDFVALUE_UDFCODE
 ON UDFVALUE (UDF_CODE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UDFVALUE_DSI
 ON UDFVALUE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UDFVALUE_UPD
 ON UDFVALUE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UEVNTREG_USERS
 ON UEVNTREG (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:01> [INFO] [2017-09-01 13:01:01] CREATE INDEX NDX_UEVNTREG_USER_NAME
 ON UEVNTREG (USER_NAME)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_UMEASURE_DSI
 ON UMEASURE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_UMEASURE_UPD
 ON UMEASURE (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_UPKLIST_SESSION_PK
 ON UPKLIST (SESSION_ID,PK_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 0
     STORAGE (INITIAL 5M NEXT 1M MINEXTENTS 1 MAXEXTENTS 99 PCTINCREASE 50)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERCOL_DSI
 ON USERCOL (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERCOL_UPD
 ON USERCOL (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERDATA_1
 ON USERDATA (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERDATA_DSI
 ON USERDATA (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERDATA_UPD
 ON USERDATA (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERENG_USERS
 ON USERENG (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERENG_DSI
 ON USERENG (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERENG_UPD
 ON USERENG (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USEROBS_OBS
 ON USEROBS (OBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USEROBS_PROFILE
 ON USEROBS (PROF_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USEROBS_DSI
 ON USEROBS (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USEROBS_UPD
 ON USEROBS (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE UNIQUE INDEX NDX_USEROPEN_USERS
 ON USEROPEN (USER_ID,USER_OPEN_NAME,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USEROPEN_DSI
 ON USEROPEN (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USEROPEN_UPD
 ON USEROPEN (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERS_PROFILE
 ON USERS (PROF_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERS_DSI
 ON USERS (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERS_UPD
 ON USERS (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERS_CURR
 ON USERS (CURR_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERSET_DSI
 ON USERSET (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERSET_USER
 ON USERSET (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERWKSP_PROJECT
 ON USERWKSP (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 0
     STORAGE (INITIAL 256K NEXT 128K MINEXTENTS 1 MAXEXTENTS 99 PCTINCREASE 50)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERWKSP_WORKSPACE
 ON USERWKSP (WORKSPACE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 0
     STORAGE (INITIAL 256K NEXT 128K MINEXTENTS 1 MAXEXTENTS 99 PCTINCREASE 50)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USERWKSP_DSI
 ON USERWKSP (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USESSAUD_LOGOUT_DATE
 ON USESSAUD (LOGOUT_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USESSION_USERS
 ON USESSION (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USESSION_SPID
 ON USESSION (SPID,USER_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 500K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USSESION_DSI
 ON USESSION (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USROPNVAL_USER_OPEN_ID
 ON USROPNVAL (USER_OPEN_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USROPNVAL_DSI
 ON USROPNVAL (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_USROPNVAL_UPD
 ON USROPNVAL (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_VIEWPREF_USER
 ON VIEWPREF (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:03> [INFO] [2017-09-01 13:01:03] CREATE INDEX NDX_VIEWPREF_TYPE
 ON VIEWPREF (VIEW_PREF_TYPE,USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VIEWPREF_DSI
 ON VIEWPREF (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VIEWPREF_UPD
 ON VIEWPREF (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VIEWPROP_1
 ON VIEWPROP (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VIEWPROP_PROJECT
 ON VIEWPROP (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VIEWPROP_DSI
 ON VIEWPROP (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VIEWPROP_UPD
 ON VIEWPROP (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VWPREFDASH_VIEWPREF
 ON VWPREFDASH (VIEW_PREF_ID,DASHBOARD_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VWPREFDASH_DSI
 ON VWPREFDASH (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VWPREFDASH_UPD
 ON VWPREFDASH (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VWPREFDATA_DSI
 ON VWPREFDATA (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VWPREFDATA_UPD
 ON VWPREFDATA (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VWPREFUSER_USERS
 ON VWPREFUSER (USER_ID,VIEW_PREF_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VWPREFUSER_DSI
 ON VWPREFUSER (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_VWPREFUSER_UPD
 ON VWPREFUSER (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBRSCAT_DSI
 ON WBRSCAT (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSBUDG_1
 ON WBSBUDG (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSBUDG_2
 ON WBSBUDG (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSBUDG_DSI
 ON WBSBUDG (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSBUDG_UPD
 ON WBSBUDG (UPDATE_DATE,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSMEMO_1
 ON WBSMEMO (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSMEMO_2
 ON WBSMEMO (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSMEMO_MEMOTYPE
 ON WBSMEMO (MEMO_TYPE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 1M NEXT 1M MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSMEMO_DSI
 ON WBSMEMO (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSRSRC_PROJECT
 ON WBSRSRC (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSRSRC_PROJWBS
 ON WBSRSRC (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSRSRC_RSRC
 ON WBSRSRC (RSRC_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSRSRC_WBRSCAT
 ON WBSRSRC (WBRS_CAT_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSRSRC_ROLE
 ON WBSRSRC (ROLE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSRSRC_DSI
 ON WBSRSRC (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSRSRC_QTY_DSI
 ON WBSRSRC_QTY (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSRSRC_QTY_FIN_DATES_ID2
 ON WBSRSRC_QTY (FIN_DATES_ID2)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSRSRC_QTY_FIN_DATES_ID1
 ON WBSRSRC_QTY (FIN_DATES_ID1)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSSTEP_1
 ON WBSSTEP (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSSTEP_2
 ON WBSSTEP (WBS_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 200K NEXT 200K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WBSSTEP_DSI
 ON WBSSTEP (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WKFLTMPL_TMPLCATG
 ON WKFLTMPL (TMPLCATG_CATG_ID,DELETE_SESSION_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WKFLTMPL_DSI
 ON WKFLTMPL (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WKFLUSER_WORKFLOW
 ON WKFLUSER (WORK_FLOW_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 0
     STORAGE (INITIAL 256K NEXT 128K MINEXTENTS 1 MAXEXTENTS 99 PCTINCREASE 50)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WKFLUSER_USERS
 ON WKFLUSER (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 0
     STORAGE (INITIAL 256K NEXT 128K MINEXTENTS 1 MAXEXTENTS 99 PCTINCREASE 50)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WKFLUSER_DSI
 ON WKFLUSER (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WORKFLOW_PROJECT
 ON WORKFLOW (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WORKFLOW_USERS
 ON WORKFLOW (USER_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WORKFLOW_WORKSPACE
 ON WORKFLOW (WORKSPACE_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 100K NEXT 100K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WORKFLOW_DSI
 ON WORKFLOW (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WORKSPACE_PROJECT
 ON WORKSPACE (PROJ_ID)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 256K NEXT 128K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:04> [INFO] [2017-09-01 13:01:04] CREATE INDEX NDX_WORKSPACE_DSI
 ON WORKSPACE (DELETE_SESSION_ID,DELETE_DATE)
 TABLESPACE PMDB_NDX1
     PCTFREE 10
     STORAGE (INITIAL 50K NEXT 50K MINEXTENTS 1 MAXEXTENTS UNLIMITED PCTINCREASE 0)
<09.01.2017 13:01:05> [INFO] [2017-09-01 13:01:05] CREATE OR REPLACE PACKAGE UTILS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 9 3C4 185 ODYV2SR76ELVQBVWMS8GSPSQRFQWG5W3R0HQYNRAV/9EZLPJQUUMANKI4XNR81UIXG2W7BW6 DPGG3RFYO7+IGI42NDF+BY8NONCQ5O4E5MUE+1CQQBRWXF0/HTUOV/2IWMIQUCV+SUX4CNNR ITSWKS0EW0HXSKVVWV8JQIW5F/QO8FMFCU+MYH95FPTG9FLNLT73HZJGWCTIF24MSRGXOMW9 A7ZWZEPAOB4WRVEKFQAZY4QRKHHUGBWXEB/VS8PUIJFZUY1ZVOVABBLQSULBV0NLORWDIXS0 YVUUHFONBZHFFX7HQDBCRJ+295K8XIQTTRZXL/NVGWPWZHCT8AQVM9EADMPUKJX+FLZ0ZC2L CMQB4PMM/CZN+C39HKDDZQ==
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] GRANT EXECUTE ON UTILS TO PRIVPRM$PM
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] CREATE OR REPLACE PACKAGE BODY UTILS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD B DD6 44F NAYOLW2GVRPRUGHJ/PS4NO3RXV0WG1URR0GFFHRVRQ+VUN4HSUYK/ACP4ARIFONFFL4MRR7Y B0W8HBK0AYWK8QCBE59O9YHLODNXV46HAJVMGSWNEDHEBY5YJOZ5AIGCYCMMJVRIAI3KDFZD GBJNO5CQ0BTGGGOZS8LWQRY5PVZAFRTPAZJUGZ76BPM5KOYCPRIUJF16H63E940NWMMHAX+X M6XWAQ08ZIRXOZSXUYSPWPSPCBQVLTXZMIF2UYZN/TJASQXMETCOD0EVUNXZBGXIAFFIM38S QLYF9BJCFTNUNYMKQSLYMBULN/OWOUKZ9DMPE9EYZR+6PWD7VT3FA1HDSKGSBVVXETUUDIJX FL9B3R4TGT7RFM3ASC/FHCJHXH2BDQNFFTOHHI/WGMSH0PDCYLIPKBWE5NDWKOJU9RGCMUJW YAMHJWBL5WYA7PN/RI4SCJ3YU9NZZ1QDPJRJ9JNTDFWFBD8ZCRBMFQX9R2Q4UT/E6HZQJAXR AM8SPYM3LHJKPDJO+NKENIFRWKIKKEJ+HZ0T/TDJEMXBTYRFELCDNYORMBS1+Z6ZGV5B6UZI /I6ARUDSTXZJ6H3MN4HKCF6BM2QEQZCRM3EECETUKRALKDUG6N7XICTD0CU/GLFZDHAQOWF8 6OXBGB2U59J8LIYWWCZNA+V9YQOK6BIOA4RRAT7EKH98D6A+HBK91LKAO91CNLMO14TW8BVY CH33BNCYXPWZDOAJYMH0M5RNQN57FJONAZT2HY3CUDJH2JGA9QESFMYIAVH/2+GZ0NW0EJPO QT2TPHXXDFRJ3VKG78MSZJI5HXFQJ5HFV61ITE+ZS3ZKQUWGVPBMRBWI4VUJ67ZAMGX8T3GU M7WD1GU/SKCEQF3TPTYN/KD/VZNQHKGJNXXIZA8TTZTKH+SRNO7YH0IZHV7TZMDPZ1EWJTAY G21MHN+KUOHFHLAEPLEVE7IJV23ZDOWHPZC1U9E3UAPIUSAECDMB1EWVYS0JG+DRFYYCO9NR LL8MRLBS9ZNTG/4MMJKQHQWVNPIF7F+ZQOCGH6SOWIGYPFCND66BOTZMX4BDJHHB/RGAFBFP P/SQKKNN
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] GRANT EXECUTE ON UTILS TO PRIVPRM$PM
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] CREATE OR REPLACE PROCEDURE SETTINGS_READ_STRING WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 227 148 AICWDVSOWJMMI07SVGJ1ZOLM5GOWG5X3NCBQYNTPMIUOO9+CHZKT0B+E43WIZNRKJBLTTWLL FN/0RLBSTRAU+RFZ+VEKWA7IWO+63LHQDWATKIUCXIBMYLW3W8MY4PNSCAS0XJFQ0ZYCRVHF +DEUJ4WMYXEOX4FGY+FXC3CKDWLIRYBP3H3GS3XVVEH9QY/UAVAQ1TJSOG77ZPOTWF/W8XAO S0WISPIFG41PJSH51SWBP2T9YFV1G7A5SPM+LEA1AXDDJMGB9ESS6BTOMVBKYY7MI58AMARX KGES17DLP7MZ+ZE7Q+QBE6LV5AHBHVJTJW==
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] GRANT EXECUTE ON SETTINGS_READ_STRING TO PRIVPRM$PM
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] CREATE OR REPLACE PROCEDURE SETTINGS_READ_NUMBER WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 139 103 VZQUNOJ91Y6ISKEDYW0FOICJSRSWG1XK2SSVFHRAWMEE0CAJ+WQMBGJUIVREO62HSWI1B1PQ PLWKTWMGIYZJE1JKCFLRDC18A2KO0KQTJVL/+DZE3ESMOYUP75WIEUEFCDW5MOW/AD9ZD2VW KQIJLPMSNJP4YD1DGYCYRDMFF2ZI3CUMFMWPMGD3TBCYHXMRMIFTS4NJPXVUHEZAI4CYTXSU AUYZSWGLMAHQPOA6CDAHU0CYZM+EYE3PPGFMXTU=
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] GRANT EXECUTE ON SETTINGS_READ_NUMBER TO PRIVPRM$PM
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] CREATE OR REPLACE PROCEDURE SETTINGS_READ_BOOL WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 248 168 6ZH43TI9MVGQAAWEB7PIE/TY65QWG3LP2UHQYI+KMQ8TENRTW3E+NGA7OOOYRKL7YI8+SBW1 D/XW1G8PVXVYKKTUTX5LRKYVFGB5IDGUW3MWMV/DSJHAG6WM86DW4TRCNQQ0/MIAPWL3VZQQ K2AGULPN0NYGMQHRWZEO/Y4VFNAAQSH8PWCFKUCMCWVH52RVLS3EY3PMG1HJH4THZPQGG2UK B2QLLMGVU1DSEZFKIE3VBNHJGCH7MIK1F3POP17LQV7IJC/0LC6HXTYFIWOWP9KXWSG00JQU QTDDDGX6OPKPZQYMPCUEYXKPBYY5K7VJEUBXNPCQJQWM9RYF6NIY2XLIZ4CI+AYHI0Q6
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] GRANT EXECUTE ON SETTINGS_READ_BOOL TO PRIVPRM$PM
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] CREATE OR REPLACE PROCEDURE SETTINGS_READ_DATE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 193 134 P6Q5KXRQ6+C4P2NIAJSF+7IY/T8WGXBPMMSVFHSR/+OWJI2SNUMM468HOCUCOJFWKGWHZFXG BRUHO+FIHVHUME46IMCXBL2WVXSTUIYDCOXPMDENVOJ6V95RN29M3WVMMGZRCKFPPLNR0ZZN XF8OZO4GYN1GAZGAAUU3GMU9REMADHN/YDON56CQZK2EAQZH2MFA198EMRZQOTO1FIB76IEX H1TLDDDXFM/JLK/UO5I/PWFQMGVMS5PTXGUTRXLCONJLT1YB7PR9X2YUAIIEDBSGOGTKUUF2 +V8BBDNTH4QTFOQ=
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] GRANT EXECUTE ON SETTINGS_READ_DATE TO PRIVPRM$PM
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] CREATE OR REPLACE PROCEDURE SETTINGS_WRITE_STRING WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 258 15C /F9BDQ/13B42/X3RQSF453DJIBWWG5X3NUPQYNTPMIUOGCPYFG+MMWCTUI8UWNQ4FCHZALVV BOIHFB1F5UQGISHQKNMPE0Q2FQTWEXG61VRTZHQ6G6U1W9+OBFUULECTAG/IJ5CSHJSNZNXG KE2NWN5MDBOZMCDXNVCM8T+SDDXH5VCWJ5FUPNWLXAYKHG5SXKBXSCWHX93GVKSXKXYSFLN+ ZIKLDDELVNSLNKPSMAN6MMXMN7PTPZJS3HZM0HFFWY2KGP9S0ZLE/KVYAVHA4GDKUHFJ7VI6 LMGDD9GBI5HIGRE6LEPPRVA+KAX3CDJDBQEXXBWREDENCRKZ4Z5QP1E=
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] GRANT EXECUTE ON SETTINGS_WRITE_STRING TO PRIVPRM$PM
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] CREATE OR REPLACE PROCEDURE SETTINGS_WRITE_NUMBER WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 CF D2 5CSVTK8IHLQLMRHGJMZBKHGPH+EWG0XKF8TQYNTP2SEE0DXG/OZ6+3G1ZSTLG6S+TWLY8SS7 RRAKK7U1VHOWAQIOYCDDVQCWOMPUMPBAR8I/WY3KZXE2DPHUJFJGQGAKLZYWV4BC+W2S9MIU YKDWYCVN0T3SOJGJWJLTWBFKFO+D7U3S9LA7PFH+5X681+R1LJ2KSLIEIJBYJXIH
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] GRANT EXECUTE ON SETTINGS_WRITE_NUMBER TO PRIVPRM$PM
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] CREATE OR REPLACE PROCEDURE SETTINGS_WRITE_BOOL WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 12F 10F U3TTSVM2WLSA+OTFZQIN/+R19RIWGWHQAMSVFHQCWMEEIGIJOUBB5JBXBUV5GSHG9F7UGBVV UYRPNGK5WRI/YQ/JHC4USJB0DTU7JDJFP97LQK8MZV99ZTEBM1QDNTAO8VSEAVAEHHYGKYKC QU+YQEKYT3NFGIF34J90ITQ/W3WO3TTVUUR1L9MZTRH7HUMGYN4FU7JHUD5AMMEJ1QWL6BXN G5X9RNNMFCUSVLEQ8PDPISXVNCADKQAZO/Y/574MQHVQMVDXWDM=
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] GRANT EXECUTE ON SETTINGS_WRITE_BOOL TO PRIVPRM$PM
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] CREATE OR REPLACE PROCEDURE SETTINGS_WRITE_DATE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 112 10F 4TYL1MJFE50RB5QPDYOY87EF2BOWG0YUACISFI71UWQW/CIJ2W6222SLSD8MATIDXTF0V3X/ ORT5843O6L/+UDH+E1U8HZBGFBE7AFAIV2JWI/9W8AAEWPXN5JXBJNUVSBF7K5ZXCVUQAUXK 9E7EW8H71OOZHJNRVRG0FELIFKKBYHWOS5GRCP3O0KTYXCDUYE3XDXO3ERCO2DIRM3S3RL4I DHXKLS1UHEN6SA+ZTSBGQAKLKM35KP3QKT6I7TAUZJ+WSDHAPQ==
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] GRANT EXECUTE ON SETTINGS_WRITE_DATE TO PRIVPRM$PM
<09.01.2017 13:01:06> [INFO] [2017-09-01 13:01:06] CREATE OR REPLACE PROCEDURE BGP_WRITE_TO_LOG WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 53B 2C1 DA3NSEYSBZ1A9PDJU8S1QLKARCIWG5DD2UHOFHSKDFIUNDENPHDZIENZXFS71ZLDVCHAWKXU ZXASHZRO8FESWKUG6TJ8VVDQ7SIJBSSKM7EAU3RIP5VFBNBNEOPUNMMYCEMAQHRYMGBAQGWP HN/1HKFHCDF5YX0IXBB/5MNHPSNIJMLOUVDQV9IZKJELNOIPMBM8YAUAGLFNE3T9SBNQTLHP 6JZZQKQEJFCMZ1B/2TUMYF6G1CFAAQ0J3QYKV/CNDLES+CRPCYNPIPKI387D5U0GU7KLVOTR IEBPQE8+JEEXONZQXLCJXILCTBIVX1RZPTIM0J5WFV+UBH1LKBBSWZUXDPU3LAAC5VG0WA4T 6KDTWLNHDNCVDKESN+EQ2XACTKOXAVZAQUWSNB/JHYNSI2AUEQEER9TYAISBO+F+CN3FMENP QQZTVIZCO984B9MH0NANRVNER9+E8TTC5CUWNZR6Y8KU7ESW3PQO0EIGIR4UZHQ92CCJ0XAO EVKNVXSTCGRJZAPYZ7QEN0ILQ0286HOIIZL6TIMDUWFHZ0TPQZZPKDPNZS6FYCTRW4E1TXWE H3N7WRXOZGGER2GAG2RCORAOJKRD2UVTDBSO0M/AYITJ0KY1LK9Y97JDNNJ7SIQDEUMHRBLL YN2MDKL0AZACXJMZ7CMIGEDCOFSFK/AUBBB3YBS/+4NOAMQ=
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON BGP_WRITE_TO_LOG TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE FUNCTION CURRENT_SESSION WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 8 273 17D MZ+8OKPCPKFTRAQD4TJAXN1ZHD4WGZTPLCDWFHTNR+ORHWFXXSB022+VV6K4WPDJC6EHVIND TZPCOWXLOF54+CKPKE2XYGWVSJYBZE8C+OZ+M3KEGMND9QAAUN609BKDNIGL41LNCM+I/6TP +XOC+POVXTUGUB/BT++VCZLE21KIP56CAYTISW7XDOEKG4VOZSXQA5DVFT4DSHIH+/UQ86QC 7G09M7HATV7OISJZ5H1+YNUUNI465CPY/RVGCXUA/CJW6XYPOB/S0W67CKNMH7JKJU/TLVE2 1LMBNTA5YKMO9CIEHDIBJXYIOFM9UZIUBSVEIPFJ+GZHQ6BGOKUNYVMQKHAZNCBKA5RAIIT+ LPGI083NW/PTKAQ=
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON CURRENT_SESSION TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE GET_INTERVAL_DIFFERENCE WRAPPED 

<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON GET_INTERVAL_DIFFERENCE TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE APPLY_ACTUALS_TASK WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 3EF 191 E+PWM08SZXXYWQPBH2R7TAE93SMWGXBENUPQYNROGMSLUTXNOLTCY0ILYCZRRQZMPBA1TZXT CQL0ZL7KQSL+1N/U/WDEIL1QDQIISXFQJJLFUEW8LKVQDU4QG6RA93PMCKWLKBVMJPYJN3NE 6HALK3DZNE9J9B544XVT+0SROSC2FCPEJMWX00MNTCGYF3RJERK/P6F/Z+SSKVFU/LZ+QGRD ZB/E+NDVKMKM/J66R9JE/A5QJRAQB6E+PIALMOTXPNYI8UXN2MDJWFMKQ+TK4AHZMGXNE1VC 1TV9ZVARI4GF0NU/6LTDSICY8RMWCVNCRZ8FXWRALBLAX3FXTEPM2I8IRYZG2HHKIZC6NVPF KIH0GMYCBSECM0/J6Z4/W8WSIJ9ZHZJYTOW=
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON APPLY_ACTUALS_TASK TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE APPLY_ACTUALS_TASKRSRC WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 34F 164 PXJZHYYQBJGXHI/IZLTKUAWEED4WGXBE10HQYNQZMA7UHHVNSXI9HBKHB2IUWH/SIWZZMLEA XZAEISXA0NOPOM5XVLKRHBARWYSSIDY2GVGW1KODWFUHVTMCSW2+P7JTL50D4HTQFLOWSKL2 RRHMJXHVE71OPUIXPDGY5XTS8TFPZV6JMZ4Y3L8KWORNJGOUTSMV0C6FT/IYVGTF7N46RJKG CHPXEW5VPTUPQQB5N2YJ8T2XSQCWIVIHKLRL0MNCNOETKHODJNSNNC6DHSGZUCH3LASGDM35 WCKJ8HGUSJY17VCJKLJQF3FVA6QLVHEVTZP+BSXQN3P+D+AAPBZN/LXSM6BXJJDC
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON APPLY_ACTUALS_TASKRSRC TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE APPLY_ESTIMATE_TASK WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 33F 158 ZGJAFPZSCUGCZEURYVLMG+EUOW0WGWJE2UOVFHRDIMSLUUOG3ATNQC8D8YFGD/MGXBW1BBLM RR7FZPPJ/DAC/02YCD8UE2ZRVE4Z06SXSKCHTF/QZP5DPV9REYKYWXI63CR3HBOTK6V4EJ2J IBMWG28UVP9B/JCNW535TLML+HR9HUKSKNQ6CJQ+HVDXTDSQNDA0/BFVER6IRSOHGBQGR3H1 88V1NXYMFWIJYCYFUHQ/MIZE7/LH/NFE6YNSO4WZNFX9BW3GFY1R6XJMEUC/YQNX/2HSPD8A 91YI3+N+O16OGYSHUW9Y7MECM3KPKHK8OZTPKMGSGSA/+76MUBO=
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON APPLY_ESTIMATE_TASK TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE APPLY_ESTIMATE_TASKRSRC WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 282 130 1FHYW948TQXISEYCYS5VQG1EIFWWGWIJNCSVYI/SNGS0JBSCNHH2EZMF1G9SA38ACLUPWVAV 4N5OMZG/YXAB9S6H96T1AAVR8EHY9HIPHDREIH6+RIZ0V5RFCFIOEKHPOW7OCBDOGO3QN60U SMDBFZSFDUDVGWRWDEVRUQP2EWECLG5427ZUPHZELRPZD7TTBT3WTLQZBD07OWD2R4RKYKWR +I6SIB7GE1OWGV5YEQLTXQXVZVP6/GO0FAFD2OIWWM7P8Z9VE4UGGZCIFHZWTSKRI9FJZEHK DDHLLITDKMQ=
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON APPLY_ESTIMATE_TASKRSRC TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE FUNCTION PROJSHAR_INSERT_REC WRAPPED 

<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON PROJSHAR_INSERT_REC TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE PROJSHAR_INSERT WRAPPED 

<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON PROJSHAR_INSERT TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE PROJSHAR_INSERT_UPD WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 135 107 HGMXDOC0V9CMPMBFHU43IV5SAPGWG1XK7CSVFHRGK/PEMDA9FHAUJJ55VHBFOZHAAMK7TW91 LI131LV4UZGMJTRSWC/TLF0PPI0IFPGJBJSTNECRUQSW7QFIU2IL1FYKT0B9ZZHS8YHGGJAJ KOU3AZD9OEOTP7WQBMBOLQWSDKKLKOSEGRUWAE/9TBBDPVNRPNISITLALFOPF0BRQKBLXVGJ PP20KWULMTJTBM86+1ERNTA5/T5ITLK7R4/NBKQ/JI4J
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON PROJSHAR_INSERT_UPD TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE POPULATE_UACCESS WRAPPED 

<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON POPULATE_UACCESS TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE UACCESS_MAINTAIN_FOR_USER WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 B5 CE DWUVFHDDX+02AXZXO/CXAOVTNYCWG1ZWLZ5QFHSI2VJVOGW3WUYCPMELQ3ATHSSRC7UPODCJ FBH2DSYSUSOJZWX8X/EJTRAC/IDKTFW8WMP0WMTBNLG3ZWIH6I9JUR9VTTZGFNXXMCVSIP7+ 5VAGD0KUE1DYB/SWBHCZ2U1LWYBGRNO6CRJOLZVW+QDXYWDUYCZBMCL/MQ==
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON UACCESS_MAINTAIN_FOR_USER TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE UPDATE_TASKACTV WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 124 D6 BZB7GQJPQWGX43XZP1XO8WOJXFAWGZLQLSVHF+DGTMEEP+WW1VSZ6C95X1NRLPAKGBVVCYKK 61MK4S/QW0ZTV+7TRAXWLWMCY9Q+5EBVRRUWI9SATHIJHAPBGQMZ3FXVYWG/YGD52ZIR2E42 IXCNCUQMCBCG36R/OUIYEPVEGC0TZBO0RFMPXC3TJ3Y+0P+8M31XCRAPFQ4HKAU0GHI=
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON UPDATE_TASKACTV TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE GETNEXTKEYS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 167 138 J0EKJA4P96SENCF5ZYBHLFOCCAUWGXDQ7QKDF3RGJNOOUHUECWF6LP6QRNF62YU42AJD/VKG N3OUNQURTDI/6K+CUFEWKWSCE6WVGC4DQLJF1E1JFK9Y8NOJQSVDYYXAEPVV0O+CPOXMKT4R AWPTSIZFED4HF+EQXRPYO+IRWSXPDMWEBELCBMFHWZFFHRJD3868KZ8P7CTBFJ8PLCB0US92 MB74JGNJED+EKBMTOTSIRNL5QLMK6L/8SVE6FZMK8MZH3N82VKKHKLTXX5HN14SUVJ+9/OUC HTOUHMJEMM7HVIBMTQ==
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON GETNEXTKEYS TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE BRE_ADD WRAPPED 

<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON BRE_ADD TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE BRE_CHECKCHANGE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 1E3 15C 5GNJ1FC6IUA68ZLGU/OWLRIJECYWGZLILUJBYI+I6XXQFSGI8P7ERWOPCPDMIPWJJ/EK5LWQ 90TCZM+XZA49FDSITFEJ9QLZ/1+YKLM/GZHIGHOK2RX2NUHZZPRFISQNDB9QXM+ZXRQ7IWJU ZTAKQBRAUW7XSSZ9HJFPLEPO0CFENZP8+KAEKLBGGY82AYZKIGNYQVKOBOIDBMD+MK3EMQ6J KOLSR1KLTX7/XSEGZATVVN9IKLESDOY2I4BRIWEWGVCRP6JI9OUQNHM9ETVOFNRXDFZJCZ0Z TU4P7YQGZCIDYKITOKKZZ/BJ45PYFMIQIDIYOJTWV3TASLASIS71VW==
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON BRE_CHECKCHANGE TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE BRE_REMOVE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 16D 128 4I+4BYXELSF9PUP8IBGNDYGUMUYWG5DQ1YDQFC9GEJTP4EQFOAI+PF1WDF6AL95QJ41HSZ21 USPAKREHBXDZMIJQEB+UGA+JDY0KZZENTJ2JKJBGNR/S9VTJOZEB1YGJ2LL5FAZGABT6CH6O YXSEXVLOBKPJC7RIGPZI38YLWP/LPPQXU+XFQQUF+JLLHAYJ+G7X4TTL25BIBJHRKDSQZTYJ UIPQ79+PCP0H1LVCKNSEIJODIEYZCYUNGPQKLM8AJQQ+VEAQAIZ/DWD5MIIS5DB60CHPYDA6 BA==
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON BRE_REMOVE TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE BRE_KEEPALIVE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 127 10F V6NHJWJ1ODKAPATRVEJ/+SLJANQWG0XKF8VWFHTPMKDE5PAR/L1NDDDUL5TTKDPPG7MQBRTL UMLLVH7B7STHFYVGG6BZ+BMR34Y6TTDSUR9V/4Z9DJ3DGPHNSXBNZC0E//4X+92HQWKB/8FE UMFGRHYWJBYGLWLFYPXQEPORHRUAEATJQOWXG49LSVVIMETD0MHOMCEMQ4KPLST9JG0B3CWW JJNMHQLXFE8R070L0PVZ0GDHNWPX4QRZZG7QB0JTKJNEPWNYSQ==
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON BRE_KEEPALIVE TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE BRE_PING WRAPPED 

<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON BRE_PING TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE COUNT_RSRC_LVLS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 130 117 NRGRJB+ZZX1NHQ577TODFEC5HOWWG1ZQF8VWFHTP2SEE0MPCDG7J+9MFVGI2MFUD9PIAUDQC 8OHGOSFZZHKLXVCWX48L007/FUGO9SHRNKUO0BZPNNKAM6TH4GQ2JFFC11FKHFZIJG4QMPYN HYOMO9AD6RK2DH2BN4KZ6URBNNZQQK7CT802YUL9ZMDCKSLOROKWLZB6YBHSPYFAUVDQYEI2 4MJK4C2WVN/RLTCKUZP8GMZ5SR6+CZTRSZP1QZSBS0E6Y5SMIEGSOETZ6G==
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON COUNT_RSRC_LVLS TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PROCEDURE GET_RSRC_ASSOC_TYPES WRAPPED 

<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON GET_RSRC_ASSOC_TYPES TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PACKAGE GUID WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 9 2F4 185 XUJGLVQHYK0MWSMTYDTQ/QS7ADIWGZV3R0JWFC+IEOVVM2/II6GYWO6G1JKTNM0NTN5XORW1 UD8+IRTECVIA/YOLQJXHVJ04DFAJJIJ2GQZ4K+EZEGFZBQZH58TCGHWHDNSMWA9LJKC2DPZF QEY5I5TDFSANIN9GKKBXNJXES2XNUBQGA4DACLPXCJKBHMTUFPQYG3ATTCIWTDDIKIGWH9EV SDYBHA8BVAY7ROETLM60VVODDPEZ6H6U4HNS9WRC+NHU6KTNDE6FKKNOORDBCMAYBWVRI48N I9QQP1+ZLJTIELJUNUHQINOSD8JRT8XXVMVTHRYDYPYKWGWPKN8CXZR0L1M1ZPZIKXLLUWIQ LW8LNJ3UGUBM7C+MENQVHW==
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON GUID TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PACKAGE BODY GUID WRAPPED 

<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON GUID TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PACKAGE COPY_UTILS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 9 1FE 13C GNF//8XVQDPMKL/ILQXMPK0HTZAWG2PIMEHQFHTPMIMPRY05ZQGBFAYGCOPONHIXCWA1TEK7 GRH2W1OH3DBI9DDBTVCK16LWHDQNBYRJGXQRDNKRLVUS++M9LLHVH+62BMWJR1+4ZX6DDCXR +6ZG+LLNQRNIBWMSRVT1WPMLD6KD27DYZFLHA0LN78DWKOTPPGF+RELRTJTTZB3MP4HYN5+Y O52ETW00E1TTOBLWRMD3X4/M7RIXR17MB9FILH4YKRS0/U6GC1KKP4/LV2DMXFWUEH7HZ21V 0R9CX9CFLVRIC877YEICTG==
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON COPY_UTILS TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PACKAGE BODY COPY_UTILS WRAPPED 

<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON COPY_UTILS TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PACKAGE TASK_COPY_PKG WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 9 67C 2A1 Z5LBRIX5Q8KGLZNNHQZKVCUSND4WGW3DR0IGYI9V1FKYREGJRGBIOFT8TPZWMVAPGIIITAQZ +XPWLZCGTN5I6WGLRXP+YRSLQHKLPOAP+XA6C8YRCKXQEB0VYNQVEKOEJ1GAARZOKMFHADS9 9Q6G278V7+DJVV2MJFVA9CBMYI4KGMRFVWOCUVEVQDYPARRWXB2CPCC5Z4YYRN22D/U69IZJ FN60HA1NJB5ZBCC45ZSY/FEVDS5Q+3VSINGBAQORPHWJILZOJLAZPNUKDVEXB+48WPEFUYPQ UYFOTR7I5GJCTIFWBYXSBAYC/L9YQGENEKGGVNY2JULDBQ5UZDLZTEW52RHOXFFHZGG6XZM4 ND3Q7Y6ZVYODXLGVBKF0DMHR905IIDZMHSMFF03MMWHI1UHGJCIIZUIOP2RBS4IYWOBWXKVT KSSQFMP+ZQXOY8D59VL3NV32HNED/YAVLBOZEEG26WWV1NKFGUBJTC+OAATKIDQ8QCHDJ0IG BAVQ0WCK7LEO1XEHVSRJTNQCHEIK/RGJJZCBWYSJJ07YSQVKQAC9UZGBIVLLRPHIPX0AHIER LYAHVNUKYR8CT2TO/RQ6PI/CJSNYJGNMODXBSBE5WE3L1C1GIC+AMCSQ49BGFQIUKAJK5DIG 7BBTTUMIXLTOZXJ0
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON TASK_COPY_PKG TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PACKAGE BODY TASK_COPY_PKG WRAPPED 

<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON TASK_COPY_PKG TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PACKAGE PROJECT_COPY_PKG WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 9 3CB 1D6 OWPDWA77+H5SE8Z/FBCQLMLHWYQWG40J2CBQYNSKRQ+VS1GPXVALGGCLYHKN4COSGIIITARM FEPOSKPLYWZNJX8MQDK3V916RA7IQKHBXL0HSJXELFIRRBJN2F0TDINV1T+GPK+PNR07XHJD FNT1L3FO5FQJLSN+AL3DSZQSUI5PWPMGIEX8FWMMAIAXX88SX7GJUPB3UP+MXJMDQ7M2PMCE PXWK8+ADX17VH2PEERYLGFX0CGHR/JUCG9EQWQWTKX/EJH+DS73JOAON+SDFRHGMFJXUMMUH 8DRGD2NRUM7VOPYDQEMQZORSKXU3IBCNZI8HVTQ+WCU40KSA4KCSYEA6SGSL32DBVPJEFEBQ Z+0R52UOT0OCHD1ZSHH+YK9GCUQZBXOXKUHDJL1BN5KDRW2COYS13YOZTIPQ6BOQGXTKVZJM 0B9M6AYIPQ2KUFIATAVXWWPHLIQSKMGH
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] GRANT EXECUTE ON PROJECT_COPY_PKG TO PRIVPRM$PM
<09.01.2017 13:01:07> [INFO] [2017-09-01 13:01:07] CREATE OR REPLACE PACKAGE BODY PROJECT_COPY_PKG WRAPPED 

<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON PROJECT_COPY_PKG TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE MULTI_PROJECT_COPY WRAPPED 

<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON MULTI_PROJECT_COPY TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE PROJECT_COPY WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 33D 134 HL7QRV/CVBFTU0RSN+PKNRSU9DSWG2PXMNMVYI/PO06UIFPFJXNFHP2VQN2L4WUVTBUCL5VF 2/NJUM//GB6/DCYODXIPOMY/DTFPY08UCL6IV4RO9Z8UCP+YKJN8S9F649DG/LUHHMPOQYCV QBLLVSOMOPSFG1BAYZQKSXZVYBJV8519UNBTCWJGWL6F4/L0TG0A8UORBKT2VVFY/IT/QW84 LPKYCOS03ZBICWB9BCBCV+KHHSNASN4FJZRALDXRPEAUNFCHTUR3SPONG7QEY1UYZEO9MFXM MQMRCYLE2JGQ6G==
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON PROJECT_COPY TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE TIME_APPROVAL_WBS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 267 1AD SXKDIW/32AOOHXH22MUSKGYYX9SWG1Z3LSBQYNQCMIUOG2XY+TLHHJZLYKKHBH/KBSMVCYDM OKST2KZRT667OMFV3D7KS5N89RSDAA3XHI+UBQ+W46GTVXGJOXTQPFMLIV0I4O+T1A9I4J4A 90LJQRNE+60M9G7BGN690QHHRE97X7+KJ+HYGCQP11DEFGVPYHUDYSJKAUYFSXNM4/2J+R10 OBMON/Y629W3USKU2A+GXHOSGBHOKY8SWHGJWQNXWQVAYVLATNNPCQ9C27DEXMNZ0HDEA+AX MSCE9LGFODVFXKYIFZQAHWMPG7CPHQLKTPGGKWLOCU7AAS5/4LZL+WNANLRJ+1RDOOI+DWY8 NDGZUTMHS+L7U50MWHOHOCQZNFX+QJDKTYW7YYPYK5OAPDJ7THTPFEI5HIIPSXOL
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON TIME_APPROVAL_WBS TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE PV_WBS_ROOT_PROC_CAND WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 2EF 1EA FMOYQYKZ4JVEZ12L6CEGVKMJ/Q8WGXAJMEHQFHSK2GSPPXP8GBOL8I7IEXTCA+OSHJ+CKBW1 UYLMBDWZNWNKXOYIER4R2Z57NPGAMQX68WKRIC6MIBE0G32ZBCO39MH7TFVFAXYAY4SJGJKY A6ZAQO2MYWU75GCDKTYND4Y9FBBVVWW+TQWJS/UUL13/6DQFRHABXOGPGPALPTWK7MJLNMTN Z445CSXYVUP0ROYKKJOJILGPQYEDQKODEH7AJDMGSRYOVXV6I2SFKUQBFKWEIKSDYKA3UHEJ OXRJOTLYYRHOHATFKQAHFHTEG0D3MVK6CJHJTCK74P+TDFLERBQWBYJAW63PH7JM9ML7JQZA VF1KTWB8E/Z3N1GAIW08SMMAJW2MJ6HPINESH/0WDEGQ16NBBBLX378TJOVEO7XBXSUN0CSQ B3MATCBWLCMI763NCJESZR8CZWIC4KHTJS0NUXRCH621SCB3GPH4
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON PV_WBS_ROOT_PROC_CAND TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE PV_WBS_ROOT_NODES WRAPPED 

<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON PV_WBS_ROOT_NODES TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE WBS_TREE_HAS_RSRC_ASSGN WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 647 284 OANS2XK2SGPZHAN7QWSGIXOMP0OWG+3DR0RRFI5DIMQWEONVMVPZ9YWNCCENVFLNIGPRVRMO AS9BRDMBTU8FXQETIWUP24T3IQ6L11+APOUWWFLMMFSJU+EZSCUJWHO0OJ87LALD3V7DPVY3 WDBREAWAIHSG4V5BV6YEWCRLW15FDF9FALQYZ0HSJSMLMCBIP7PLFPBNW+XD9BCCEPDWVEFM RU2USW7VZF3JZSZ2LYQOPSDNAHR3/4DHBTZJ8PD7N0B6DINTPMLGWXENRME6CXWRCQDWTU9B DHEXO/XK7Q/DBAYB3GOLEPLTVKSCUUPBJMKB8S0BZLB2T4I3AEFBHVBII536JMFQSRWOLHFK YNW65E8E0IF9BAPR8KGX/ARX55IYA3QYOZS5B8/XHJEFB7DBLE+FYIGHIA/+MR/4T1VOM9I0 TC8AH+0GCNRE18GXBCK31WRRN0LMXIFFPGDIWFM+P7++NE6K3M5WHKQJEJDDTRY9/5CDBUWZ ZNHTSTF//2NFHWAAXX8JGEHII7PWZWBJHJNHOWUDN+VYXHUQ1HHEHG1RPYI/EMCQ6RE+IAOT MLWKOI8SLG9KA5TUUSEE6GZ9HE6KXZK2TLFWJRNBWQA40A80TUQDPV1PX4Y=
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON WBS_TREE_HAS_RSRC_ASSGN TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE WBS_TREE_HAS_ROLE_ASSGN WRAPPED 

<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON WBS_TREE_HAS_ROLE_ASSGN TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE DB_TO_IANA_CHARSET WRAPPED 

<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON DB_TO_IANA_CHARSET TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PACKAGE BLOB_INTERFACE WRAPPED 

<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON BLOB_INTERFACE TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PACKAGE BODY BLOB_INTERFACE WRAPPED 

<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON BLOB_INTERFACE TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE GS_SAVE_BLOB WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 17A 117 J3AG116OWGTSQ1KNDGAHKIZ910UWGZLQ7CVWYO4C2K6OFJXD6NZETRCZCTS+RO7GSJS1UO7L YYPOX5RU3TOBF2WMFEP+IKJUPR15RNQUNH2BR7GHKI+3OHTKG4H2JT2IKDRR9SDTARGSVVTC 6BKJJ/KK8DY1LMKGFOV5GJOOCCRMWT524Q2E3MDXEXSAV5L5RMSUJ0BBVFXBALEW5T58N3EH 8DEG+PXZM0HL6ZEQPL0X+ZABETJLS7LAXUC5O69HIGGQMTMIID1BQFRROG8=
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON GS_SAVE_BLOB TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE GS_GET_BLOB WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 180 117 1UKDHTGXYG+XURUIVTWXOMPISL8WGZLQ2Z7WFC/PMP/QR/+EHB/INUIBUNCOYPPQ5NG6TZ1N 0DLMOJNBDPHHB9RVSKWBFXGKTICT/WLONEB6R3Z6VCOOVICCAPFRA/Q1/VT65UF+DWJBXYWD QAHJWWKCKAZX9QOETHV63/F8RMMSRY+QP05EBS5SYWHPMN36MLTZLI2SBSHO3U+MM01N8BCF 8QAA/HQCF2RQVUCDOWIHOR/CEOQRCOHK6AXNA90A8KEN2DVL3VWFWXEUCXC=
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON GS_GET_BLOB TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE GS_GET_BLOB_NEXT WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 9F BA YOSHZXH3D7IQC/QHMFA+MASL5FIWG1ZWF8SVFHSMWHOE0MMYBFTARFS9JANJWG4VP7W1URZQ N4HCRDXSHCBOXYYZ2ZXZ7BAFP/1XDBTVR9DPKUNLFYC7OMTMEU7YJFM9IY/CQ0EA/R1NRMGG 58PKJ2BUKG7DXJ3GV+7/WTR261/D08HZ+7C3XDQ=
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON GS_GET_BLOB_NEXT TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE GET_SAFETY_DATE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 2E4 22F WHRCEUQBT8YPRDOT6M3QD/JNALYWGWL3BDXQFHRAVMOUOBQAN9MRC+XX2IPP3TFJD2PACXDQ PAKZCQCFJDNNEHJUPY2YL12XCLU0NZ1ZMAYLYMBGF5DZMHGWSJOPOAB2DYPXQKFSDY/BE35Y RUVWEPZ+IVFW4VE79VCEEIPTXNO60P5RHADDVZNDRQ2CVHXOA/ZMHNWVMCNU59VDBAH3RR6H QSGJ7UOMRBPMPS+IJGZQVHH8CNRPYNYID+BB4ICWA8/OMYAPMFIXRDGYTGXI5UHBV7H2DXL4 1JHCY43CZCT1VRCFC9MHB+QAZKEUNKQEPDGRA0LM0FB9EULV2ZHQQJMJOXB4+F91YI8455TV C4XQVFN2ESV18F9SZ2JOYAJHP5U02859HQLCGKZSN6M15RK+EQXMXXHCU5LZFGDXQ68PPQ6D CIVO18EEIXLRMJSDWGVB+LA85OTO2XBPO2QSHVWTFKEHWWHNVQEWAVUO+RRO5Z5J58O0CM1C +62N/GB4WCKBY2OSKJITS+7QRBXDCXPNPO0IP6X7MT/TUQ==
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON GET_SAFETY_DATE TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE POPULATE_DELAYED_LOADING WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 1894 5DC XHMX1LHLNBACLQ6CPYZOYB367HIWG+1UDMCFYI+5KVMUAG5HU1HTORPFHCXLRRYNVE2PIJMA DOVEF3V6XWDTGCA/H+1NYRQGFVQOQAEFIO8FB1OA51R18MDT9XPUJ6CCX+U7VKDTDJIOMKRC 3LAVIRIIBUMO9ODTSAPET7BXWUGDKKOIGOOU4NC78+IMDLLNZ3II9WAWNZ/P2CLPGPT/XCFI YGLELYQIXV/GF+/L3RQU5QAOYQN6QVZGJ1/UGRRL8YTALWLHMJDFG/MSSLLFO0SFFKJ/QOJJ DJEUBBQPUKBIADK4YQNFUHPB/FR+YHTMKEBEQICEWEKALUGXTA2KT271JZ80PT00M0FOM4O6 TRDKI/WDAT2/VT9V14W8ZDCOST3XX+IIK/ITZQIXYAVHXQNXB82L22AOGUZ/8OBTK7IKO8PO SA0ZRG42QXCCVKXJ4XMUXCZDHVBLVC/WVM9PLKXTW5NRDSXR/1IWGBOK3/CEFY2C6RJB4QCS X4LHYHNA+NIBQEOS3WOEYKYPO84AMWM8IEZX8D5QCD+MTOUMRRNVPL+J8QHTQMZFCUAZDO9O VSO5PKG/NFK7MMD3PHJHIJDUO2BWETN8S8LV4JIMUHEJDQVD82CYYGJZZ2MMEKL2XYWRKDQO YNKV0HEBVYXII/3ICN8VZVLAWOA/Y7I7YXJ2JUXL0ZRLDI4HPKBTWJNIJ+ZWDD96PUPYDLXW FW+AZ6Z2INMNW7GUMNDBUR53PWZDGJKYOXYXMD/LW0YRGUJCLH8H8A5WQFCATS7IJJT8Q3HY 0LYSHFQCTJIOJ4WNW6RT4ZOJ+LNRW5OOD1EHTKS6V7LETLFFSNBDTBIOBLNQOBTNIZB19NCC 4VPAOD9BMHXUO7ADPKTJFTIHTOUDXAC1933AVRDRAPCRDXSEA/MBAQUSK5Y7ULNOCFAYJY/Q UDGT9VDT8RWLB8VQWYXMKA8IWH/VQOEVHTCXIIHPARCKCPWLNAUAZZFDU5ZDTJILCEOAFJR/ WY9PKBPZJ6R3JEZEUJJP1S3NVCKWBAYR0NWL5+VG2RWSPUUXIPSMIVOYKA8BQLF6CCAHUHIO HU7TQELAXU+NYGFFHOCBV7+DBCQSTSLKQBW6WPIAZT8KISH/OV7QEFFUMPFZ9TLFXXCVNNV1 KC2GP9ZXJVI30CSOWRROPVICSFAKKJBLZNLQVR3LXOPBX+I/JAMON/FTG+KYV/DG1NXLMAFH O2XSQZJYKZPF5YJYWSHH9C/ZVTBJWH6WFEFYGE5MZOWJZBEODYKYQPEPD5KSRBW2AYCX6X6H B1DUCN1L9WJSE5MIHSPRHZVQWSKCT+HBVTCSOBSZDIXBRNOOZ+8SPJQ2FTA8LNC7EXG4H2SP TLYJ+OCCY64TAFC7YXCILCCLHWP3PG4UCG+4C2LZPFMXVCZ+MAIV5PG35M63EBUQSLU/NUIB WTI8WBTDJ98N0DSLOTSFIC7HCUZQEE4SQMRRLA==
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] GRANT EXECUTE ON POPULATE_DELAYED_LOADING TO PRIVPRM$PM
<09.01.2017 13:01:08> [INFO] [2017-09-01 13:01:08] CREATE OR REPLACE PROCEDURE GLOBAL_TABLE_CHANGE WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON GLOBAL_TABLE_CHANGE TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE OPEN_TABLE_CHANGE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 2BDA 509 X4HGVRNAA+J9LSWLIRVPKJFMJCGWGZ2JDMEDFC+5PEQY7FS++NDMMEAHF0BTQF0FCWXYFEMU KNJSODOPKIS81RMHBSVXRSNKCNX9VOOUKIUJAIMN89QCYMIETIUYQHGBONM607O1L/WJKSHD L5LTAJWODKU3HTRZBQKLTMYTJOLHCT4GJVQ4BEWXOXHXJFSYYWLCBKK8NSJLNUORLWF4AUUR 5WIEX6T5VM/EJYN+R2MXYTPTVN3MDHVV3XUXYIKLLXTEU6IAJCENWYDNXSN7PGNCJACNBWPM XM2T0T7ZQAYM+LHFMH2OTJSLXKSQLNQXEM1LC+R06HX9CTRX2BKOH9WHVZNCSL7WXH4SCOGZ TVVOS5KUWF3RMI0JW4T5TH7V0KEBH+HQ2FW1A4XXYNISTDUGOHJLHOT543TH8BF+NUIGDLX+ +PZYDR+SK3B8LYXMFG1ON/9FOUHV1TZD5TL0BUYAUMTMZPKZSUDDV3C6Q9JRA41EHIMMVHII AGKFBGLAPKO/M9Q41IAJJIHFMXWUGWOO0SYQTENNBDYUVKDG2P9IQ29DEIWHWFVMOAKQXROK R9RQT7L+CUOQXOR1N7O3XHCT4JVIZPHHKJ4APV8IGW0VQK1CADSIXBVORUMG0JFQSNJDMUBI 7WPEKOJFH+WA19C045YW0NQKKLR5BT1PIQXULJJ0LGY6O1SBP5UIJ/9HAARSH+GFCKX2ABXW XM+RWTBXC4LB7XZCBVNOVXPLUJ/G1+KGKAOSYJQWVOXMAMJWYVKF2GYR/ARYZRPDHGCS/JHX EJMVK8FSEHQJ02BWRHZORK8EBDTB6ACLN+JBJSOPFV/G5JIOHPVYUJD6HTUP7ZSXHZPIDSJE VR3STIDUS8643XVJI1PAJXJNM6+JTY4V0I1+2XAZYVASFDUBB2S4OF+WWOJLPSWK362UFQSC TAPITZSXY9CDIJCA3JK0AKYZF53FX5FXQH741AJSGRAKLZQYNTTYEHYA2PXYSAEPDWRPMSRE D4RE+/4LYDGBEFSRMHK4AETDOJCAU0ARXYHTLE6ETE/CMPJ0FWJB+SKDBR4H8NCAIT3TPFVM I9NEYRGKM3VVH2HATG9SIN4EWXAZOMLXH24XIBU0OP735VLLZJVS28N6UN/B9FMBABCZNYC1 MMD+N8KXZ3ITABP+7HBGLWLEGGI+6GW+J0H9NYDYV+ZOGTLOUJ9A70I96WZPI5IZNG8SNT+A EQWZZYOD5M7HS5ZQ0E94PYOZB6W6YFE8MDHDGT+8OR0C4KSZ
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON OPEN_TABLE_CHANGE TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE CHECK_LAST_SUMM WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON CHECK_LAST_SUMM TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE REFRDEL_CLEANUP WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 98D 41E 1M2FXHIIRULAW8TSXYYMPUNEKOWWGZSRMQ4FFC8ZGQOCD+GUHZCYJZCVHOBAYJZTMAOKCK7M GEDN/CIJYBFIZOA/N5LZEAN79PL3Q/I5MLU5VMDOH3QSV7ZNNVXPDKECBC/C2KQP/KRN5N9Z 53KOOJMJSGZ9QETBCQWAWHC1SITZVUYGICPROHOWTMBQIQJCB1FDZ3UA4+Q+15OMOJJW3SSY Y3G2WGWJPI9AICS8DASYPJV5YOXOPA6DOCFV2WVVYMNWT+OX8+ACPH81NELMS7PG7CDO7HBK GVJHWNVB2DQP+Z6LRFPDU7ZZEODLAW70R/APKEY+6+PT61RCSUT5DJTQOFU4+WIF2/Z9ZECL VG/PK67GMZHUSDVK6G5H/BXVOT2PSXDLUIIEAAS1QT69C1RVI315V/RBZF4Q9IFP6IMHKWUD 7FZDFY4ZHPQZUMPZNDZR2NLZ0CDBLOOA084G/B4QFIA7O51H9M182PYNCFDL2/944QQOZQOC CMV3V7X2KNAHL91MTESMBYERDYA2H8USUNKXW8F7JA1BNNNZDAX6TPFDXCBIMGKPYWIFBQVH CCHBWHCA8DKINLN9GHBCHWIAQUHCCNUMWF/1/ERAR5/VN1PYQJMXC/Y04YIHZ8EXMKYWTL5S 2JGIVTKGZGMBZCYJAHCSNFWC1PUNST0C4VXXJK0UXXNQ2QHJRFVJ9FVVUDBJRVO9P6CHVOEZ QG08D6KUBV4X3KHLXX/L9NPKXDVFL/ICL1TQPQ2BOJF3JWCOSLUDNBJQ35HU0XBTOU86VS5M 24LFTTU2P7A+TDTMHMCZD+66U+E8211+GYRMA6TMBJEJH5GBS46SAVNCPVDFU1NXO0I0CELK GPJZFD5TPKJWSYWA1RLKVL/G6RCA73TMBT6FVVVMOIA3MROJIXY13Y0XD+ODMQWEZS3CU7HU VSGJMZENFM4KSLO4UHINXLH4NEGSDOF+89KUQ8NAADBFUHBVQJXQOCEQALX6ULL6U4S1K9ZY M3QHNQ8XJYJMRC8+OEAIQ7CQ0FDPMW==
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON REFRDEL_CLEANUP TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PACKAGE PRM_AUDIT WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 9 970 2A1 8FKAIDQL51L5MISWKBGLF5AFQHSWG80R2UGFFC+KKJQEH6XXZ2LTSNX/I1T01VH86DPPUWJ0 LGNDRUQ6C1ZSMWMC32IE3PDCI8HUVZCKC94OAOBWR7QB5O8VMQYYAAB3BJTW90IWUD+HEUO0 FVDY4MNQYRYYZD2N/UVQR6DQWMTBJLCODCPRCW7DOHCLGQ+LV4RQZP/DY6DRZDFGT5F8OACF IO2UDQPYVWVHW+MOZWSPMBOKXCHYMOICLUL/9YGC5SFEA5ONASLZA7P/CRPV0T2+Y0DA2SGR ZACF8B7FQ8WPIDCJEQORXY/UCUM2ZJBNR0RF20+EF5JERZPGFCIX4HUFCR2BIWA5174BUJQP QNEHTAHU+QPMK1JK797JS7CS4GTJQYBPKBGG3O8YYVLI9/K2FQOSJLMZQVWABWNH5KUB4DV5 F7LNQC10AUIJUWW+EZDM/ABZE7XTMVGYYGEPS5OXVHP48D682AI+PM7Q76AA2KZF60CXKPJ9 EZGJ0Q8CVSQTS8KXLK2BR5M1UMOHZGC6S88CTQ1IAB0JD8BFUTJKHSETYZSLQX0C87DIYQZ0 BIOB/FEGZ/5JDFG/5RVKGY9OZPJEAK9QHVJUVJI0LKYWHJSAGUXZPHK/6+PTVQ1AD3PINAYE DB88MIKM0NTPAA==
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON PRM_AUDIT TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PACKAGE BODY PRM_AUDIT WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON PRM_AUDIT TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE AUDIT_IDENTITY WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 EE CA RGYNLSTDYKCSYEK11BRDNOT6CFUWG43/F8SVFHQCOITUFE+NZKDIKGJUQWPB8G4E9CB+NUQ+ TAXFME79INOTSQKSPVUJJ0VSYIZXT7LUMY0VCQC9VGDW1XOCWPQLSNZN6QBUBF2MV6XGEHYV OTR+Z0Y5TQTBY8TTEYNUJV3Y3HK/H5KDMLSQJPJKILLKFFMWH4V1E5Q=
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON AUDIT_IDENTITY TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE INTERNAL_AUDITING_SETTING WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON INTERNAL_AUDITING_SETTING TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE AUDITING_ENABLE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 A2 BE OVXGNGAUELJF3N4MSQOSFGHLYOAWGY7WLZ5QFHSI2VJVIRUPY0YC+GGQKHBLZNJY+BWDES6O 9UXWV2GKM4F3VWEKVQBRUGFA00B0J/1J1BSOUFXCO5ZHWWF6MWP3RVOAXVEOCW68SBQCU8EP 7XR+6R0QQTY+DJ16W4OFJLJV+B4GU1KH4SGWXCJCOCXE
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON AUDITING_ENABLE TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE AUDITING_DISABLE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 81 AA 9/J9BYDFUDYU4YQ0YRNXDECPZAMWGY5FF8VWZ3Q2JRUU0TXY6QWBPEZWRCUBOIUZTAR3UKLD GPUR/ZAGYG/KSFEMP/WZLWPRX/WLBFU6RAMWKMYZXXWHS8CDFCDJXU6JK3B8AJ/MZM47TREU QLJOMCUCXO6GJLNWAH/DJWBZ
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON AUDITING_DISABLE TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE CLEANUP_USESSAUD WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON CLEANUP_USESSAUD TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE USESSAUD_ENABLE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 78 BA PGVYWGB7R3XJNMME+AGK5YZ2IWGWG5NNM7+FMR2YWFZNSP+YY590MVS/GCF1M1JDWHSLWMAY /TKGCABWCLHIL64K/O/OPCPYL7EWSAQQLLKEPESBIDVX2XRBBSPT2YWJR9MAT+T1TSXTMG5G 9OFGCDWNGEXOKNC2F6OPD3IV9THQJB/2OAB6YCQS
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON USESSAUD_ENABLE TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE USESSAUD_DISABLE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 79 BE Z+K8ZCCSAQLNRZTFQ+T0OMQBL4EWG5NNM7+FMR2YWFZNSP+YY590MVS/CHSF9ZTSQ8B0I8DA MV7SHGMM1NCXYC+UJP6PZQXKCI+XMEMQQIYYHAREGYNB8DSA2WBD7DSLIUFTAE/K9BUL0ZIO RVAH4ANCJXHF6CP3NHEQDW9YL/BR6IQF9JMMZS3K/W==
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON USESSAUD_DISABLE TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE HAS_RSRC_ACCESS WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON HAS_RSRC_ACCESS TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE UPDATE_RSRC_SECURITY WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON UPDATE_RSRC_SECURITY TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE GET_PRIMARY_KEY WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 6DC 237 CXB9S1GMFZSXYDAPMHZBC0UIDN0WG1XDR0QSFC9VHPUUA0KHQMNEEQMGA+CVYBGHPRKJBODK ZPCSEFQR9BG3G5QWGK6L1/3MAFXFPPDZYJKFK2CNAIOFO7RBU4LZ6JSGY6MKECLA/DP7OYPD K1DWRD2J1THMTWFS/NQRN9AF555WZR4E7VKX7XECPASMN+IFWT1FP/+3CGZAJNWCJ/EIBPE/ VQHHF65DZJBIPIBJPMVMWQSSVEC9VXTOQJG0G2GODSUWUTBHOSXT2GLVELSXMRQ9CATYBNXX YP73OXY6CTGLDAAJCQ1AAYGP74URYJXQDXWGJISQ+ZQUJMJSMV03ULIOKNZTKTZZA4LDV7VL T2ZBWTFKOXJFVKD2X9N8BUOFGBNTTP8EHQ0AOYOL5TGGID40PDKI58IVID3ND0/9ZQTMIB22 RQQAZTN00CZPJNUS4ZYV7RL/GXE2T0BZMTUSYWR70UUKMH2AEUXAKU7Y77C8LB+TWBNQBXFN ROSW3935NFTBSXPVR2PBRAFEDE13YXQRMY+YTT51TQIV9PSZMZVCNE4=
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON GET_PRIMARY_KEY TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE CASCADE_DELETE_CHILD WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON CASCADE_DELETE_CHILD TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE CASCADE_DELETE WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON CASCADE_DELETE TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE CLEANUP_LOGICAL_DELETES WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON CLEANUP_LOGICAL_DELETES TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE HQUERY_PROCESS_REC WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON HQUERY_PROCESS_REC TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE HQUERY_POPULATE WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON HQUERY_POPULATE TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE CHECK_SYS_PRIVS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 11F 134 U04YFCXGGCQNIYUORUDPA0S4OPUWGY5KDCAVFC9GVTSD4CINQRIEVTNSUG7ZLASFKYO90O6O GVIAYFOHZBTJKBZTR+K8VZCQRJDMO2VAAWM7DBXSMQ9FM2AJAA/NMMZHWAHKUUW2NOWOCJJZ K/FCG0I+GH+ILXMX4PDWSHLYUY3NW01LQAB/WG2KML6AY5R9D/NFVQYYOQ+CM1MQLLVDTOR2 RLW/BUEHOVDHR7KLCH1OWG0XJSNNVXAONZGP1YLWBB9LS7CHSVPYTHONTYWVFGA1JBPUBRER 61R0ZZJHYLJABA==
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON CHECK_SYS_PRIVS TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE HAS_TIMESHEETS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 567 2B9 BA1AAAV7XYTVCCKXOWQYELMJHFKWG2OJAMCFFHRA2H7QCLC9XXCHXPIL2QNRYG1LJU+OMJBT FISNYVPADDOI+YQU5FRIMUMSROCAMDXHCCJDVDHX0LN9DKPX/M6M4T1KPFUZ3OL1YOUGSGOQ WRIMRS3ZXV9JMHDBSUF1JXLOVHIUAWGDK94MDS0HLYLDDFR9IREIM2+V6V4PBDVCGGMBH/SH RF5UHRVOU2E2Z0JKYNNV8NSXZ++RXTC/KVVJ2DPY4HN58MU3BUPUXJMZIWYXZJTNMAUVZTO/ BDZDBBI/AN2N71/Z42KUWS69LVL54QTOYAS/SC8WNPDIXROE052JE6GAUOSFQSZFTEXS6WJ1 FDMOKNTTMJE13JPG1O4TX6AOLSBIWO1UKRBXJULCUDVEHNNIGXPMJ3KPUSBRQJWFZ95UVFVO LAOYXCI/0KW77R25QBSSTYFGYURDB3OQARDXQVAX5Q3MZELHFAEN41KBDB35JAMWGT4UV1T/ XQME4KH1IOHAWBXFTEVGOS3NAIZTVYTU/AD2RIJ3LAGY+WDXCTDA4XO9YGJZSGQ/PSNOU0K/ GU3F4H0F21OUOCWNJYRGQFYLIT4DPT4D02M+VJRK838YXF2AM+VFCDXROJRXOXIERWKKPNMH ZBVML7GYTRRLTNOL1K4S2E7JC90ZSZZKRVIHUW==
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON HAS_TIMESHEETS TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE SYNC_UDFTYPE WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON SYNC_UDFTYPE TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE USESSION_CLEANUP WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON USESSION_CLEANUP TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE USESSION_CLEAR_LOGICAL_DELETES WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 36D 1F2 O5P4SMW2EUYUEGKCHADYOKVFKFGWGZSJAK5QFC8BUWRTYJVN5WT0ZVP/DSOYIRHHHFG03VBE QPMQ9MEDFGJI0+ZW9ME8EV4IJCINVETM58UQXJYIJSXPD58MGLAT5VACVTZWGY+STJ6Y3ZB8 A0HVNCTMDZ/Z4OOE8DU1KHWT4YHVHA0MJ2JQPQRVW0R7YWFJECIZWIOS30ZT9TRC5OVUH5DG E+WEL9V0UKDRFV68BXKKJGEGMV/9AIZNO4ZSHOZZKSAXB5ERWYTTW0D9OEJQBGIUCBQKV5PO EBPC3RFYE/FVARZBDXKZDEV70SRBL5N+BHDIP95EQXDHFYJPLMS/FVHUOAOZCQA0WFKQ32XR MOB+S9OCVWXO2RRKO3NOM3DFUNGNWLY/CZZIGOO66A9ULT+RT3YXCWEZH+UWGNDRDV+XUFVM W4LGMHW1AAFOWN7KJ7Z7HOHY+YTXWMJZ5FNXAPYU5XKTMNXEI5NXEPSFY10Z
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON USESSION_CLEAR_LOGICAL_DELETES TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE USESSION_CLEANUP_EXPIRED WRAPPED 

<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON USESSION_CLEANUP_EXPIRED TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE USER_DEFINED_BACKGROUND WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 43 75 96IPEODOSCV3FNKML8Z1OIGWPQ0WG5NNM7+FMR2YWFZNSP+YGL9SMK7SXZL0V8D1M58OMYIB X+6BDIVAWDL+0OYJAAWZGQGTK2MPRO/QJB/2OAA6NCHJ
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON USER_DEFINED_BACKGROUND TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE CLEANUP_OLD_DATA WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 3F 6D EHJNILKUMOMZSVB9XVWU35TJ7GYWG5NNM7+FMR2YWFY4M1IY0PMY4/7+UVS/UNRSXZT0I8DA MV7SHGLPPZMBCC0RAY/MYOI/0TX0PQYVSGY=
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON CLEANUP_OLD_DATA TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE BGPLOG_CLEANUP WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 1B0 19D WYR8B+FMIMQFFHT/Y9HO4SS+GMGWGWHI10JWFC9GEOS+ZYBK0/DLWS2OIR0K/CBLF/V54YPC FJUAIAZN8SKQEEAJKWC5EDOKR291SCIN5XTORHIM3FEIUVZ2ZGDPRRHX+GZPOLIVQSJYCBSP NGRNT3LGCGJQGORABO7UND2GZKT8ARPX5FV8TULO3TU3K1YD8WCE4NZZGI5XJXUOAD3D9DDL OKKGO3UOCE+IJQEE148X8LYYZK6BGABH2YTQPFU6U18EI23LC74FH4SAOIAF+K6XVW8FM4VF XTRPSVUCIS1VPPKQ8IP7IUWNLPNNZJDTOMY1NUCEABWME/G4JTVPZPO5TN4IBDF58JQTGJAJ VOQTZLUWPNM61LT/MMXCPOMN4REPB06M3FV3OB8KGQMY1A==
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON BGPLOG_CLEANUP TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE PROJECT_COPY_LIST WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 58B 295 I1QEMPRA5TJJC8MI/FHAYYVW5OUWGZVD2UGFFC+KKW8TEPQPJ90PO2DLI9IKYWXPYMMLQEPB 9/UUQGXUSNBKEJZDYGZEZLFGVVPUISLXAKQJHXQVOMJN5OTPFLMB+PXQT39J7D3LVI9NVYBL VM1DLN2V6WLPY9EE2HQM+ZATGMYH8U4ULUF6U6MHYE3XEIM+3ID91Q1X7I2JMYHQHSY9M1RC ABTACA/AFKXTTYXYRVAYDQLWM9JVRRXPJMK+P8FGOHEXVAKX76P7ASLY7PH2NVLXADFTBJXF 63A6QCXGYWG42AHNECZMDS6PB+RYKPOUMPGIRCAV/NPDGU2SLCDUC3658JC1C/N8EHKPYT6X PYUUGZK+EMJQDSZBOF67+CLYHOS9U1A20RTEFYX5FJIMUS8ZIAQXIZDSSXOVR3GPEPISEZER ZA8OA514T50LQDKZCIDBO/FATA/PRDYDSXYUJVX8DF+C48NISTW4YCNHHCLEIBJXIESD+I15 UJ2YHP/T9HBCTCEY3QZPT4UZUHQILRDF59UDN8BHX/BCWTC35ZCYWXXH0MY7CSWX6PQ7L8IP VCLVD0DTYZDUDTHW6PDQ78QEAGPQJ/+9MQM3D9OO7NZC9IYF1MI3WGN7K6NGWAG7HINKVA4Y 1CUC
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] GRANT EXECUTE ON PROJECT_COPY_LIST TO PRIVPRM$PM
<09.01.2017 13:01:09> [INFO] [2017-09-01 13:01:09] CREATE OR REPLACE PROCEDURE ADD_DATABASE_JOB WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON ADD_DATABASE_JOB TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE DELETE_PROJECT_CODE_SCENARIOS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 5A8 32B BNTQHRHMAYLR0DJFB44BISDVUDGWG5DDR0OTFC/NLLZGSKNFGMIKUQED2F0ET1NSDYMBZUHP ECCMXQ0N/LMSMOJ9FBSJJSUYZOI/TOS613XC1DHLH5LNOU/YUJARLDBESGRYV2RP2ADDGY6B SP92F5+7ISDJBTHNYVAZXPBQS/YGS7NBQ2NTPKZE01GAA/6ZTUVK3DKKJJ6CPQYTPLY48CE8 T6WHCDHI8W7896NHJC7HMBD9Q4AR9PWHFWLOTOF9YWD7JWOU8TYXJ29ZXBYNT0EURDQJK6HN PPZNPBXGXZ/PRO9VWVS2JL4VKJRKUIHKHQ2KFG5GFOVHTRB21XWEKU9CPVF2PACBY+T5CVN0 VQP++6BAPM3P1ARKBO3IUG8HXAD+3ZR0ZOWEDHCPFJXCTKMZG10V3BC6DXT6TI3KUFM8PE6V JHTOU4S0YFRIMYYTGQZ+E9CBFMG2VN1DCWE7OE1HEPBBVISHB7T07X6MIZAWOANWKDDEQ+MM C3ARR96IC9YMJIQOXKCI/7IGALPBMXY7MZEGXN9YI61KSYSR/NG47IGATKKA49+YSZW4ZAWM TRTDK64+ZAAGXMLHBBII+UQW65KLN9QA6LMLHSK1HDWX852LI7J3CR6PM4STVUYB5SJWGUH6 /XRG11ZQKKGLYMG68V/QTAMN5A/GPVOYADFUHRBII/VEAS26H0EWP5N+MLQ5SHNQTS4ZLKYQ DERIOIHSRFDGV/DR5ZJKCV8K/5BBIMIVHTVUQ325XDYXRJVLZOH4WF5OSZZKRVF7FL4AGBZ4 MV21ES8=
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON DELETE_PROJECT_CODE_SCENARIOS TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE INITIALIZE_BACKGROUND_PROCS WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON INITIALIZE_BACKGROUND_PROCS TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE DROP_BACKGROUND_PROCS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 1FE 19D +KLCFTBV5I7XIVATXSW9KNTZGEOWGWHMACAVFC/NOZ+VEDXVQOLZ1RYSFGITO22YFM9CBE2I 1SOMBD/PZY/IUAPC9T8SP8EDG1WOS0BKWT6CTGYL6ZFY7QAX7JM9R6BSA31MQ8IP0CNMXZ6M 324Y8EU6/GN6FQBDKULTPCV5KO8BHEDSXPO3BSWPOBFUBOFQKYVNSWQXBCARFTAOZRPNSAZS KFQ79/F5+I6EBTCRUVIDNRIY4Q0MIW5F0XRARP25P+73CHQOK6BMC6FGZI7+5L0YTIXBRG2D CNP9WBVLL6T512GGXOIUG1LXRU46UBXQ/R10SMTEK7ZJ+I1MS4B9TUMQYL58S4C0JWWXL3V1 30Q45NBGTKRIC+5D3FX+LBVRMUZAS828MIT37UYCD8HAP0I=
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON DROP_BACKGROUND_PROCS TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE PRMAUDIT_CLEANUP WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 263 1E6 CKXXNFVRWA7VITLLIXUQEHFZBWCWGXDXNA7WZY8C7ZDKDW03G7R37DAWWLQVZ3GVRJIE/A5G NN8UQYURHRU/HXENQAIIMXIDIMMAYNLW3UVI575ZK/PAXDY2WBBA2FPSCB7JVZFENXYLBPIF E3XLU9B2G9AUT070LY1ESYVO2W46FGAIBJSWQ+L2IYKYJRYUVVSW56JVEMPNL130XB7KX8YF DSVXMIZUSHHPX55E2VACCXI80WVROOWAQNHGXPKRON6RF6VSZUV7KWX8CLI8UXPLAKTOPSYZ PL/NB82DTCSFEF4FUWQRD5HUAJHBSZS7PEL1TOBVJNWNZFR81GUBOP34DOT2MBJ+IP0K7SII /YEY/E88AXOWDO1KJTYY0+MP7QSSCBY8AMQZIFQZVOVWAAOV+LBTIV3F1XK5C7KURXOPMERM X8TN7RU/ZQU2K6IFWSFPKE4O6TLR5ZJLQWODGDCOSBVO0Q==
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON PRMAUDIT_CLEANUP TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE PV_LOGIN WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON PV_LOGIN TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE SQL_TRACE_USER_ENABLE WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON SQL_TRACE_USER_ENABLE TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE SQL_TRACE_USER_DISABLE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 2B0 175 CSCXS7J+Y1NMVLBSW8JKILSIMAAWGW0JMEJBYI9Z1+P+V/SJXUOT0XZYERSHK92HWBW1BAZH FV9J6D4LYTPQ/0CNAK03ZFPMZNF2FNG4LVVEJCWLNE8SGYHEVJWPARD1RRA0ERLZXNJCFBYN A/3A4UZSTFM5UD6SLSLNG+WBWQ3EXPOEKH7DOZM5DMARGLYFLA1AVWV7+5V+OMHZKVXPUWEM SEWI8PM4FBFK7UDV7JYPGOTQSGEATSPELLJ5IZJHNZ5+DKZIBHA8+IJQSKA1ZFGVLQJ49OOH K1FSGFYVAOWADOUTWXWIJODGPBOOLN4RO6O4QNMO/0OKB1K72TQ9SFABPBBGLFTAKZTX1ZIC LG3OOZU=
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON SQL_TRACE_USER_DISABLE TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE SQL_TRACE_START WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 22D 1AD KZNZNAISYIPEBCZMNUZ+B8XMM38WG43MLSDQFC/NIMRTLR0WWOTRAXVWJW9E1MAY8XZFVYAF YRH2S3CLQCWPRB0UHVALHHZO2HMYXL4+GI4D8SQFEOINDJ4NJK1PS10HFGJK1M4HSABC8RYH SPZG84NP97WJF9DZUAI1XIEL/W6UKYGCUIAI/+RI7PK7DEGHF9/WTV9WEHYNJNV6ZY11G7OC 4SA/MSJIN2NOAAMIPOBC9J40VVG7N7WZPEIFU2MSINSH4BKAFZUO5RYHC6DEAHDRXA76A0HZ 9TQMZTZSGWE8DESUUFFDXOE4ZIM21MHJNQDWXD++OTMD+9ORWPKFIYL/MRCQIQEI1PRBGB8U D804WCQTAHPBNIQPU3QH+BKTLIJNP+DDQLNMU9ZHSAOSPPHVDPTWVVG5OUICLQ==
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON SQL_TRACE_START TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE SQL_TRACE_END WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 D6 103 YFBDFYVSEEL+YNE9A2RYGS3E60AWG+LKR56SZY9A2RTER3MBYFGKO3VYHMMSO9FIJS6IK33I 5VL1PE4FFPUYR921QKDUKRP8PR01D8KDYMNUC/D8U5JJVDG56VJGWIK37K+WSLI1BKGKBAKH BOM8CH8CJECHVXKPZYJAFINSNLIAESFWT2FPYI98CT2KSHSBN2TWCAMCKBOGB5KLSGUKKVQ8 GWRFUSC9WY+UXN4VJXRGFI05QGDEX3JTPF3ZRLCR
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON SQL_TRACE_END TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE PRIMAVERA_EVENT WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON PRIMAVERA_EVENT TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE PROJECT_COPY_BASELINE WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON PROJECT_COPY_BASELINE TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE PROJECT_DELETE_WBS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 1574 2A5 FS3+SAIXH0O5TXG5LSFNMRWJGOUWG1V1MMAKFC9AXK6OBTFHU/O+KLFMDKPADON94NDVGBVI WVEOGJARCZFMICVRD9UQNZ9GL9REXGV1QZGL/CWRN6E0JJU6VOX+2KJSURRFSBBMU6LRUP9B S9BA3+U1DLM229ZQXNXSLPGABFLE1TUJUXKVYH7KCKB6PSUO3F5IT05M1S0PYPGYQ2GHAXLA VCAWVQUJVF7GSRRVC8GB4P01YLQVGCPO0M7/AIWUOVEZHKI7AFYQZYMRXG0LHCZVPQSGP52L SEY7A02X0FLNM0JRM7W0BAYWL7YB59NBAM/IERNPILJXH3IPYDALT8FAC3EF6USGBRJ7J/O5 JSC/REXRFF0QS3KNQQYW5VYAJTKYFVGNBQBZYQIXMSGFPKB41ASZHGMGPEPEMWQ7H9BCEDPR M0FTSBIXHLQTIEXGUY2NQ0GDOEFS/LEPDRQTDPQNUXMA/BBFA2TUQKZE/XTYLISDUK5GWJIV GPWRX9HAIR5EGQ/DHMKHTW+DEVJ2TOJY9TKQERFG7VGWEZSA2XQCJTPQTQM35LU7KVLSSGXO ZPLZ71MFNMIAALINNYPR2HJDUJ1PLSZJMVAM3DVXC1LY3XNLPQQMX/6UCEOUJUZYX7YCHL+8 BNUPJXYPAZAJHD/KZI4=
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON PROJECT_DELETE_WBS TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE PROJECT_DELETE WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON PROJECT_DELETE TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE REPLACE_REFLECTION_PROJECT WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON REPLACE_REFLECTION_PROJECT TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE OBSPROJ_UPDATE_PROCESS_KEYS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 256 189 LUQENIOM+2E4QSX5BURLTRUZP7MWG433MEHGFC/PXK6U6/VZOZ7ES285KK/7IVCAGYCVTBXP FTA3ACSE8GO+TLF+5JZSFU3PFJDV9RZQRGL84O5EWTY9U+JNFQHYRCUOCYVREANIKBLRQZ68 TMDUZN4KNVI901VUF0AJWPM8ARJPBW/YH6YNMKVAHK3OQTGVTOPSSH3QBELQ2J8RRXP+ZSTD GZGQ2LIDZDWMMU5FAB0ULC6FD4RF8SJUA6AG5RMQPYKYSFOEEON8JY6TN2NN9HNE+C+0LXR5 SSAFCH2GA0QSEPDHNUDIC60HEV9PMV3FOC89UPNAZM1TVO+E8MWPZRXWLF9ZHAFPAPS9EWRW PGQD2PKL2JKYDRIG+DMD9HWNRW==
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON OBSPROJ_UPDATE_PROCESS_KEYS TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE OBSPROJ_UPDATE_EPS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 7C4 3AC 7YZ3O65AOYXQHNCTCVWA6FVJ3GIWG41CR0GFFHRVRQ9RUOOVGUYKSZ+PC+V0B7OLFK3ERVM1 NQRSS6DDFAQRDQMMSFHQ0BPNOH5REYF8QIHY2ZPOGKXUFXSXIP4Y2UXYV1+ZG+GI50XG8TAQ ZNFDXZFOARNU5O4NS82+SYSXTAUFXW233WKDM0CH3IXLBEFSWWQEDG1F5TKJSKFZ3ZRNGF+P BSOMNBRY4S98BTYW73UQEP/RWT8R3OE7NTMG2JZKHDVT3BVXLETQ0C965MAV9AUHDVIOHS/F VOOE2XEPSBUV9P97WR2BZXB0NBWIKXHKUABHUZTFC+RWZP+4+YUODZSBNXYRKMLLDM+0ZNKY YBMYQIN2/FXB6G2RXGDKIJTEC39GLYVUPIHEAEIBYW9R06IQXNQGKQHSGIDE+BJID+SGKWL9 WXIEBNQLMAZCWRI90GIWF37XYBLDRKBV0HPAQK3NGGJ4TPAG+XKK5XQ60GET5Y1091Y+7DLL TD8WNLUR9YYM4EYSTMMYPJOYNTOSVNS1JGA8SY1VB6GME19EEEARB2AYN5AEYLDIHTSPG81G 2RFSOACYZWLCVGVRB2WCWXVV3HJ0T54IWCVYN/PAR/ISMWMH67OVP7B4Z5YOMLFZYTA+JKFI 4WM0NALMY9FLWXCOZG77Y3NR0K5OCPT2G90SXEVXZWHSOHXL+K6K2KHWH8XQXU11/G9RETZD IWGUFXS+I/IOTWT9OFO3NPCSM+YIIMPLE+KWK74UDGOUINI6GL4YKUD2JUNKIPDCDBV3GYJT ILURS1BFZY7E2COBDD34ECTTBSG4PZSC6TM5UWU4R7GWKNOX6PWIKPSHRPYFB5NJHVYAXFG+ 37OHV3BXX7OJLMHUTUKP4Z5OF6Y7GOBL0V52TOBTQSUF/MRULLHJ/X0GQVSRXPZL
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON OBSPROJ_UPDATE_EPS TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE OBSPROJ_UPDATE_PROJECT WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON OBSPROJ_UPDATE_PROJECT TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE OBSPROJ_UPDATE WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON OBSPROJ_UPDATE TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE OBSPROJ_FULL_REBUILD WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 1CA 1A1 0JUYPJKTRXUCPVEP7FZRY9T0JAKWGY5P+TXQFC9DBMR1UQM+5UP2ERRBQAA5IKSFYGCTYVXE QBJYOQOBDPNJNQEHTUR6RTDL86WEREN+BVGAMHUK8SXCVDAVDCQ7OZXMTJF7GP5GS0ABFKI6 0XONHJZP/Z6M9XZX4CDR4V4QEFSQGOEY0ZFSWW1JF3BT1NPRVTMTQSC9EUDOIZ7P3PAFUTU1 M0DJRXDNLZGQP0Z1UYUNXQWU6RJNLWSJ5QHDH5YKTYAHHR3IB4BGVF/GU2TZOU3YBZBHYOB7 L9XSDCDBYS4KZKL6EM8/I8DOENEQBJJPK/LE/GRJGBGKAEJIATVS/EVIXNFTJAEAGWKA5DL4 D90D27KDS/TWAPEQI8IQZJKRCJEVIIWG2ZKX43EFX/YYDZ0RVXI=
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON OBSPROJ_FULL_REBUILD TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE PRMQUEUE_ADD WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 2C4 1AD SMD68LXLIY19TEI/OOSUMJZ8MMWWGXAJNUJWFC+KWOQKY55ACK0AXFECDBKJCNBXBF30T7W1 BYNTQFAUQ6YEKDGAGMETXODXYJCTHNI2XI8JB2P6DW/VNYW4B2H4JJNGCGCXWYQTENNGZBLD OOPTIYMFHAESRFSO7AEOHRAHMKVILQR/KLFITXZWLSFCL3L0JEJ++UJFRCVG1AB/IOXJCYBA XJJZBQB46QZTJRIGBRIYSEENLYWSM6G1LL0WPJKSJD+JHUAB7KTOVFEAFJATCTCJH96EE5Z6 MFAU8XZCNLVX5OC0I1/I8UWZSMA1H2U1GKP5E+A06ANSMOBWWGKVI33ZAIRMCVKNPQMWM3J6 YNZVYXRKFJZ1COCDH37C4E7QMYPAUV1IKMRDYBERDW/LE/ZPKMMIGNFRKFW5A6A=
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON PRMQUEUE_ADD TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE OBSPROJ_PROCESS_QUEUE WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON OBSPROJ_PROCESS_QUEUE TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE CLEANUP_PRMQUEUE WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON CLEANUP_PRMQUEUE TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE WBSRSRC_VALIDATE WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON WBSRSRC_VALIDATE TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE SYSTEM_MONITOR WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 39F 227 M6VXQKCDP0FR4NAC2QWNHGMSVB8WGW3XTAXQFAQC7Q2DZR87AZHJ6V2H0OZJBACHLHNOUPRF YL/8PP8/QFKS63L78WI+MLCLBRZBKA2H0TA2LDNNXDAIHFXUIONRBMFUIDQUCEAMHDSU5WFY B8I6+1RCWJFML7FUALE9LDBNOUTNCTCCJLN9FI8ADFEE56ANDSPZBI/TL9JAYNTQB5I2ZZ8O 4BJS1G9ACK8LXS5ZZQAXSTJMQGNDWJGNGZJXHTO18YHAKJVBXWWXYYL2ESTVMEVSZVRQIUYT YV620Y8+DF0/FNAJEMG70RJIDZQ7RU+UTRABXV49BS9TOCJECXDMXVVU4TCIZLBW2RJSO94F WULSZWEY5ZORTSI+/QO0+LQRYXPUKRYCQSZXAHDCRNSZACIKIRIHLUWXE40PR3KFTI0PBIGH IBXMT3IGFEOB2FUHGYXH2WJXGCCGKV5BMBBHR2QYIMHLPOHW4USYUF0GKBYWOTEANDGOG1QC UCIOC9DPTBIZZKEBJQR97OVPMQMVT7D4BZUR2G==
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON SYSTEM_MONITOR TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE DATA_MONITOR WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON DATA_MONITOR TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE CHECK_BACKGROUND_JOBS WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 3F9 274 UORSRBLMW8LC/JVITVTJIPAYRQ8WG41ELID8FC/PFZ+VGDNBDVYEXCIIO4NBE9CNV4WFYCPC DC7V0SR3WK1GDYWP2IEV8IZ3CDGWN8NNWIGJYYLXX6JO85LQJCDZXSHJIGYBQIEWCKFLJSCL 3MRXNLBWCMIYI6UEZPEHMLSFR3GLGNH9GA9DO/BUT4NAJUJIAOQZMPREFWAED3WT7ADTW6+W UFMIRSOMXICSJLKSPKWXMXEPGNTOTTELXXYIYCOKC34PAKCSBNTD75JNZUIONHRMZRLJLMVH R/SEKZ0N4UXKJ+JVTQ94Q2EWVAAYMPNUNATM4T8NNAQJVRG+PWIPOH8FWBW0O4DWLBOPLB8Y VEJECRSAIU38U1J/+PQANKRTHQ1N2DDDFCY12ZOIPKVJGCMU/K1/ONWAXYU28HQM0KQD7M6D YTVPY6YES/7VM8QTZ2RJHVFO5/6/PPQI4+FEU5FUDEVDPHSPB8CH+WVVLCIWRLXMVPVLIZHI K9RZRZTHURM09GMCTKOXHAVPXXKBUEWRZULLTIOUAS13OEYF6AW0RP7+GPBPXDEEKUCUVJFB RNQQEM4AJONRS9DX9MZUU7D7PRM5VWDTE6OIPOXKC3U=
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON CHECK_BACKGROUND_JOBS TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE TA_GATHER_TIMESHEETS WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON TA_GATHER_TIMESHEETS TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE TS_AUDIT WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON TS_AUDIT TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE PV_OPEN_PROJECT WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON PV_OPEN_PROJECT TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE SOURCE_VERSION WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 6E A6 0OXP8U9TMFMVNKXF0ZNPACR5MJCWG5NNM7+FMR2YWFZNMYIYWJ/WKMEYNJPS/OYJPH2YAQZN QAYQEEPMDQVIAWCLYPCBNAT8NLCKMELAPFKCJTTFA2PI6UCH3UDMY+L3N2TRRGTRJS33RIXK RSQCCK9TKH2MQFP9CQ==
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON SOURCE_VERSION TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE ACTIVITY_COPY_API WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 13D 113 1ZCVB3XG5IADNKFLKBF/XK9P7MQWGWFKF8VWFHTPMNSWPEFT/FCNPR1VOOKU8UGJPV6D6BLY FVCVWKG8+AOIVY5QQ+DJ3MMCKYWDOU8MIA777RDFX9/WSX5RFVXMFAVCERPXL+KUJ3JITJFQ T3RKSGHC6FMSNUO58KK3IO48RMMAUGXKMO6RB281YKBPJC2M4WFAUNN6IRUAEYDOOAHDWSSE S5J8YM9DHKNHWW7QG09FA3ONRPGZY/TMORXJ5NQLOVW3ILAKVK5MRJQ=
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON ACTIVITY_COPY_API TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE SYNC_BASELINE_TASKS WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON SYNC_BASELINE_TASKS TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE OBS_MERGE_DELETE WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON OBS_MERGE_DELETE TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE CREATE_PROJECT_TEMPLATE WRAPPED 
 A000000 1 ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD 7 5A8 333 4BI+NYVDGDQGSSS6+PJHYSLP/YAWG/DDBUOTFC/NX7ZGH8VNUQRIK/XSE/JGV72UEDEBCNPR ISWNJ5NZL1Z4/QQTE7ZH/KP34P9HMIT2CLDRA4TFF2YPAEDH8AIH5OZ2QBGGGBZHGHA5U2Y3 SBLGITA0D7YN8S+EBK4CPFL1W2I9JAVCN760LH78INLFEWLZBHQTTBXGF52E9ZLPZRRUG0DZ 1GH8L5NODM0VALRAM9UOQRDHFKDIWYPK7LOPZ3YP656GVMFUNSZSDLM2JPZI9E/CI+GVAQ2A OI/HSQU/FLMIFR+9TN01EA9T1WS55MXKNPYKF7FANIVG41YX9SLHHDKFXIXL0BEIQBUHUGKJ TCHWDTRVOW8PD/W5/MENI5PPDTGWXOYVVSWQAD4DLR3EQJ8LG1D0BD7KMXTDCQUBEXCPJPOI XFT0SEPXWTBFADDCH9TCMNDXPRJJ62XMBMEWVG4DYXD1SZAGRAHDCXC0HXNYGD2GWFBTIUXM CLPE/YAPUX7DJSJETZV39JUDMSGANQD5ICYWXH+TWIIMMZIRO9TYIF0LPOYVBSAUJK7AIDZL /ZZW+NPL73L8D3RUCNLYQWSWEXJHBDHAM2HDACYEHX3MFVGQ+NCOHV/G/7GHV4SLJUJ1494L +IVFWYFRFJQZHA7HCAUX3CE9AYCOJPADNEZ4LECGIWEESGLCWISWO0SBBSZXBLG/O1LGMRNF MFPEGYCF9IGWV12NHADAPYTU0ZC0TS/P+N6HSUMDFOMIHW61KR4XMI2FD0IWVPJFN6HR2OIQ XDJKD7YSMZQ9F9C=
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON CREATE_PROJECT_TEMPLATE TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE PROCEDURE CREATE_PROJECT_FROM_TEMPLATE WRAPPED 

<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT EXECUTE ON CREATE_PROJECT_FROM_TEMPLATE TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE FORCE VIEW PROJRSRC_VIEW
  AS
 SELECT TK.RSRC_ID, TK.PROJ_ID
 FROM TASK TK
 WHERE TK.RSRC_ID IS NOT NULL
 UNION 
 SELECT TR.RSRC_ID, TR.PROJ_ID
 FROM TASKRSRC TR
 WHERE TR.RSRC_ID IS NOT NULL 
 UNION 
 SELECT PE.RSRC_ID, PE.PROJ_ID
 FROM PROJEST PE
 WHERE PE.RSRC_ID IS NOT NULL 
 UNION
 SELECT PS.RSRC_ID, PS.PROJ_ID
 FROM PROJISSU PS
 WHERE PS.RSRC_ID IS NOT NULL 
 UNION
 SELECT WR.RSRC_ID, WR.PROJ_ID
 FROM WBSRSRC WR
 WHERE WR.RSRC_ID IS NOT NULL
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT SELECT ON PROJRSRC_VIEW TO PRIVPRM$PM
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] CREATE OR REPLACE FORCE VIEW PROJROLE_VIEW
  AS
 SELECT TR.ROLE_ID, TR.PROJ_ID
 FROM TASKRSRC TR
 WHERE TR.ROLE_ID IS NOT NULL
 UNION 
 SELECT R.ROLE_ID, PR.PROJ_ID
 FROM PROJRSRC_VIEW  PR, RSRC R
 WHERE R.ROLE_ID IS NOT NULL 
 AND R.RSRC_ID = PR.RSRC_ID
 UNION
 SELECT  R.ROLE_ID, PR.PROJ_ID
 FROM PROJRSRC_VIEW PR,  RSRCROLE R
 WHERE R.ROLE_ID IS NOT NULL 
 AND R.RSRC_ID = PR.RSRC_ID
<09.01.2017 13:01:10> [INFO] [2017-09-01 13:01:10] GRANT SELECT ON PROJROLE_VIEW TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW PROJRSRCROLE_VIEW
  AS
 SELECT RR.RSRC_ID, RR.ROLE_ID, PRO.PROJ_ID
 FROM PROJROLE_VIEW PRO,  RSRCROLE RR
 WHERE  RR.ROLE_ID = PRO.ROLE_ID
 UNION 
 SELECT  RR.RSRC_ID, RR.ROLE_ID, PR.PROJ_ID
 FROM PROJRSRC_VIEW PR, RSRCROLE RR
 WHERE RR.RSRC_ID = PR.RSRC_ID
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON PROJRSRCROLE_VIEW TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW PROJSHAR_BL_VIEW
 AS
 SELECT P.PROJ_ID, SESSION_ID, ACCESS_LEVEL, LOAD_STATUS
 FROM  PROJECT P, PROJSHAR PS
 WHERE PS.PROJ_ID = P.PROJ_ID
 OR PS.PROJ_ID = P.ORIG_PROJ_ID
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON PROJSHAR_BL_VIEW TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW PROJRSRC_PS_VIEW
 AS
 SELECT TK.RSRC_ID, TK.PROJ_ID, PS.SESSION_ID, PS.LOAD_STATUS
 FROM TASK TK, PROJSHAR PS
 WHERE TK.RSRC_ID IS NOT NULL
 AND PS.PROJ_ID = TK.PROJ_ID
 UNION
 SELECT TR.RSRC_ID, TR.PROJ_ID, PS.SESSION_ID, PS.LOAD_STATUS
 FROM TASKRSRC TR, PROJSHAR PS
 WHERE TR.RSRC_ID IS NOT NULL
 AND PS.PROJ_ID = TR.PROJ_ID
 UNION
 SELECT PE.RSRC_ID, PE.PROJ_ID, PS.SESSION_ID, PS.LOAD_STATUS
 FROM PROJEST PE, PROJSHAR PS
 WHERE PE.RSRC_ID IS NOT NULL
 AND PS.PROJ_ID = PE.PROJ_ID
 UNION
 SELECT PI.RSRC_ID, PI.PROJ_ID, PS.SESSION_ID, PS.LOAD_STATUS
 FROM PROJISSU PI, PROJSHAR PS
 WHERE PI.RSRC_ID IS NOT NULL
 AND PS.PROJ_ID = PI.PROJ_ID
 UNION
 SELECT WR.RSRC_ID, WR.PROJ_ID, PS.SESSION_ID, PS.LOAD_STATUS
 FROM WBSRSRC WR, PROJSHAR PS
 WHERE WR.RSRC_ID IS NOT NULL
 AND PS.PROJ_ID = WR.PROJ_ID
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON PROJRSRC_PS_VIEW TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW PROJROLE_PS_VIEW
 AS
 SELECT TR.ROLE_ID, TR.PROJ_ID, PS.SESSION_ID, PS.LOAD_STATUS
 FROM TASKRSRC TR, PROJSHAR PS
 WHERE TR.ROLE_ID IS NOT NULL 
 AND PS.PROJ_ID = TR.PROJ_ID
 UNION 
 SELECT R.ROLE_ID, PR.PROJ_ID, PR.SESSION_ID, PR.LOAD_STATUS
 FROM PROJRSRC_PS_VIEW PR,RSRC R
 WHERE R.ROLE_ID IS NOT NULL
 AND R.RSRC_ID = PR.RSRC_ID
 UNION
 SELECT RS.ROLE_ID, PR.PROJ_ID, PR.SESSION_ID, PR.LOAD_STATUS
 FROM RSRCROLE RS,  PROJRSRC_PS_VIEW PR
 WHERE RS.ROLE_ID IS NOT NULL
 AND RS.RSRC_ID = PR.RSRC_ID
 UNION
 SELECT WR.ROLE_ID, PS.PROJ_ID, PS.SESSION_ID, PS.LOAD_STATUS
 FROM WBSRSRC WR, PROJSHAR PS
 WHERE WR.ROLE_ID IS NOT NULL
 AND PS.PROJ_ID = WR.PROJ_ID
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON PROJROLE_PS_VIEW TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW PROJRSRCROLE_PS_VIEW
 AS
 SELECT RR.RSRC_ID, RR.ROLE_ID, PRO.PROJ_ID, PRO.SESSION_ID, PRO.LOAD_STATUS
 FROM PROJROLE_PS_VIEW PRO, RSRCROLE RR
 WHERE RR.ROLE_ID = PRO.ROLE_ID
 UNION 
 SELECT RR.RSRC_ID, RR.ROLE_ID, PR.PROJ_ID, PR.SESSION_ID, PR.LOAD_STATUS
 FROM PROJRSRC_PS_VIEW PR, RSRCROLE RR
 WHERE RR.RSRC_ID = PR.RSRC_ID
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON PROJRSRCROLE_PS_VIEW TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW PFLOAD_VIEW
 AS
 SELECT PRF.PFOLIO_ID, PW.WBS_ID, PW.PROJ_ID
 FROM PRPFOLIO PRF, PROJWBS PW
 WHERE PRF.WBS_ID = PW.WBS_ID
 UNION
 SELECT 0, PW.WBS_ID, PW.PROJ_ID
 FROM PROJWBS PW, PROJECT P
 WHERE PW.PROJ_NODE_FLAG = 'Y'
 AND PW.PROJ_ID = P.PROJ_ID
 AND P.PROJECT_FLAG ='N'
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON PFLOAD_VIEW TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW PFLOAD_IP_VIEW
 AS
 SELECT PRF.PFOLIO_ID, PW.WBS_ID, PW.PROJ_ID
 FROM PROJWBS PW, PRPFOLIO PRF
 WHERE PRF.WBS_ID = PW.WBS_ID
 UNION
 SELECT PRF.PFOLIO_ID, PW.WBS_ID, PW.PROJ_ID
 FROM PROJWBS PW, PROJWBS PW2, PRPFOLIO PRF
 WHERE PW2.WBS_ID = PRF.WBS_ID
 AND PW.WBS_ID = PW2.PARENT_WBS_ID
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON PFLOAD_IP_VIEW TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW PFLOAD_UACCESS_VIEW
 AS
 SELECT PRF.PFOLIO_ID, PW.WBS_ID, PW.PROJ_ID, UA.USER_ID, UA.ACCESS_FLAG
 FROM PRPFOLIO PRF, PROJWBS PW, UACCESS UA
 WHERE PRF.WBS_ID = PW.WBS_ID
 AND PW.PROJ_ID = UA.PROJ_ID
 UNION
 SELECT 0, PW.WBS_ID, PW.PROJ_ID, UA.USER_ID, UA.ACCESS_FLAG
 FROM PROJWBS PW, PROJECT P, UACCESS UA
 WHERE PW.PROJ_NODE_FLAG = 'Y'
 AND PW.PROJ_ID = P.PROJ_ID
 AND P.PROJECT_FLAG ='N'
 AND PW.PROJ_ID = UA.PROJ_ID
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON PFLOAD_UACCESS_VIEW TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW PFLOAD_IP_UACCESS_VIEW
 AS
 SELECT PRF.PFOLIO_ID, PW.WBS_ID, PW.PROJ_ID, UA.USER_ID, UA.ACCESS_FLAG
 FROM PROJWBS PW, PRPFOLIO PRF, UACCESS UA
 WHERE PRF.WBS_ID = PW.WBS_ID
 AND PW.PROJ_ID = UA.PROJ_ID
 UNION
 SELECT PRF.PFOLIO_ID, PW.WBS_ID, PW.PROJ_ID, UA.USER_ID, UA.ACCESS_FLAG
 FROM 
 PROJWBS PW, PROJWBS PW2, PRPFOLIO PRF, UACCESS UA
 WHERE PW2.WBS_ID = PRF.WBS_ID
 AND PW.WBS_ID = PW2.PARENT_WBS_ID
 AND PW.PROJ_ID = UA.PROJ_ID
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON PFLOAD_IP_UACCESS_VIEW TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW OPENING_OBS
 AS
 SELECT OBS_ID FROM DLTOBS
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON OPENING_OBS TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW OPENING_ROLE
 AS
 SELECT ROLE_ID FROM DLTROLE
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON OPENING_ROLE TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW OPENING_ACCOUNT
 AS
 SELECT ACCT_ID FROM DLTACCT
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON OPENING_ACCOUNT TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW OPENING_USERS
 AS
 SELECT USER_ID FROM DLTUSER
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON OPENING_USERS TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW OPENING_RSRC
 AS
 SELECT RSRC_ID FROM DLTRSRC
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON OPENING_RSRC TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW OPENING_ACTVCODE
 AS
 SELECT ACTV_CODE_ID FROM DLTACTV
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON OPENING_ACTVCODE TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW OPENING_RSRCROLE
 AS
 SELECT RSRC_ID,ROLE_ID FROM DLTRSRL
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON OPENING_RSRCROLE TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_PROJ_BY_WEEK
 AS
 SELECT PROJ_ID, WEEK_START , SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY PROJ_ID, WEEK_START
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_PROJ_BY_WEEK TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_PROJ_BY_MONTH
 AS
 SELECT PROJ_ID, MONTH_START, SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY PROJ_ID, MONTH_START
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_PROJ_BY_MONTH TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_PROJ_BY_QTR
 AS
 SELECT PROJ_ID, TO_DATE('0'|| TO_CHAR(MONTH_START, 'Q' )*3-2 || '-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
 QTR, SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY PROJ_ID, TO_DATE('0'|| TO_CHAR(MONTH_START, 'Q' )*3-2 || '-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_PROJ_BY_QTR TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_PROJ_BY_YEAR
 AS
 SELECT PROJ_ID, TO_DATE('01-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY') YEAR,
 SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY  PROJ_ID, TO_DATE('01-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_PROJ_BY_YEAR TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_RSRC_BY_WEEK
 AS
 SELECT RSRC_ID, WEEK_START , SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY RSRC_ID, WEEK_START
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_RSRC_BY_WEEK TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_RSRC_BY_MONTH
 AS
 SELECT RSRC_ID, MONTH_START, SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY RSRC_ID, MONTH_START
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_RSRC_BY_MONTH TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_RSRC_BY_QTR
 AS
 SELECT RSRC_ID, TO_DATE('0'|| TO_CHAR(MONTH_START, 'Q' )*3-2 || '-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
 QTR, SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY RSRC_ID, TO_DATE('0'|| TO_CHAR(MONTH_START, 'Q' )*3-2 || '-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_RSRC_BY_QTR TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_RSRC_BY_YEAR
 AS
 SELECT RSRC_ID, TO_DATE('01-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY') YEAR,
 SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY  RSRC_ID, TO_DATE('01-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_RSRC_BY_YEAR TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_ROLE_BY_WEEK
 AS
 SELECT ROLE_ID, WEEK_START , SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY ROLE_ID, WEEK_START
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_ROLE_BY_WEEK TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_ROLE_BY_MONTH
 AS
 SELECT ROLE_ID, MONTH_START, SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY ROLE_ID, MONTH_START
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_ROLE_BY_MONTH TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_ROLE_BY_QTR
 AS
 SELECT ROLE_ID, TO_DATE('0'|| TO_CHAR(MONTH_START, 'Q' )*3-2 || '-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
 QTR, SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY ROLE_ID, TO_DATE('0'|| TO_CHAR(MONTH_START, 'Q' )*3-2 || '-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_ROLE_BY_QTR TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_ROLE_BY_YEAR
 AS
 SELECT ROLE_ID, TO_DATE('01-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY') YEAR,
 SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY  ROLE_ID, TO_DATE('01-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_ROLE_BY_YEAR TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_PROJRSRC_WEEK
 (PROJ_ID, RSRC_ID,  WEEK_START, PROJECT_SUMM_QTY)
 AS 
 SELECT PROJ_ID, RSRC_ID,  WEEK_START , SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY PROJ_ID,  RSRC_ID, WEEK_START
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_PROJRSRC_WEEK TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_PROJRSRC_MON
 (PROJ_ID, RSRC_ID,  MONTH_START, PROJECT_SUMM_QTY)
 AS 
 SELECT PROJ_ID, RSRC_ID,  MONTH_START, SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY PROJ_ID, RSRC_ID, MONTH_START
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_PROJRSRC_MON TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_PROJRSRC_QTR
 (PROJ_ID, RSRC_ID,  QTR, PROJECT_SUMM_QTY)
 AS 
 SELECT PROJ_ID, RSRC_ID,  TO_DATE('0'|| TO_CHAR(MONTH_START, 'Q' )*3-2 || '-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
 QTR, SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY PROJ_ID,  RSRC_ID, TO_DATE('0'|| TO_CHAR(MONTH_START, 'Q' )*3-2 || '-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_PROJRSRC_QTR TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_PROJRSRC_YEAR
 (PROJ_ID, RSRC_ID,  YEAR, PROJECT_SUMM_QTY)
 AS 
 SELECT PROJ_ID, RSRC_ID,  TO_DATE('01-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY') YEAR,
 SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY  PROJ_ID,  RSRC_ID, TO_DATE('01-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_PROJRSRC_YEAR TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_PROJROLE_WEEK
 (PROJ_ID, ROLE_ID, WEEK_START, PROJECT_SUMM_QTY)
 AS 
 SELECT PROJ_ID, ROLE_ID,  WEEK_START , SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY PROJ_ID,  ROLE_ID, WEEK_START
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_PROJROLE_WEEK TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_PROJROLE_MON
 (PROJ_ID, ROLE_ID, MONTH_START, PROJECT_SUMM_QTY)
 AS 
 SELECT PROJ_ID, ROLE_ID,  MONTH_START, SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY PROJ_ID, ROLE_ID, MONTH_START
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_PROJROLE_MON TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_PROJROLE_QTR
 (PROJ_ID, ROLE_ID, QTR, PROJECT_SUMM_QTY)
 AS 
 SELECT PROJ_ID, ROLE_ID,  TO_DATE('0'|| TO_CHAR(MONTH_START, 'Q' )*3-2 || '-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
 QTR, SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY PROJ_ID,  ROLE_ID, TO_DATE('0'|| TO_CHAR(MONTH_START, 'Q' )*3-2 || '-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_PROJROLE_QTR TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_BY_PROJROLE_YEAR
 (PROJ_ID, ROLE_ID, YEAR, PROJECT_SUMM_QTY)
 AS 
 SELECT PROJ_ID, ROLE_ID,  TO_DATE('01-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY') YEAR,
 SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY  PROJ_ID,  ROLE_ID, TO_DATE('01-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_BY_PROJROLE_YEAR TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_SUMMARY_BY_MON
 (PROJ_ID, RSRC_ID, ROLE_ID, MONTH_START, PROJECT_SUMM_QTY)
 AS 
 SELECT PROJ_ID, RSRC_ID, ROLE_ID,  MONTH_START, SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY PROJ_ID, RSRC_ID, ROLE_ID, MONTH_START
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_SUMMARY_BY_MON TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_SUMMARY_BY_QTR
 (PROJ_ID, RSRC_ID, ROLE_ID, QTR, PROJECT_SUMM_QTY)
 AS 
 SELECT PROJ_ID, RSRC_ID, ROLE_ID,  TO_DATE('0'|| TO_CHAR(MONTH_START, 'Q' )*3-2 || '-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
 QTR, SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY PROJ_ID, RSRC_ID, ROLE_ID, TO_DATE('0'|| TO_CHAR(MONTH_START, 'Q' )*3-2 || '-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_SUMMARY_BY_QTR TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_SUMMARY_BY_WEEK
 (PROJ_ID, RSRC_ID, ROLE_ID, WEEK_START, PROJECT_SUMM_QTY)
 AS 
 SELECT PROJ_ID, RSRC_ID, ROLE_ID,  WEEK_START , SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY PROJ_ID, RSRC_ID,  ROLE_ID, WEEK_START
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_SUMMARY_BY_WEEK TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSGN_SUMMARY_BY_YEAR
 (PROJ_ID, RSRC_ID, ROLE_ID, YEAR, PROJECT_SUMM_QTY)
 AS 
 SELECT PROJ_ID, RSRC_ID, ROLE_ID,  TO_DATE('01-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY') YEAR,
 SUM(QTY) PROJECT_SUMM_QTY
 FROM WBSRSRC A, WBSRSRC_QTY B 
 WHERE A.WBSRSRC_ID = B.WBSRSRC_ID
 AND A.DELETE_SESSION_ID IS NULL AND B.DELETE_SESSION_ID IS NULL
 GROUP BY  PROJ_ID, RSRC_ID,  ROLE_ID, TO_DATE('01-01-' || TO_CHAR(MONTH_START,'YYYY'),'MM-DD-YYYY')
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSGN_SUMMARY_BY_YEAR TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSN_BY_PROJ_BY_FP
 AS
 SELECT PROJ_ID, FIN_DATES_ID, SUM(PROJ_SUMM_QTY) PROJ_SUMM_QTY
 FROM  (SELECT R.PROJ_ID, Q.FIN_DATES_ID1 FIN_DATES_ID, Q.FIN_QTY1 PROJ_SUMM_QTY
        FROM WBSRSRC_QTY Q INNER JOIN
             WBSRSRC R ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
             PROJECT P ON R.PROJ_ID = P.PROJ_ID
        WHERE (Q.FIN_DATES_ID1 IS NOT NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL)
        UNION ALL
        SELECT R.PROJ_ID, Q.FIN_DATES_ID2 FIN_DATES_ID, Q.FIN_QTY2 PROJ_SUMM_QTY
        FROM WBSRSRC_QTY Q INNER JOIN
             WBSRSRC R ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
             PROJECT P ON R.PROJ_ID = P.PROJ_ID
        WHERE (Q.FIN_DATES_ID2 IS NOT NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL)
        UNION ALL
        SELECT R.PROJ_ID, F.FIN_DATES_ID, Q.QTY PROJ_SUMM_QTY
        FROM WBSRSRC_QTY Q INNER JOIN
             WBSRSRC R ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
             FINDATES F ON Q.WEEK_START >= F.START_DATE AND Q.WEEK_START <= F.END_DATE INNER JOIN
             PROJECT P ON R.PROJ_ID = P.PROJ_ID
        WHERE (TO_NUMBER(TO_CHAR(Q.MONTH_START,'MM')) = TO_NUMBER(TO_CHAR(Q.WEEK_START,'MM'))) AND (Q.FIN_DATES_ID1 IS NULL) AND (Q.FIN_DATES_ID2 IS NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL) AND (F.DELETE_SESSION_ID IS NULL)
        UNION ALL
        SELECT R.PROJ_ID, F.FIN_DATES_ID, Q.QTY PROJ_SUMM_QTY
        FROM WBSRSRC_QTY Q INNER JOIN
             WBSRSRC R ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
             FINDATES F ON Q.MONTH_START >= F.START_DATE AND Q.MONTH_START <= F.END_DATE INNER JOIN
             PROJECT P ON R.PROJ_ID = P.PROJ_ID
        WHERE (TO_NUMBER(TO_CHAR(Q.MONTH_START,'MM')) <> TO_NUMBER(TO_CHAR(Q.WEEK_START,'MM'))) AND (Q.FIN_DATES_ID1 IS NULL) AND (Q.FIN_DATES_ID2 IS NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL) AND (F.DELETE_SESSION_ID IS NULL)) X
 GROUP BY PROJ_ID, FIN_DATES_ID
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSN_BY_PROJ_BY_FP TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSN_BY_PROJROLE_BY_FP
 AS 
 SELECT PROJ_ID, ROLE_ID, FIN_DATES_ID, SUM(PROJ_SUMM_QTY) PROJ_SUMM_QTY
 FROM (SELECT R.PROJ_ID, R.ROLE_ID, Q.FIN_DATES_ID1 FIN_DATES_ID, Q.FIN_QTY1 PROJ_SUMM_QTY
       FROM WBSRSRC_QTY Q INNER JOIN
            WBSRSRC R ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
            PROJECT P ON R.PROJ_ID = P.PROJ_ID
       WHERE (Q.FIN_DATES_ID1 IS NOT NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL)
       UNION ALL
       SELECT R.PROJ_ID, R.ROLE_ID, Q.FIN_DATES_ID2 FIN_DATES_ID, Q.FIN_QTY2 PROJ_SUMM_QTY
       FROM WBSRSRC_QTY Q INNER JOIN
            WBSRSRC R ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
            PROJECT P ON R.PROJ_ID = P.PROJ_ID
       WHERE (Q.FIN_DATES_ID2 IS NOT NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL)
       UNION ALL
       SELECT R.PROJ_ID, R.ROLE_ID, F.FIN_DATES_ID, Q.QTY PROJ_SUMM_QTY
       FROM WBSRSRC_QTY Q INNER JOIN
            WBSRSRC R ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
            FINDATES F ON Q.WEEK_START >= F.START_DATE AND Q.WEEK_START <= F.END_DATE INNER JOIN
            PROJECT P ON R.PROJ_ID = P.PROJ_ID
       WHERE (TO_NUMBER(TO_CHAR(Q.MONTH_START,'MM')) = TO_NUMBER(TO_CHAR(Q.WEEK_START,'MM'))) AND (Q.FIN_DATES_ID1 IS NULL) AND (Q.FIN_DATES_ID2 IS NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL) AND (F.DELETE_SESSION_ID IS NULL)
       UNION ALL
       SELECT R.PROJ_ID, R.ROLE_ID, F.FIN_DATES_ID, Q.QTY PROJ_SUMM_QTY
       FROM WBSRSRC_QTY Q INNER JOIN
            WBSRSRC R ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
            FINDATES F ON Q.MONTH_START >= F.START_DATE AND Q.MONTH_START <= F.END_DATE INNER JOIN
            PROJECT P ON R.PROJ_ID = P.PROJ_ID
       WHERE (TO_NUMBER(TO_CHAR(Q.MONTH_START,'MM')) <> TO_NUMBER(TO_CHAR(Q.WEEK_START,'MM'))) AND (Q.FIN_DATES_ID1 IS NULL) AND (Q.FIN_DATES_ID2 IS NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL) AND (F.DELETE_SESSION_ID IS NULL)) X
 GROUP BY PROJ_ID, ROLE_ID, FIN_DATES_ID
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSN_BY_PROJROLE_BY_FP TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSN_BY_PROJRSRC_BY_FP
 AS 
 SELECT PROJ_ID, RSRC_ID, FIN_DATES_ID, SUM(PROJ_SUMM_QTY) PROJ_SUMM_QTY
 FROM (SELECT R.PROJ_ID, R.RSRC_ID, Q.FIN_DATES_ID1 FIN_DATES_ID, Q.FIN_QTY1 PROJ_SUMM_QTY
       FROM WBSRSRC R INNER JOIN
            WBSRSRC_QTY Q ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
            PROJECT P ON R.PROJ_ID = P.PROJ_ID
       WHERE (Q.FIN_DATES_ID1 IS NOT NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL)
       UNION ALL
       SELECT R.PROJ_ID, R.RSRC_ID, Q.FIN_DATES_ID2 FIN_DATES_ID, Q.FIN_QTY2 PROJ_SUMM_QTY
       FROM WBSRSRC R INNER JOIN
            WBSRSRC_QTY Q ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
            PROJECT P ON R.PROJ_ID = P.PROJ_ID
       WHERE (Q.FIN_DATES_ID2 IS NOT NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL)
       UNION ALL
       SELECT R.PROJ_ID, R.RSRC_ID, F.FIN_DATES_ID, Q.QTY PROJ_SUMM_QTY
       FROM WBSRSRC R INNER JOIN
            WBSRSRC_QTY Q ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
            FINDATES F ON Q.WEEK_START >= F.START_DATE AND Q.WEEK_START <= F.END_DATE INNER JOIN
            PROJECT P ON R.PROJ_ID = P.PROJ_ID
       WHERE (TO_NUMBER(TO_CHAR(Q.MONTH_START,'MM')) = TO_NUMBER(TO_CHAR(Q.WEEK_START,'MM'))) AND (Q.FIN_DATES_ID1 IS NULL) AND (Q.FIN_DATES_ID2 IS NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL) AND (F.DELETE_SESSION_ID IS NULL)
       UNION ALL
       SELECT R.PROJ_ID, R.RSRC_ID, F.FIN_DATES_ID, Q.QTY PROJ_SUMM_QTY
       FROM WBSRSRC R INNER JOIN
            WBSRSRC_QTY Q ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
            FINDATES F ON Q.MONTH_START >= F.START_DATE AND Q.MONTH_START <= F.END_DATE INNER JOIN
            PROJECT P ON R.PROJ_ID = P.PROJ_ID
       WHERE (TO_NUMBER(TO_CHAR(Q.MONTH_START,'MM')) <> TO_NUMBER(TO_CHAR(Q.WEEK_START,'MM'))) AND (Q.FIN_DATES_ID1 IS NULL) AND (Q.FIN_DATES_ID2 IS NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL) AND (F.DELETE_SESSION_ID IS NULL)) X
 GROUP BY PROJ_ID, RSRC_ID, FIN_DATES_ID
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSN_BY_PROJRSRC_BY_FP TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE FORCE VIEW WBSRSRC_ASSN_SUMMARY_BY_FP
 AS 
 SELECT PROJ_ID, ROLE_ID, RSRC_ID, FIN_DATES_ID, SUM(PROJ_SUMM_QTY) PROJ_SUMM_QTY
 FROM (SELECT R.PROJ_ID, R.ROLE_ID, R.RSRC_ID, Q.FIN_DATES_ID1 FIN_DATES_ID, Q.FIN_QTY1 PROJ_SUMM_QTY
       FROM WBSRSRC_QTY Q INNER JOIN
            WBSRSRC R ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
            PROJECT P ON R.PROJ_ID = P.PROJ_ID
       WHERE (Q.FIN_DATES_ID1 IS NOT NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL)
       UNION ALL
       SELECT R.PROJ_ID, R.ROLE_ID, R.RSRC_ID, Q.FIN_DATES_ID2 FIN_DATES_ID, Q.FIN_QTY2 PROJ_SUMM_QTY
       FROM WBSRSRC_QTY Q INNER JOIN
            WBSRSRC R ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
            PROJECT P ON R.PROJ_ID = P.PROJ_ID
       WHERE (Q.FIN_DATES_ID2 IS NOT NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL)
       UNION ALL
       SELECT R.PROJ_ID, R.ROLE_ID, R.RSRC_ID, F.FIN_DATES_ID, Q.QTY PROJ_SUMM_QTY
       FROM WBSRSRC_QTY Q INNER JOIN
            WBSRSRC R ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
            FINDATES F ON Q.WEEK_START >= F.START_DATE AND Q.WEEK_START <= F.END_DATE INNER JOIN
            PROJECT P ON R.PROJ_ID = P.PROJ_ID
       WHERE (TO_NUMBER(TO_CHAR(Q.MONTH_START,'MM')) = TO_NUMBER(TO_CHAR(Q.WEEK_START,'MM'))) AND (Q.FIN_DATES_ID1 IS NULL) AND (Q.FIN_DATES_ID2 IS NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL) AND (F.DELETE_SESSION_ID IS NULL)
       UNION ALL
       SELECT R.PROJ_ID, R.ROLE_ID, R.RSRC_ID, F.FIN_DATES_ID, Q.QTY PROJ_SUMM_QTY
       FROM WBSRSRC_QTY Q INNER JOIN
            WBSRSRC R ON Q.WBSRSRC_ID = R.WBSRSRC_ID INNER JOIN
            FINDATES F ON Q.MONTH_START >= F.START_DATE AND Q.MONTH_START <= F.END_DATE INNER JOIN
            PROJECT P ON R.PROJ_ID = P.PROJ_ID
       WHERE (TO_NUMBER(TO_CHAR(Q.MONTH_START,'MM')) <> TO_NUMBER(TO_CHAR(Q.WEEK_START,'MM'))) AND (Q.FIN_DATES_ID1 IS NULL) AND (Q.FIN_DATES_ID2 IS NULL) AND (P.ORIG_PROJ_ID IS NULL) AND (R.DELETE_SESSION_ID IS NULL) AND (Q.DELETE_SESSION_ID IS NULL) AND (P.DELETE_SESSION_ID IS NULL) AND (F.DELETE_SESSION_ID IS NULL)) X
 GROUP BY PROJ_ID, ROLE_ID, RSRC_ID, FIN_DATES_ID
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] GRANT SELECT ON WBSRSRC_ASSN_SUMMARY_BY_FP TO PRIVPRM$PM
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE TRIGGER PRMAUD_ACCOUNT
 AFTER INSERT OR UPDATE OR DELETE ON ACCOUNT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('ACCOUNT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.ACCT_ID;
     ELSE
     	VPK1 := :NEW.ACCT_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('ACCT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ACCOUNT','ACCT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.ACCT_ID,:NEW.ACCT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACCT_SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('ACCOUNT','ACCT_SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACCT_SEQ_NUM,:NEW.ACCT_SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACCT_SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('ACCOUNT','ACCT_SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACCT_SHORT_NAME,:NEW.ACCT_SHORT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACCT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('ACCOUNT','ACCT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACCT_NAME,:NEW.ACCT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_ACCT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ACCOUNT','PARENT_ACCT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_ACCT_ID,:NEW.PARENT_ACCT_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('ACCT_DESCR') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('ACCOUNT','ACCT_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.ACCT_DESCR,:NEW.ACCT_DESCR); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'ACCOUNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE TRIGGER RT_ACCOUNT_DEL
 BEFORE DELETE ON ACCOUNT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'ACCOUNT',:OLD.ACCT_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:11> [INFO] [2017-09-01 13:01:11] CREATE OR REPLACE TRIGGER RT_ACCOUNT
 BEFORE UPDATE OR INSERT ON ACCOUNT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'ACCOUNT',:OLD.ACCT_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.ACCT_ID)
 			  AND TABLE_NAME = 'ACCOUNT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_ACTVCODE
 AFTER INSERT OR UPDATE OR DELETE ON ACTVCODE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('ACTVCODE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.ACTV_CODE_ID;
     ELSE
     	VPK1 := :NEW.ACTV_CODE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('ACTV_CODE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVCODE','ACTV_CODE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.ACTV_CODE_ID,:NEW.ACTV_CODE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACTV_CODE_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVCODE','ACTV_CODE_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACTV_CODE_TYPE_ID,:NEW.ACTV_CODE_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVCODE','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVCODE','SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SHORT_NAME,:NEW.SHORT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_ACTV_CODE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVCODE','PARENT_ACTV_CODE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_ACTV_CODE_ID,:NEW.PARENT_ACTV_CODE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACTV_CODE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVCODE','ACTV_CODE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACTV_CODE_NAME,:NEW.ACTV_CODE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('COLOR') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVCODE','COLOR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COLOR,:NEW.COLOR); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'ACTVCODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_ACTVCODE_DEL
 BEFORE DELETE ON ACTVCODE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'ACTVCODE',:OLD.ACTV_CODE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_ACTVCODE
 BEFORE UPDATE OR INSERT ON ACTVCODE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'ACTVCODE',:OLD.ACTV_CODE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.ACTV_CODE_ID)
 			  AND TABLE_NAME = 'ACTVCODE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_ACTVTYPE
 AFTER INSERT OR UPDATE OR DELETE ON ACTVTYPE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('ACTVTYPE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.ACTV_CODE_TYPE_ID;
     ELSE
     	VPK1 := :NEW.ACTV_CODE_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('ACTV_CODE_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVTYPE','ACTV_CODE_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.ACTV_CODE_TYPE_ID,:NEW.ACTV_CODE_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACTV_SHORT_LEN') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVTYPE','ACTV_SHORT_LEN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACTV_SHORT_LEN,:NEW.ACTV_SHORT_LEN); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVTYPE','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACTV_CODE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVTYPE','ACTV_CODE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACTV_CODE_TYPE,:NEW.ACTV_CODE_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACTV_CODE_TYPE_SCOPE') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVTYPE','ACTV_CODE_TYPE_SCOPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACTV_CODE_TYPE_SCOPE,:NEW.ACTV_CODE_TYPE_SCOPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVTYPE','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUPER_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('ACTVTYPE','SUPER_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SUPER_FLAG,:NEW.SUPER_FLAG); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'ACTVTYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_ACTVTYPE_DEL
 BEFORE DELETE ON ACTVTYPE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'ACTVTYPE',:OLD.ACTV_CODE_TYPE_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_ACTVTYPE
 BEFORE UPDATE OR INSERT ON ACTVTYPE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'ACTVTYPE',:OLD.ACTV_CODE_TYPE_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.ACTV_CODE_TYPE_ID)
 			  AND TABLE_NAME = 'ACTVTYPE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_ADMIN_CONFIG
 AFTER INSERT OR UPDATE OR DELETE ON ADMIN_CONFIG
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('ADMIN_CONFIG',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.CONFIG_NAME;
     ELSE
     	VPK1 := :NEW.CONFIG_NAME;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('CONFIG_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('ADMIN_CONFIG','CONFIG_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.CONFIG_NAME,:NEW.CONFIG_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('CONFIG_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('ADMIN_CONFIG','CONFIG_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CONFIG_TYPE,:NEW.CONFIG_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('FACTORY_VERSION') THEN	 PRM_AUDIT.AUDIT_DATA ('ADMIN_CONFIG','FACTORY_VERSION',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FACTORY_VERSION,:NEW.FACTORY_VERSION); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_CHANGE_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('ADMIN_CONFIG','LAST_CHANGE_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.LAST_CHANGE_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.LAST_CHANGE_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('CONFIG_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('ADMIN_CONFIG','CONFIG_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CONFIG_VALUE,:NEW.CONFIG_VALUE); END IF;
     IF VOPER <> 'U' OR ( UPDATING('CONFIG_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('ADMIN_CONFIG','CONFIG_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.CONFIG_DATA,:NEW.CONFIG_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'ADMIN_CONFIG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_ADMIN_CONFIG_DEL
 BEFORE DELETE ON ADMIN_CONFIG
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'ADMIN_CONFIG',:OLD.CONFIG_NAME,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_ADMIN_CONFIG
 BEFORE UPDATE OR INSERT ON ADMIN_CONFIG
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'ADMIN_CONFIG',:OLD.CONFIG_NAME,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = :OLD.CONFIG_NAME
 			  AND TABLE_NAME = 'ADMIN_CONFIG';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_BASETYPE
 AFTER INSERT OR UPDATE OR DELETE ON BASETYPE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('BASETYPE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.BASE_TYPE_ID;
     ELSE
     	VPK1 := :NEW.BASE_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('BASE_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('BASETYPE','BASE_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.BASE_TYPE_ID,:NEW.BASE_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_TYPE_SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('BASETYPE','BASE_TYPE_SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_TYPE_SEQ_NUM,:NEW.BASE_TYPE_SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('BASETYPE','BASE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_TYPE,:NEW.BASE_TYPE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'BASETYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_BASETYPE_DEL
 BEFORE DELETE ON BASETYPE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'BASETYPE',:OLD.BASE_TYPE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_BASETYPE
 BEFORE UPDATE OR INSERT ON BASETYPE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'BASETYPE',:OLD.BASE_TYPE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.BASE_TYPE_ID)
 			  AND TABLE_NAME = 'BASETYPE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_BRE_REGISTRY
 AFTER INSERT OR UPDATE OR DELETE ON BRE_REGISTRY
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('BRE_REGISTRY',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.BRE_REGISTRY_ID;
     ELSE
     	VPK1 := :NEW.BRE_REGISTRY_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('BRE_REGISTRY_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('BRE_REGISTRY','BRE_REGISTRY_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.BRE_REGISTRY_ID,:NEW.BRE_REGISTRY_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('IP_ADDRESS') THEN	 PRM_AUDIT.AUDIT_DATA ('BRE_REGISTRY','IP_ADDRESS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.IP_ADDRESS,:NEW.IP_ADDRESS); END IF;
     IF VOPER <> 'U' OR  UPDATING('START_TIME') THEN	 PRM_AUDIT.AUDIT_DATA ('BRE_REGISTRY','START_TIME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.START_TIME,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.START_TIME,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('BRE_REGISTRY','STATUS_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS_CODE,:NEW.STATUS_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('TORCHED_TIME') THEN	 PRM_AUDIT.AUDIT_DATA ('BRE_REGISTRY','TORCHED_TIME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.TORCHED_TIME,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.TORCHED_TIME,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('CONFIG_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('BRE_REGISTRY','CONFIG_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CONFIG_NAME,:NEW.CONFIG_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('CONFIG_CHANGED_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('BRE_REGISTRY','CONFIG_CHANGED_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CONFIG_CHANGED_FLAG,:NEW.CONFIG_CHANGED_FLAG); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'BRE_REGISTRY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_BRE_REGISTRY_DEL
 BEFORE DELETE ON BRE_REGISTRY
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'BRE_REGISTRY',:OLD.BRE_REGISTRY_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_BRE_REGISTRY
 BEFORE UPDATE OR INSERT ON BRE_REGISTRY
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'BRE_REGISTRY',:OLD.BRE_REGISTRY_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = :OLD.BRE_REGISTRY_ID
 			  AND TABLE_NAME = 'BRE_REGISTRY';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_BUDGCHNG
 AFTER INSERT OR UPDATE OR DELETE ON BUDGCHNG
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('BUDGCHNG',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.BUDG_CHNG_ID;
     ELSE
     	VPK1 := :NEW.BUDG_CHNG_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('BUDG_CHNG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('BUDGCHNG','BUDG_CHNG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.BUDG_CHNG_ID,:NEW.BUDG_CHNG_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('BUDGCHNG','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('BUDGCHNG','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CHNG_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('BUDGCHNG','CHNG_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.CHNG_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.CHNG_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('CHNG_SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('BUDGCHNG','CHNG_SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CHNG_SHORT_NAME,:NEW.CHNG_SHORT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('CHNG_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('BUDGCHNG','CHNG_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CHNG_COST,:NEW.CHNG_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('CHNG_BY_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('BUDGCHNG','CHNG_BY_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CHNG_BY_NAME,:NEW.CHNG_BY_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('BUDGCHNG','STATUS_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS_CODE,:NEW.STATUS_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('CHNG_DESCR') THEN	 PRM_AUDIT.AUDIT_DATA ('BUDGCHNG','CHNG_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CHNG_DESCR,:NEW.CHNG_DESCR); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'BUDGCHNG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_BUDGCHNG_DEL
 BEFORE DELETE ON BUDGCHNG
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'BUDGCHNG',:OLD.BUDG_CHNG_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_BUDGCHNG
 BEFORE UPDATE OR INSERT ON BUDGCHNG
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'BUDGCHNG',:OLD.BUDG_CHNG_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.BUDG_CHNG_ID)
 			  AND TABLE_NAME = 'BUDGCHNG';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_CALENDAR
 AFTER INSERT OR UPDATE OR DELETE ON CALENDAR
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('CALENDAR',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.CLNDR_ID;
     ELSE
     	VPK1 := :NEW.CLNDR_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('CLNDR_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('CALENDAR','CLNDR_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.CLNDR_ID,:NEW.CLNDR_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEFAULT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('CALENDAR','DEFAULT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEFAULT_FLAG,:NEW.DEFAULT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_PRIVATE') THEN	 PRM_AUDIT.AUDIT_DATA ('CALENDAR','RSRC_PRIVATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_PRIVATE,:NEW.RSRC_PRIVATE); END IF;
     IF VOPER <> 'U' OR  UPDATING('CLNDR_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('CALENDAR','CLNDR_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CLNDR_NAME,:NEW.CLNDR_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('CALENDAR','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_CLNDR_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('CALENDAR','BASE_CLNDR_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_CLNDR_ID,:NEW.BASE_CLNDR_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_CHNG_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('CALENDAR','LAST_CHNG_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.LAST_CHNG_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.LAST_CHNG_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('CLNDR_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('CALENDAR','CLNDR_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CLNDR_TYPE,:NEW.CLNDR_TYPE); END IF;
     IF VOPER <> 'U' OR ( UPDATING('CLNDR_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('CALENDAR','CLNDR_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.CLNDR_DATA,:NEW.CLNDR_DATA); END IF;
     IF VOPER <> 'U' OR  UPDATING('DAY_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('CALENDAR','DAY_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DAY_HR_CNT,:NEW.DAY_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('WEEK_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('CALENDAR','WEEK_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WEEK_HR_CNT,:NEW.WEEK_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('YEAR_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('CALENDAR','YEAR_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.YEAR_HR_CNT,:NEW.YEAR_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('MONTH_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('CALENDAR','MONTH_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MONTH_HR_CNT,:NEW.MONTH_HR_CNT); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'CALENDAR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_CALENDAR_DEL
 BEFORE DELETE ON CALENDAR
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'CALENDAR',:OLD.CLNDR_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_CALENDAR
 BEFORE UPDATE OR INSERT ON CALENDAR
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'CALENDAR',:OLD.CLNDR_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.CLNDR_ID)
 			  AND TABLE_NAME = 'CALENDAR';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_COSTTYPE
 AFTER INSERT OR UPDATE OR DELETE ON COSTTYPE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('COSTTYPE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.COST_TYPE_ID;
     ELSE
     	VPK1 := :NEW.COST_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('COST_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('COSTTYPE','COST_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.COST_TYPE_ID,:NEW.COST_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('COSTTYPE','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('COSTTYPE','COST_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_TYPE,:NEW.COST_TYPE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'COSTTYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_COSTTYPE_DEL
 BEFORE DELETE ON COSTTYPE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'COSTTYPE',:OLD.COST_TYPE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_COSTTYPE
 BEFORE UPDATE OR INSERT ON COSTTYPE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'COSTTYPE',:OLD.COST_TYPE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.COST_TYPE_ID)
 			  AND TABLE_NAME = 'COSTTYPE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_CURRTYPE
 AFTER INSERT OR UPDATE OR DELETE ON CURRTYPE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('CURRTYPE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.CURR_ID;
     ELSE
     	VPK1 := :NEW.CURR_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('CURR_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('CURRTYPE','CURR_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.CURR_ID,:NEW.CURR_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DECIMAL_DIGIT_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('CURRTYPE','DECIMAL_DIGIT_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DECIMAL_DIGIT_CNT,:NEW.DECIMAL_DIGIT_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('CURR_SYMBOL') THEN	 PRM_AUDIT.AUDIT_DATA ('CURRTYPE','CURR_SYMBOL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CURR_SYMBOL,:NEW.CURR_SYMBOL); END IF;
     IF VOPER <> 'U' OR  UPDATING('DECIMAL_SYMBOL') THEN	 PRM_AUDIT.AUDIT_DATA ('CURRTYPE','DECIMAL_SYMBOL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DECIMAL_SYMBOL,:NEW.DECIMAL_SYMBOL); END IF;
     IF VOPER <> 'U' OR  UPDATING('DIGIT_GROUP_SYMBOL') THEN	 PRM_AUDIT.AUDIT_DATA ('CURRTYPE','DIGIT_GROUP_SYMBOL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DIGIT_GROUP_SYMBOL,:NEW.DIGIT_GROUP_SYMBOL); END IF;
     IF VOPER <> 'U' OR  UPDATING('POS_CURR_FMT_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('CURRTYPE','POS_CURR_FMT_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POS_CURR_FMT_TYPE,:NEW.POS_CURR_FMT_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('NEG_CURR_FMT_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('CURRTYPE','NEG_CURR_FMT_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.NEG_CURR_FMT_TYPE,:NEW.NEG_CURR_FMT_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('CURR_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('CURRTYPE','CURR_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CURR_TYPE,:NEW.CURR_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('CURR_SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('CURRTYPE','CURR_SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CURR_SHORT_NAME,:NEW.CURR_SHORT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('GROUP_DIGIT_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('CURRTYPE','GROUP_DIGIT_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GROUP_DIGIT_CNT,:NEW.GROUP_DIGIT_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_EXCH_RATE') THEN	 PRM_AUDIT.AUDIT_DATA ('CURRTYPE','BASE_EXCH_RATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_EXCH_RATE,:NEW.BASE_EXCH_RATE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'CURRTYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_CURRTYPE_DEL
 BEFORE DELETE ON CURRTYPE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'CURRTYPE',:OLD.CURR_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_CURRTYPE
 BEFORE UPDATE OR INSERT ON CURRTYPE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'CURRTYPE',:OLD.CURR_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.CURR_ID)
 			  AND TABLE_NAME = 'CURRTYPE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_DASHBOARD
 AFTER INSERT OR UPDATE OR DELETE ON DASHBOARD
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('DASHBOARD',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.DASHBOARD_ID;
     ELSE
     	VPK1 := :NEW.DASHBOARD_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('DASHBOARD_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DASHBOARD','DASHBOARD_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.DASHBOARD_ID,:NEW.DASHBOARD_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DASHBOARD_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('DASHBOARD','DASHBOARD_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DASHBOARD_NAME,:NEW.DASHBOARD_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DASHBOARD','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TABLE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('DASHBOARD','TABLE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TABLE_NAME,:NEW.TABLE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('FK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DASHBOARD','FK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FK_ID,:NEW.FK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('LOCK_FILTER_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('DASHBOARD','LOCK_FILTER_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LOCK_FILTER_FLAG,:NEW.LOCK_FILTER_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_ROWS_PER_PORTLET') THEN	 PRM_AUDIT.AUDIT_DATA ('DASHBOARD','MAX_ROWS_PER_PORTLET',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_ROWS_PER_PORTLET,:NEW.MAX_ROWS_PER_PORTLET); END IF;
     IF VOPER <> 'U' OR  UPDATING('DASHBOARD_LAYOUT_DATA') THEN	 PRM_AUDIT.AUDIT_DATA ('DASHBOARD','DASHBOARD_LAYOUT_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DASHBOARD_LAYOUT_DATA,:NEW.DASHBOARD_LAYOUT_DATA); END IF;
     IF VOPER <> 'U' OR ( UPDATING('PORTLET_SETTINGS_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('DASHBOARD','PORTLET_SETTINGS_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.PORTLET_SETTINGS_DATA,:NEW.PORTLET_SETTINGS_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'DASHBOARD',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DASHBOARD_DEL
 BEFORE DELETE ON DASHBOARD
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'DASHBOARD',:OLD.DASHBOARD_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DASHBOARD
 BEFORE UPDATE OR INSERT ON DASHBOARD
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'DASHBOARD',:OLD.DASHBOARD_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.DASHBOARD_ID)
 			  AND TABLE_NAME = 'DASHBOARD';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_DASHUSER
 AFTER INSERT OR UPDATE OR DELETE ON DASHUSER
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('DASHUSER',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   VPRM_USER_NAME := PRM_AUDIT.G_PRM_USER_NAME;
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.DASHBOARD_ID;
 VPK2 := :OLD.USER_ID;
     ELSE
     	VPK1 := :NEW.DASHBOARD_ID;
 VPK2 := :NEW.USER_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('DASHBOARD_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DASHUSER','DASHBOARD_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.DASHBOARD_ID,:NEW.DASHBOARD_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DASHUSER','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'DASHUSER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DASHUSER
 BEFORE UPDATE OR INSERT ON DASHUSER
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
   :NEW.UPDATE_USER := PRM_AUDIT.G_PRM_USER_NAME;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.G_PRM_USER_NAME;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'DASHUSER',:OLD.DASHBOARD_ID,:OLD.USER_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.DASHBOARD_ID)
 AND PK2 = TO_CHAR(:OLD.USER_ID)
 			  AND TABLE_NAME = 'DASHUSER';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DASHUSER_DEL
 BEFORE DELETE ON DASHUSER
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'DASHUSER',:OLD.DASHBOARD_ID,:OLD.USER_ID,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_DOCCATG
 AFTER INSERT OR UPDATE OR DELETE ON DOCCATG
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('DOCCATG',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.DOC_CATG_ID;
     ELSE
     	VPK1 := :NEW.DOC_CATG_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('DOC_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCCATG','DOC_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.DOC_CATG_ID,:NEW.DOC_CATG_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCCATG','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('DOC_CATG_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCCATG','DOC_CATG_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DOC_CATG_NAME,:NEW.DOC_CATG_NAME); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'DOCCATG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DOCCATG_DEL
 BEFORE DELETE ON DOCCATG
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'DOCCATG',:OLD.DOC_CATG_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DOCCATG
 BEFORE UPDATE OR INSERT ON DOCCATG
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'DOCCATG',:OLD.DOC_CATG_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.DOC_CATG_ID)
 			  AND TABLE_NAME = 'DOCCATG';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_DOCREVIEW
 AFTER INSERT OR UPDATE OR DELETE ON DOCREVIEW
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('DOCREVIEW',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.DOC_REVIEW_ID;
     ELSE
     	VPK1 := :NEW.DOC_REVIEW_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('DOC_REVIEW_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEW','DOC_REVIEW_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.DOC_REVIEW_ID,:NEW.DOC_REVIEW_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DOC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEW','DOC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DOC_ID,:NEW.DOC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEW','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('REVIEW_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEW','REVIEW_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REVIEW_NAME,:NEW.REVIEW_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('REVIEW_DESCR') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEW','REVIEW_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REVIEW_DESCR,:NEW.REVIEW_DESCR); END IF;
     IF VOPER <> 'U' OR  UPDATING('REVIEW_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEW','REVIEW_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REVIEW_TYPE,:NEW.REVIEW_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('DUE_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEW','DUE_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.DUE_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.DUE_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEW','STATUS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS,:NEW.STATUS); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'DOCREVIEW',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DOCREVIEW_DEL
 BEFORE DELETE ON DOCREVIEW
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'DOCREVIEW',:OLD.DOC_REVIEW_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DOCREVIEW
 BEFORE UPDATE OR INSERT ON DOCREVIEW
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'DOCREVIEW',:OLD.DOC_REVIEW_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.DOC_REVIEW_ID)
 			  AND TABLE_NAME = 'DOCREVIEW';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_DOCREVIEWTASK
 AFTER INSERT OR UPDATE OR DELETE ON DOCREVIEWTASK
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('DOCREVIEWTASK',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.REVIEW_TASK_ID;
     ELSE
     	VPK1 := :NEW.REVIEW_TASK_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('REVIEW_TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEWTASK','REVIEW_TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.REVIEW_TASK_ID,:NEW.REVIEW_TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DOC_REVIEW_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEWTASK','DOC_REVIEW_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DOC_REVIEW_ID,:NEW.DOC_REVIEW_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEWTASK','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('REVIEW_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEWTASK','REVIEW_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.REVIEW_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.REVIEW_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('COMMENTS') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEWTASK','COMMENTS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COMMENTS,:NEW.COMMENTS); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRIORITY') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEWTASK','PRIORITY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRIORITY,:NEW.PRIORITY); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEWTASK','STATUS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS,:NEW.STATUS); END IF;
     IF VOPER <> 'U' OR  UPDATING('ATTACHMENT_UUID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCREVIEWTASK','ATTACHMENT_UUID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ATTACHMENT_UUID,:NEW.ATTACHMENT_UUID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'DOCREVIEWTASK',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DOCREVIEWTASK_DEL
 BEFORE DELETE ON DOCREVIEWTASK
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'DOCREVIEWTASK',:OLD.REVIEW_TASK_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DOCREVIEWTASK
 BEFORE UPDATE OR INSERT ON DOCREVIEWTASK
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'DOCREVIEWTASK',:OLD.REVIEW_TASK_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.REVIEW_TASK_ID)
 			  AND TABLE_NAME = 'DOCREVIEWTASK';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_DOCSTAT
 AFTER INSERT OR UPDATE OR DELETE ON DOCSTAT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('DOCSTAT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.DOC_STATUS_ID;
     ELSE
     	VPK1 := :NEW.DOC_STATUS_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('DOC_STATUS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCSTAT','DOC_STATUS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.DOC_STATUS_ID,:NEW.DOC_STATUS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCSTAT','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('DOC_STATUS_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCSTAT','DOC_STATUS_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DOC_STATUS_CODE,:NEW.DOC_STATUS_CODE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'DOCSTAT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DOCSTAT_DEL
 BEFORE DELETE ON DOCSTAT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'DOCSTAT',:OLD.DOC_STATUS_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DOCSTAT
 BEFORE UPDATE OR INSERT ON DOCSTAT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'DOCSTAT',:OLD.DOC_STATUS_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.DOC_STATUS_ID)
 			  AND TABLE_NAME = 'DOCSTAT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_DOCUMENT
 AFTER INSERT OR UPDATE OR DELETE ON DOCUMENT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('DOCUMENT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.DOC_ID;
     ELSE
     	VPK1 := :NEW.DOC_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('DOC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','DOC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.DOC_ID,:NEW.DOC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DOC_SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','DOC_SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DOC_SEQ_NUM,:NEW.DOC_SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('DELIV_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','DELIV_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DELIV_FLAG,:NEW.DELIV_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('DOC_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','DOC_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DOC_NAME,:NEW.DOC_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_DOC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','PARENT_DOC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_DOC_ID,:NEW.PARENT_DOC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DOC_STATUS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','DOC_STATUS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DOC_STATUS_ID,:NEW.DOC_STATUS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DOC_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','DOC_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DOC_CATG_ID,:NEW.DOC_CATG_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DOC_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','DOC_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.DOC_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.DOC_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('VERSION_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','VERSION_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.VERSION_NAME,:NEW.VERSION_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('GUID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','GUID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GUID,:NEW.GUID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TMPL_GUID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','TMPL_GUID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TMPL_GUID,:NEW.TMPL_GUID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DOC_SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','DOC_SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DOC_SHORT_NAME,:NEW.DOC_SHORT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('AUTHOR_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','AUTHOR_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.AUTHOR_NAME,:NEW.AUTHOR_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRIVATE_LOC') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','PRIVATE_LOC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRIVATE_LOC,:NEW.PRIVATE_LOC); END IF;
     IF VOPER <> 'U' OR  UPDATING('PUBLIC_LOC') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','PUBLIC_LOC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PUBLIC_LOC,:NEW.PUBLIC_LOC); END IF;
     IF VOPER <> 'U' OR ( UPDATING('DOC_CONTENT') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('DOCUMENT','DOC_CONTENT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.DOC_CONTENT,:NEW.DOC_CONTENT); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DOC_MGMT_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','DOC_MGMT_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DOC_MGMT_TYPE,:NEW.DOC_MGMT_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('EXTERNAL_DOC_KEY') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','EXTERNAL_DOC_KEY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EXTERNAL_DOC_KEY,:NEW.EXTERNAL_DOC_KEY); END IF;
     IF VOPER <> 'U' OR  UPDATING('CR_EXTERNAL_DOC_KEY') THEN	 PRM_AUDIT.AUDIT_DATA ('DOCUMENT','CR_EXTERNAL_DOC_KEY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CR_EXTERNAL_DOC_KEY,:NEW.CR_EXTERNAL_DOC_KEY); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'DOCUMENT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DOCUMENT_DEL
 BEFORE DELETE ON DOCUMENT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'DOCUMENT',:OLD.DOC_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_DOCUMENT
 BEFORE UPDATE OR INSERT ON DOCUMENT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'DOCUMENT',:OLD.DOC_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.DOC_ID)
 			  AND TABLE_NAME = 'DOCUMENT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_EXPPROJ
 AFTER INSERT OR UPDATE OR DELETE ON EXPPROJ
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('EXPPROJ',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROJ_ID;
     ELSE
     	VPK1 := :NEW.PROJ_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('EXPPROJ','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('EXP_GROUP') THEN	 PRM_AUDIT.AUDIT_DATA ('EXPPROJ','EXP_GROUP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EXP_GROUP,:NEW.EXP_GROUP); END IF;
     IF VOPER <> 'U' OR  UPDATING('EXP_PROJ_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('EXPPROJ','EXP_PROJ_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EXP_PROJ_NAME,:NEW.EXP_PROJ_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('LOGIN_SUPPLIED_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('EXPPROJ','LOGIN_SUPPLIED_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LOGIN_SUPPLIED_FLAG,:NEW.LOGIN_SUPPLIED_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('EXP_USER_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('EXPPROJ','EXP_USER_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EXP_USER_NAME,:NEW.EXP_USER_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('EXP_PASSWD') THEN	 PRM_AUDIT.AUDIT_DATA ('EXPPROJ','EXP_PASSWD',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EXP_PASSWD,:NEW.EXP_PASSWD); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'EXPPROJ',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_EXPPROJ_DEL
 BEFORE DELETE ON EXPPROJ
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'EXPPROJ',:OLD.PROJ_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_EXPPROJ
 BEFORE UPDATE OR INSERT ON EXPPROJ
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.PROJ_ID)
 		AND TABLE_NAME = 'EXPPROJ';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'EXPPROJ',:OLD.PROJ_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROJ_ID)
 			  AND TABLE_NAME = 'EXPPROJ';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_EXTAPP
 AFTER INSERT OR UPDATE OR DELETE ON EXTAPP
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('EXTAPP',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.APP_ID;
     ELSE
     	VPK1 := :NEW.APP_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('APP_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('EXTAPP','APP_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.APP_ID,:NEW.APP_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('LOGIN_SUPPLY_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('EXTAPP','LOGIN_SUPPLY_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LOGIN_SUPPLY_FLAG,:NEW.LOGIN_SUPPLY_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('APP_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('EXTAPP','APP_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.APP_NAME,:NEW.APP_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('APP_EXE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('EXTAPP','APP_EXE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.APP_EXE_NAME,:NEW.APP_EXE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('EXTAPP','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('APP_USER_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('EXTAPP','APP_USER_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.APP_USER_NAME,:NEW.APP_USER_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('APP_PASSWD') THEN	 PRM_AUDIT.AUDIT_DATA ('EXTAPP','APP_PASSWD',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.APP_PASSWD,:NEW.APP_PASSWD); END IF;
     IF VOPER <> 'U' OR  UPDATING('APP_DATA_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('EXTAPP','APP_DATA_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.APP_DATA_NAME,:NEW.APP_DATA_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('APP_PARM_STRING') THEN	 PRM_AUDIT.AUDIT_DATA ('EXTAPP','APP_PARM_STRING',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.APP_PARM_STRING,:NEW.APP_PARM_STRING); END IF;
     IF VOPER <> 'U' OR  UPDATING('APP_DATA_LOC') THEN	 PRM_AUDIT.AUDIT_DATA ('EXTAPP','APP_DATA_LOC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.APP_DATA_LOC,:NEW.APP_DATA_LOC); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'EXTAPP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_EXTAPP_DEL
 BEFORE DELETE ON EXTAPP
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'EXTAPP',:OLD.APP_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_EXTAPP
 BEFORE UPDATE OR INSERT ON EXTAPP
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'EXTAPP',:OLD.APP_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.APP_ID)
 			  AND TABLE_NAME = 'EXTAPP';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_FACTOR
 AFTER INSERT OR UPDATE OR DELETE ON FACTOR
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('FACTOR',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.FACT_ID;
     ELSE
     	VPK1 := :NEW.FACT_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('FACT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FACTOR','FACT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.FACT_ID,:NEW.FACT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FACT_SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('FACTOR','FACT_SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FACT_SEQ_NUM,:NEW.FACT_SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('FACT_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('FACTOR','FACT_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FACT_TYPE,:NEW.FACT_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('FACT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('FACTOR','FACT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FACT_NAME,:NEW.FACT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEF_FACT_VAL_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FACTOR','DEF_FACT_VAL_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEF_FACT_VAL_ID,:NEW.DEF_FACT_VAL_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('FACT_DESCR') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('FACTOR','FACT_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.FACT_DESCR,:NEW.FACT_DESCR); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'FACTOR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_FACTOR_DEL
 BEFORE DELETE ON FACTOR
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'FACTOR',:OLD.FACT_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_FACTOR
 BEFORE UPDATE OR INSERT ON FACTOR
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'FACTOR',:OLD.FACT_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.FACT_ID)
 			  AND TABLE_NAME = 'FACTOR';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_FACTVAL
 AFTER INSERT OR UPDATE OR DELETE ON FACTVAL
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('FACTVAL',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.FACT_VAL_ID;
     ELSE
     	VPK1 := :NEW.FACT_VAL_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('FACT_VAL_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FACTVAL','FACT_VAL_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.FACT_VAL_ID,:NEW.FACT_VAL_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FACT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FACTVAL','FACT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FACT_ID,:NEW.FACT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FACT_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('FACTVAL','FACT_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FACT_VALUE,:NEW.FACT_VALUE); END IF;
     IF VOPER <> 'U' OR  UPDATING('FACT_VALUE_DESCR') THEN	 PRM_AUDIT.AUDIT_DATA ('FACTVAL','FACT_VALUE_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FACT_VALUE_DESCR,:NEW.FACT_VALUE_DESCR); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'FACTVAL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_FACTVAL_DEL
 BEFORE DELETE ON FACTVAL
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'FACTVAL',:OLD.FACT_VAL_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_FACTVAL
 BEFORE UPDATE OR INSERT ON FACTVAL
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'FACTVAL',:OLD.FACT_VAL_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.FACT_VAL_ID)
 			  AND TABLE_NAME = 'FACTVAL';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_FILTPROP
 AFTER INSERT OR UPDATE OR DELETE ON FILTPROP
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('FILTPROP',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.FILTER_ID;
     ELSE
     	VPK1 := :NEW.FILTER_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('FILTER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FILTPROP','FILTER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.FILTER_ID,:NEW.FILTER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TABLE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('FILTPROP','TABLE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TABLE_NAME,:NEW.TABLE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('FILTER_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('FILTPROP','FILTER_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FILTER_TYPE,:NEW.FILTER_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('FILTER_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('FILTPROP','FILTER_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FILTER_NAME,:NEW.FILTER_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FILTPROP','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('FILTER_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('FILTPROP','FILTER_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.FILTER_DATA,:NEW.FILTER_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'FILTPROP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_FILTPROP_DEL
 BEFORE DELETE ON FILTPROP
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'FILTPROP',:OLD.FILTER_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_FILTPROP
 BEFORE UPDATE OR INSERT ON FILTPROP
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'FILTPROP',:OLD.FILTER_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.FILTER_ID)
 			  AND TABLE_NAME = 'FILTPROP';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_FINDATES
 AFTER INSERT OR UPDATE OR DELETE ON FINDATES
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('FINDATES',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.FIN_DATES_ID;
     ELSE
     	VPK1 := :NEW.FIN_DATES_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('FIN_DATES_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FINDATES','FIN_DATES_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.FIN_DATES_ID,:NEW.FIN_DATES_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FIN_DATES_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('FINDATES','FIN_DATES_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FIN_DATES_NAME,:NEW.FIN_DATES_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('FINDATES','START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('FINDATES','END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.END_DATE,'YYYYMMDDHH24MISS')); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'FINDATES',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_FINDATES_DEL
 BEFORE DELETE ON FINDATES
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'FINDATES',:OLD.FIN_DATES_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_FINDATES
 BEFORE UPDATE OR INSERT ON FINDATES
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'FINDATES',:OLD.FIN_DATES_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.FIN_DATES_ID)
 			  AND TABLE_NAME = 'FINDATES';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_FORMCATG
 AFTER INSERT OR UPDATE OR DELETE ON FORMCATG
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('FORMCATG',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.FORM_CATG_ID;
     ELSE
     	VPK1 := :NEW.FORM_CATG_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('FORM_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FORMCATG','FORM_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.FORM_CATG_ID,:NEW.FORM_CATG_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FORM_CATG_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('FORMCATG','FORM_CATG_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FORM_CATG_NAME,:NEW.FORM_CATG_NAME); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'FORMCATG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_FORMCATG_DEL
 BEFORE DELETE ON FORMCATG
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'FORMCATG',:OLD.FORM_CATG_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_FORMCATG
 BEFORE UPDATE OR INSERT ON FORMCATG
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'FORMCATG',:OLD.FORM_CATG_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.FORM_CATG_ID)
 			  AND TABLE_NAME = 'FORMCATG';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_FORMPROJ
 AFTER INSERT OR UPDATE OR DELETE ON FORMPROJ
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('FORMPROJ',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.FORM_TMPL_ID;
 VPK2 := :OLD.PROJ_ID;
     ELSE
     	VPK1 := :NEW.FORM_TMPL_ID;
 VPK2 := :NEW.PROJ_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('FORM_TMPL_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FORMPROJ','FORM_TMPL_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.FORM_TMPL_ID,:NEW.FORM_TMPL_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FORMPROJ','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'FORMPROJ',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_FORMPROJ_DEL
 BEFORE DELETE ON FORMPROJ
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'FORMPROJ',:OLD.FORM_TMPL_ID,:OLD.PROJ_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER RT_FORMPROJ
 BEFORE UPDATE OR INSERT ON FORMPROJ
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.FORM_TMPL_ID)
 AND PK2 = TO_CHAR(:NEW.PROJ_ID)
 		AND TABLE_NAME = 'FORMPROJ';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'FORMPROJ',:OLD.FORM_TMPL_ID,:OLD.PROJ_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.FORM_TMPL_ID)
 AND PK2 = TO_CHAR(:OLD.PROJ_ID)
 			  AND TABLE_NAME = 'FORMPROJ';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:12> [INFO] [2017-09-01 13:01:12] CREATE OR REPLACE TRIGGER PRMAUD_FORMTMPL
 AFTER INSERT OR UPDATE OR DELETE ON FORMTMPL
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('FORMTMPL',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.FORM_TMPL_ID;
     ELSE
     	VPK1 := :NEW.FORM_TMPL_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('FORM_TMPL_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FORMTMPL','FORM_TMPL_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.FORM_TMPL_ID,:NEW.FORM_TMPL_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FORM_TMPL_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('FORMTMPL','FORM_TMPL_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FORM_TMPL_NAME,:NEW.FORM_TMPL_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('FORM_TMPL_DESC') THEN	 PRM_AUDIT.AUDIT_DATA ('FORMTMPL','FORM_TMPL_DESC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FORM_TMPL_DESC,:NEW.FORM_TMPL_DESC); END IF;
     IF VOPER <> 'U' OR  UPDATING('FORM_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FORMTMPL','FORM_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FORM_CATG_ID,:NEW.FORM_CATG_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('FORM_TMPL_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('FORMTMPL','FORM_TMPL_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.FORM_TMPL_DATA,:NEW.FORM_TMPL_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'FORMTMPL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_FORMTMPL_DEL
 BEFORE DELETE ON FORMTMPL
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'FORMTMPL',:OLD.FORM_TMPL_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_FORMTMPL
 BEFORE UPDATE OR INSERT ON FORMTMPL
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'FORMTMPL',:OLD.FORM_TMPL_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.FORM_TMPL_ID)
 			  AND TABLE_NAME = 'FORMTMPL';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_FUNDSRC
 AFTER INSERT OR UPDATE OR DELETE ON FUNDSRC
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('FUNDSRC',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.FUND_ID;
     ELSE
     	VPK1 := :NEW.FUND_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('FUND_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FUNDSRC','FUND_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.FUND_ID,:NEW.FUND_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('FUNDSRC','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('FUND_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('FUNDSRC','FUND_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FUND_NAME,:NEW.FUND_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_FUND_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('FUNDSRC','PARENT_FUND_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_FUND_ID,:NEW.PARENT_FUND_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('FUND_DESCR') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('FUNDSRC','FUND_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.FUND_DESCR,:NEW.FUND_DESCR); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'FUNDSRC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_FUNDSRC_DEL
 BEFORE DELETE ON FUNDSRC
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'FUNDSRC',:OLD.FUND_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_FUNDSRC
 BEFORE UPDATE OR INSERT ON FUNDSRC
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'FUNDSRC',:OLD.FUND_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.FUND_ID)
 			  AND TABLE_NAME = 'FUNDSRC';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_GCHANGE
 AFTER INSERT OR UPDATE OR DELETE ON GCHANGE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('GCHANGE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.GCHANGE_ID;
     ELSE
     	VPK1 := :NEW.GCHANGE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('GCHANGE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('GCHANGE','GCHANGE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.GCHANGE_ID,:NEW.GCHANGE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('GCHANGE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('GCHANGE','GCHANGE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GCHANGE_NAME,:NEW.GCHANGE_NAME); END IF;
     IF VOPER <> 'U' OR ( UPDATING('GCHANGE_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('GCHANGE','GCHANGE_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.GCHANGE_DATA,:NEW.GCHANGE_DATA); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('GCHANGE','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TABLE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('GCHANGE','TABLE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TABLE_NAME,:NEW.TABLE_NAME); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'GCHANGE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_GCHANGE_DEL
 BEFORE DELETE ON GCHANGE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'GCHANGE',:OLD.GCHANGE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_GCHANGE
 BEFORE UPDATE OR INSERT ON GCHANGE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'GCHANGE',:OLD.GCHANGE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.GCHANGE_ID)
 			  AND TABLE_NAME = 'GCHANGE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_ISSUHIST
 AFTER INSERT OR UPDATE OR DELETE ON ISSUHIST
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('ISSUHIST',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.ISSUE_ID;
     ELSE
     	VPK1 := :NEW.ISSUE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('ISSUE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ISSUHIST','ISSUE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.ISSUE_ID,:NEW.ISSUE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ISSUHIST','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('ISSUE_HISTORY') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('ISSUHIST','ISSUE_HISTORY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.ISSUE_HISTORY,:NEW.ISSUE_HISTORY); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'ISSUHIST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_ISSUHIST_DEL
 BEFORE DELETE ON ISSUHIST
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'ISSUHIST',:OLD.ISSUE_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_ISSUHIST
 BEFORE UPDATE OR INSERT ON ISSUHIST
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'ISSUHIST',:OLD.ISSUE_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.ISSUE_ID)
 			  AND TABLE_NAME = 'ISSUHIST';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_ITERATION
 AFTER INSERT OR UPDATE OR DELETE ON ITERATION
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('ITERATION',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.ITERATION_ID;
     ELSE
     	VPK1 := :NEW.ITERATION_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('ITERATION_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERATION','ITERATION_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.ITERATION_ID,:NEW.ITERATION_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RELEASE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERATION','RELEASE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RELEASE_ID,:NEW.RELEASE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ITERATION_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERATION','ITERATION_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ITERATION_NAME,:NEW.ITERATION_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERATION','START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERATION','END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('TERMINATION_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERATION','TERMINATION_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.TERMINATION_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.TERMINATION_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('CAPACITY_PCT') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERATION','CAPACITY_PCT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CAPACITY_PCT,:NEW.CAPACITY_PCT); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERATION','REMAIN_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_QTY,:NEW.REMAIN_QTY); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'ITERATION',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_ITERATION_DEL
 BEFORE DELETE ON ITERATION
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'ITERATION',:OLD.ITERATION_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_ITERATION
 BEFORE UPDATE OR INSERT ON ITERATION
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'ITERATION',:OLD.ITERATION_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.ITERATION_ID)
 			  AND TABLE_NAME = 'ITERATION';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_ITERDAYS
 AFTER INSERT OR UPDATE OR DELETE ON ITERDAYS
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('ITERDAYS',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TASK_ID;
 VPK2 := :OLD.DAY_NUMBER;
     ELSE
     	VPK1 := :NEW.TASK_ID;
 VPK2 := :NEW.DAY_NUMBER;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERDAYS','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DAY_NUMBER') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERDAYS','DAY_NUMBER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DAY_NUMBER,:NEW.DAY_NUMBER); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERDAYS','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ITERATION_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERDAYS','ITERATION_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ITERATION_ID,:NEW.ITERATION_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERDAYS','ACT_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_WORK_QTY,:NEW.ACT_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERDAYS','REMAIN_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_WORK_QTY,:NEW.REMAIN_WORK_QTY); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'ITERDAYS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_ITERDAYS_DEL
 BEFORE DELETE ON ITERDAYS
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'ITERDAYS',:OLD.TASK_ID,:OLD.DAY_NUMBER,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_ITERDAYS
 BEFORE UPDATE OR INSERT ON ITERDAYS
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.TASK_ID)
 AND PK2 = TO_CHAR(:NEW.DAY_NUMBER)
 		AND TABLE_NAME = 'ITERDAYS';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'ITERDAYS',:OLD.TASK_ID,:OLD.DAY_NUMBER,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TASK_ID)
 AND PK2 = TO_CHAR(:OLD.DAY_NUMBER)
 			  AND TABLE_NAME = 'ITERDAYS';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_ITERGOAL
 AFTER INSERT OR UPDATE OR DELETE ON ITERGOAL
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('ITERGOAL',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.ITER_GOAL_ID;
     ELSE
     	VPK1 := :NEW.ITER_GOAL_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('ITER_GOAL_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERGOAL','ITER_GOAL_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.ITER_GOAL_ID,:NEW.ITER_GOAL_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ITERATION_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERGOAL','ITERATION_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ITERATION_ID,:NEW.ITERATION_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('GOAL_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERGOAL','GOAL_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GOAL_NAME,:NEW.GOAL_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('GOAL_DESCR') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERGOAL','GOAL_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GOAL_DESCR,:NEW.GOAL_DESCR); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERGOAL','STATUS_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS_CODE,:NEW.STATUS_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RFOLIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ITERGOAL','RFOLIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RFOLIO_ID,:NEW.RFOLIO_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'ITERGOAL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_ITERGOAL_DEL
 BEFORE DELETE ON ITERGOAL
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'ITERGOAL',:OLD.ITER_GOAL_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_ITERGOAL
 BEFORE UPDATE OR INSERT ON ITERGOAL
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'ITERGOAL',:OLD.ITER_GOAL_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.ITER_GOAL_ID)
 			  AND TABLE_NAME = 'ITERGOAL';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_JOBLOG
 AFTER INSERT OR UPDATE OR DELETE ON JOBLOG
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('JOBLOG',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.JOB_ID;
     ELSE
     	VPK1 := :NEW.JOB_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('JOB_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBLOG','JOB_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.JOB_ID,:NEW.JOB_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('JOB_LOG_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('JOBLOG','JOB_LOG_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.JOB_LOG_DATA,:NEW.JOB_LOG_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'JOBLOG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_JOBLOG_DEL
 BEFORE DELETE ON JOBLOG
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'JOBLOG',:OLD.JOB_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_JOBLOG
 BEFORE UPDATE OR INSERT ON JOBLOG
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'JOBLOG',:OLD.JOB_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.JOB_ID)
 			  AND TABLE_NAME = 'JOBLOG';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_JOBRPT
 AFTER INSERT OR UPDATE OR DELETE ON JOBRPT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('JOBRPT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.JOB_ID;
 VPK2 := :OLD.RPT_ID;
     ELSE
     	VPK1 := :NEW.JOB_ID;
 VPK2 := :NEW.RPT_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('JOB_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBRPT','JOB_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.JOB_ID,:NEW.JOB_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBRPT','RPT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_ID,:NEW.RPT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TABLE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBRPT','TABLE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TABLE_NAME,:NEW.TABLE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('FK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBRPT','FK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FK_ID,:NEW.FK_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('JOBRPT_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('JOBRPT','JOBRPT_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.JOBRPT_DATA,:NEW.JOBRPT_DATA); END IF;
     IF VOPER <> 'U' OR  UPDATING('PERSONAL_PORTAL_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBRPT','PERSONAL_PORTAL_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PERSONAL_PORTAL_FLAG,:NEW.PERSONAL_PORTAL_FLAG); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'JOBRPT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_JOBRPT_DEL
 BEFORE DELETE ON JOBRPT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'JOBRPT',:OLD.JOB_ID,:OLD.RPT_ID,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_JOBRPT
 BEFORE UPDATE OR INSERT ON JOBRPT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.JOB_ID)
 AND PK2 = TO_CHAR(:NEW.RPT_ID)
 		AND TABLE_NAME = 'JOBRPT';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'JOBRPT',:OLD.JOB_ID,:OLD.RPT_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.JOB_ID)
 AND PK2 = TO_CHAR(:OLD.RPT_ID)
 			  AND TABLE_NAME = 'JOBRPT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_JOBSVC
 AFTER INSERT OR UPDATE OR DELETE ON JOBSVC
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('JOBSVC',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.JOB_ID;
     ELSE
     	VPK1 := :NEW.JOB_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('JOB_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','JOB_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.JOB_ID,:NEW.JOB_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_JOB_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','PARENT_JOB_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_JOB_ID,:NEW.PARENT_JOB_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('AUDIT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','AUDIT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.AUDIT_FLAG,:NEW.AUDIT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('JOB_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','JOB_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.JOB_TYPE,:NEW.JOB_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('JOB_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','JOB_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.JOB_NAME,:NEW.JOB_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_RUN_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','LAST_RUN_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.LAST_RUN_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.LAST_RUN_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','STATUS_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS_CODE,:NEW.STATUS_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RECUR_DATA') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','RECUR_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RECUR_DATA,:NEW.RECUR_DATA); END IF;
     IF VOPER <> 'U' OR  UPDATING('RECUR_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','RECUR_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RECUR_TYPE,:NEW.RECUR_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUBMITTED_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','SUBMITTED_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.SUBMITTED_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.SUBMITTED_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_ERROR_DESCR') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','LAST_ERROR_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LAST_ERROR_DESCR,:NEW.LAST_ERROR_DESCR); END IF;
     IF VOPER <> 'U' OR  UPDATING('AUDIT_FILE_PATH') THEN	 PRM_AUDIT.AUDIT_DATA ('JOBSVC','AUDIT_FILE_PATH',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.AUDIT_FILE_PATH,:NEW.AUDIT_FILE_PATH); END IF;
     IF VOPER <> 'U' OR ( UPDATING('JOB_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('JOBSVC','JOB_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.JOB_DATA,:NEW.JOB_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'JOBSVC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_JOBSVC_DEL
 BEFORE DELETE ON JOBSVC
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'JOBSVC',:OLD.JOB_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_JOBSVC
 BEFORE UPDATE OR INSERT ON JOBSVC
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'JOBSVC',:OLD.JOB_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.JOB_ID)
 			  AND TABLE_NAME = 'JOBSVC';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_LOCATION
 AFTER INSERT OR UPDATE OR DELETE ON LOCATION
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('LOCATION',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.LOCATION_ID;
     ELSE
     	VPK1 := :NEW.LOCATION_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('LOCATION_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','LOCATION_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.LOCATION_ID,:NEW.LOCATION_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('LOCATION_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','LOCATION_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LOCATION_NAME,:NEW.LOCATION_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('LOCATION_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','LOCATION_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LOCATION_TYPE,:NEW.LOCATION_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('ADDRESS_LINE1') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','ADDRESS_LINE1',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ADDRESS_LINE1,:NEW.ADDRESS_LINE1); END IF;
     IF VOPER <> 'U' OR  UPDATING('ADDRESS_LINE2') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','ADDRESS_LINE2',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ADDRESS_LINE2,:NEW.ADDRESS_LINE2); END IF;
     IF VOPER <> 'U' OR  UPDATING('ADDRESS_LINE3') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','ADDRESS_LINE3',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ADDRESS_LINE3,:NEW.ADDRESS_LINE3); END IF;
     IF VOPER <> 'U' OR  UPDATING('CITY_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','CITY_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CITY_NAME,:NEW.CITY_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('MUNICIPALITY_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','MUNICIPALITY_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MUNICIPALITY_NAME,:NEW.MUNICIPALITY_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','STATE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATE_NAME,:NEW.STATE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATE_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','STATE_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATE_CODE,:NEW.STATE_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('COUNTRY_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','COUNTRY_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COUNTRY_NAME,:NEW.COUNTRY_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('COUNTRY_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','COUNTRY_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COUNTRY_CODE,:NEW.COUNTRY_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('POSTAL_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','POSTAL_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POSTAL_CODE,:NEW.POSTAL_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('LONGITUDE') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','LONGITUDE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LONGITUDE,:NEW.LONGITUDE); END IF;
     IF VOPER <> 'U' OR  UPDATING('LATITUDE') THEN	 PRM_AUDIT.AUDIT_DATA ('LOCATION','LATITUDE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LATITUDE,:NEW.LATITUDE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'LOCATION',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_LOCATION_DEL
 BEFORE DELETE ON LOCATION
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'LOCATION',:OLD.LOCATION_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_LOCATION
 BEFORE UPDATE OR INSERT ON LOCATION
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'LOCATION',:OLD.LOCATION_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.LOCATION_ID)
 			  AND TABLE_NAME = 'LOCATION';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_MEMOTYPE
 AFTER INSERT OR UPDATE OR DELETE ON MEMOTYPE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('MEMOTYPE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.MEMO_TYPE_ID;
     ELSE
     	VPK1 := :NEW.MEMO_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('MEMO_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('MEMOTYPE','MEMO_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.MEMO_TYPE_ID,:NEW.MEMO_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('MEMOTYPE','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('EPS_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('MEMOTYPE','EPS_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EPS_FLAG,:NEW.EPS_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('MEMOTYPE','PROJ_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_FLAG,:NEW.PROJ_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('MEMOTYPE','WBS_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_FLAG,:NEW.WBS_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('MEMOTYPE','TASK_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_FLAG,:NEW.TASK_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('MEMO_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('MEMOTYPE','MEMO_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MEMO_TYPE,:NEW.MEMO_TYPE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'MEMOTYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_MEMOTYPE_DEL
 BEFORE DELETE ON MEMOTYPE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'MEMOTYPE',:OLD.MEMO_TYPE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_MEMOTYPE
 BEFORE UPDATE OR INSERT ON MEMOTYPE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'MEMOTYPE',:OLD.MEMO_TYPE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.MEMO_TYPE_ID)
 			  AND TABLE_NAME = 'MEMOTYPE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_NONWORK
 AFTER INSERT OR UPDATE OR DELETE ON NONWORK
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('NONWORK',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.NONWORK_TYPE_ID;
     ELSE
     	VPK1 := :NEW.NONWORK_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('NONWORK_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('NONWORK','NONWORK_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.NONWORK_TYPE_ID,:NEW.NONWORK_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('NONWORK','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('NONWORK_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('NONWORK','NONWORK_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.NONWORK_CODE,:NEW.NONWORK_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('NONWORK_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('NONWORK','NONWORK_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.NONWORK_TYPE,:NEW.NONWORK_TYPE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'NONWORK',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_NONWORK_DEL
 BEFORE DELETE ON NONWORK
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'NONWORK',:OLD.NONWORK_TYPE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_NONWORK
 BEFORE UPDATE OR INSERT ON NONWORK
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'NONWORK',:OLD.NONWORK_TYPE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.NONWORK_TYPE_ID)
 			  AND TABLE_NAME = 'NONWORK';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER TR_NOTE_FK
 BEFORE UPDATE OR INSERT ON NOTE
 FOR EACH ROW
 DECLARE
   VPK_ID           NUMBER(10);
 BEGIN
   BEGIN
     IF UPPER(:NEW.TABLE_NAME) = 'SCENARIO' THEN
       SELECT SCENARIO_ID INTO VPK_ID
       FROM SCENARIO
       WHERE SCENARIO_ID = :NEW.FK_ID;
     END IF;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RAISE_APPLICATION_ERROR(-20300,'INTEGRITY ERROR. FOREIGN KEY ID ' ||
                              TO_CHAR(:NEW.FK_ID )||' DOES NOT EXIST IN TABLE ' || UPPER(:NEW.TABLE_NAME) );
    END;      
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_NOTE
 AFTER INSERT OR UPDATE OR DELETE ON NOTE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('NOTE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.NOTE_ID;
     ELSE
     	VPK1 := :NEW.NOTE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('NOTE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('NOTE','NOTE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.NOTE_ID,:NEW.NOTE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TABLE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('NOTE','TABLE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TABLE_NAME,:NEW.TABLE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('TYPE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('NOTE','TYPE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TYPE_NAME,:NEW.TYPE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('FK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('NOTE','FK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FK_ID,:NEW.FK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('NOTE_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('NOTE','NOTE_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.NOTE_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.NOTE_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('NOTE_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('NOTE','NOTE_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.NOTE_VALUE,:NEW.NOTE_VALUE); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('NOTE','USER_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_NAME,:NEW.USER_NAME); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'NOTE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_NOTE_DEL
 BEFORE DELETE ON NOTE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'NOTE',:OLD.NOTE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_NOTE
 BEFORE UPDATE OR INSERT ON NOTE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'NOTE',:OLD.NOTE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.NOTE_ID)
 			  AND TABLE_NAME = 'NOTE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_OBS
 AFTER INSERT OR UPDATE OR DELETE ON OBS
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('OBS',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.OBS_ID;
     ELSE
     	VPK1 := :NEW.OBS_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('OBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('OBS','OBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.OBS_ID,:NEW.OBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('OBS','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('OBS_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('OBS','OBS_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OBS_NAME,:NEW.OBS_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_OBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('OBS','PARENT_OBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_OBS_ID,:NEW.PARENT_OBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('GUID') THEN	 PRM_AUDIT.AUDIT_DATA ('OBS','GUID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GUID,:NEW.GUID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('OBS_DESCR') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('OBS','OBS_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.OBS_DESCR,:NEW.OBS_DESCR); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'OBS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_OBS_DEL
 BEFORE DELETE ON OBS
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'OBS',:OLD.OBS_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_OBS
 BEFORE UPDATE OR INSERT ON OBS
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'OBS',:OLD.OBS_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.OBS_ID)
 			  AND TABLE_NAME = 'OBS';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_PCATTYPE
 AFTER INSERT OR UPDATE OR DELETE ON PCATTYPE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PCATTYPE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROJ_CATG_TYPE_ID;
     ELSE
     	VPK1 := :NEW.PROJ_CATG_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROJ_CATG_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATTYPE','PROJ_CATG_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROJ_CATG_TYPE_ID,:NEW.PROJ_CATG_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATTYPE','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_CATG_SHORT_LEN') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATTYPE','PROJ_CATG_SHORT_LEN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_CATG_SHORT_LEN,:NEW.PROJ_CATG_SHORT_LEN); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_CATG_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATTYPE','PROJ_CATG_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_CATG_TYPE,:NEW.PROJ_CATG_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUPER_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATTYPE','SUPER_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SUPER_FLAG,:NEW.SUPER_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_CATG_TYPE_WT') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATTYPE','PROJ_CATG_TYPE_WT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_CATG_TYPE_WT,:NEW.PROJ_CATG_TYPE_WT); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_PROJ_CATG_WT') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATTYPE','MAX_PROJ_CATG_WT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_PROJ_CATG_WT,:NEW.MAX_PROJ_CATG_WT); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PCATTYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_PCATTYPE_DEL
 BEFORE DELETE ON PCATTYPE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'PCATTYPE',:OLD.PROJ_CATG_TYPE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_PCATTYPE
 BEFORE UPDATE OR INSERT ON PCATTYPE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'PCATTYPE',:OLD.PROJ_CATG_TYPE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROJ_CATG_TYPE_ID)
 			  AND TABLE_NAME = 'PCATTYPE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_PCATUSER
 AFTER INSERT OR UPDATE OR DELETE ON PCATUSER
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PCATUSER',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROJ_CATG_ID;
 VPK2 := :OLD.USER_ID;
     ELSE
     	VPK1 := :NEW.PROJ_CATG_ID;
 VPK2 := :NEW.USER_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROJ_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATUSER','PROJ_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROJ_CATG_ID,:NEW.PROJ_CATG_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATUSER','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PCATUSER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_PCATUSER_DEL
 BEFORE DELETE ON PCATUSER
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'PCATUSER',:OLD.PROJ_CATG_ID,:OLD.USER_ID,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_PCATUSER
 BEFORE UPDATE OR INSERT ON PCATUSER
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.PROJ_CATG_ID)
 AND PK2 = TO_CHAR(:NEW.USER_ID)
 		AND TABLE_NAME = 'PCATUSER';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'PCATUSER',:OLD.PROJ_CATG_ID,:OLD.USER_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROJ_CATG_ID)
 AND PK2 = TO_CHAR(:OLD.USER_ID)
 			  AND TABLE_NAME = 'PCATUSER';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_PCATVAL
 AFTER INSERT OR UPDATE OR DELETE ON PCATVAL
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PCATVAL',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROJ_CATG_ID;
     ELSE
     	VPK1 := :NEW.PROJ_CATG_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROJ_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATVAL','PROJ_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROJ_CATG_ID,:NEW.PROJ_CATG_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_CATG_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATVAL','PROJ_CATG_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_CATG_TYPE_ID,:NEW.PROJ_CATG_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATVAL','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_CATG_SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATVAL','PROJ_CATG_SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_CATG_SHORT_NAME,:NEW.PROJ_CATG_SHORT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_PROJ_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATVAL','PARENT_PROJ_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_PROJ_CATG_ID,:NEW.PARENT_PROJ_CATG_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_CATG_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATVAL','PROJ_CATG_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_CATG_NAME,:NEW.PROJ_CATG_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_CATG_WT') THEN	 PRM_AUDIT.AUDIT_DATA ('PCATVAL','PROJ_CATG_WT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_CATG_WT,:NEW.PROJ_CATG_WT); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PCATVAL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_PCATVAL_DEL
 BEFORE DELETE ON PCATVAL
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'PCATVAL',:OLD.PROJ_CATG_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_PCATVAL
 BEFORE UPDATE OR INSERT ON PCATVAL
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'PCATVAL',:OLD.PROJ_CATG_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROJ_CATG_ID)
 			  AND TABLE_NAME = 'PCATVAL';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_PFOLIO
 AFTER INSERT OR UPDATE OR DELETE ON PFOLIO
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PFOLIO',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PFOLIO_ID;
     ELSE
     	VPK1 := :NEW.PFOLIO_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PFOLIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PFOLIO','PFOLIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PFOLIO_ID,:NEW.PFOLIO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CLOSED_PROJ_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PFOLIO','CLOSED_PROJ_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CLOSED_PROJ_FLAG,:NEW.CLOSED_PROJ_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('WHATIF_PROJ_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PFOLIO','WHATIF_PROJ_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WHATIF_PROJ_FLAG,:NEW.WHATIF_PROJ_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('PFOLIO_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PFOLIO','PFOLIO_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PFOLIO_TYPE,:NEW.PFOLIO_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('PFOLIO_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PFOLIO','PFOLIO_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PFOLIO_NAME,:NEW.PFOLIO_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PFOLIO','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PFOLIO_DESCR') THEN	 PRM_AUDIT.AUDIT_DATA ('PFOLIO','PFOLIO_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PFOLIO_DESCR,:NEW.PFOLIO_DESCR); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_REFRESH_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PFOLIO','LAST_REFRESH_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.LAST_REFRESH_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.LAST_REFRESH_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR ( UPDATING('PFOLIO_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('PFOLIO','PFOLIO_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.PFOLIO_DATA,:NEW.PFOLIO_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PFOLIO',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_PFOLIO_DEL
 BEFORE DELETE ON PFOLIO
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'PFOLIO',:OLD.PFOLIO_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_PFOLIO
 BEFORE UPDATE OR INSERT ON PFOLIO
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'PFOLIO',:OLD.PFOLIO_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PFOLIO_ID)
 			  AND TABLE_NAME = 'PFOLIO';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_PHASE
 AFTER INSERT OR UPDATE OR DELETE ON PHASE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PHASE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PHASE_ID;
     ELSE
     	VPK1 := :NEW.PHASE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PHASE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PHASE','PHASE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PHASE_ID,:NEW.PHASE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('PHASE','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('PHASE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PHASE','PHASE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PHASE_NAME,:NEW.PHASE_NAME); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PHASE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_PHASE_DEL
 BEFORE DELETE ON PHASE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'PHASE',:OLD.PHASE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_PHASE
 BEFORE UPDATE OR INSERT ON PHASE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'PHASE',:OLD.PHASE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PHASE_ID)
 			  AND TABLE_NAME = 'PHASE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_POBS
 AFTER INSERT OR UPDATE OR DELETE ON POBS
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('POBS',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.POBS_ID;
     ELSE
     	VPK1 := :NEW.POBS_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('POBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('POBS','POBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.POBS_ID,:NEW.POBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('POBS','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('POBS_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('POBS','POBS_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POBS_NAME,:NEW.POBS_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('POBS_PARENT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('POBS','POBS_PARENT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POBS_PARENT_ID,:NEW.POBS_PARENT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('POBS_DESCR') THEN	 PRM_AUDIT.AUDIT_DATA ('POBS','POBS_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POBS_DESCR,:NEW.POBS_DESCR); END IF;
     IF VOPER <> 'U' OR  UPDATING('POBS_MANAGER') THEN	 PRM_AUDIT.AUDIT_DATA ('POBS','POBS_MANAGER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POBS_MANAGER,:NEW.POBS_MANAGER); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'POBS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_POBS_DEL
 BEFORE DELETE ON POBS
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'POBS',:OLD.POBS_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_POBS
 BEFORE UPDATE OR INSERT ON POBS
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'POBS',:OLD.POBS_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.POBS_ID)
 			  AND TABLE_NAME = 'POBS';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER PRMAUD_PREFER
 AFTER INSERT OR UPDATE OR DELETE ON PREFER
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PREFER',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PREFER_ID;
     ELSE
     	VPK1 := :NEW.PREFER_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PREFER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','PREFER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PREFER_ID,:NEW.PREFER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('HR_DECIMAL_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','HR_DECIMAL_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.HR_DECIMAL_CNT,:NEW.HR_DECIMAL_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('XFER_COMPLETE_DAY_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','XFER_COMPLETE_DAY_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.XFER_COMPLETE_DAY_CNT,:NEW.XFER_COMPLETE_DAY_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('XFER_NOTSTART_DAY_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','XFER_NOTSTART_DAY_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.XFER_NOTSTART_DAY_CNT,:NEW.XFER_NOTSTART_DAY_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_WBS_LEVEL_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MAX_WBS_LEVEL_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_WBS_LEVEL_CNT,:NEW.MAX_WBS_LEVEL_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_RSRC_LEVEL_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MAX_RSRC_LEVEL_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_RSRC_LEVEL_CNT,:NEW.MAX_RSRC_LEVEL_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_ACCT_LEVEL_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MAX_ACCT_LEVEL_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_ACCT_LEVEL_CNT,:NEW.MAX_ACCT_LEVEL_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_TASK_ACTV_TYPE_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MAX_TASK_ACTV_TYPE_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_TASK_ACTV_TYPE_CNT,:NEW.MAX_TASK_ACTV_TYPE_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('FUTURE_TS_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','FUTURE_TS_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FUTURE_TS_CNT,:NEW.FUTURE_TS_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_OBS_LEVEL_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MAX_OBS_LEVEL_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_OBS_LEVEL_CNT,:NEW.MAX_OBS_LEVEL_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('WEEK_START_DAY_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','WEEK_START_DAY_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WEEK_START_DAY_NUM,:NEW.WEEK_START_DAY_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('TS_APPROVAL_LEVEL') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','TS_APPROVAL_LEVEL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TS_APPROVAL_LEVEL,:NEW.TS_APPROVAL_LEVEL); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_CODE_LEN') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','TASK_CODE_LEN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_CODE_LEN,:NEW.TASK_CODE_LEN); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_SHORT_LEN') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','PROJ_SHORT_LEN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_SHORT_LEN,:NEW.PROJ_SHORT_LEN); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_SHORT_LEN') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','WBS_SHORT_LEN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_SHORT_LEN,:NEW.WBS_SHORT_LEN); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_SHORT_LEN') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','RSRC_SHORT_LEN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_SHORT_LEN,:NEW.RSRC_SHORT_LEN); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACCT_SHORT_LEN') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','ACCT_SHORT_LEN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACCT_SHORT_LEN,:NEW.ACCT_SHORT_LEN); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_SHORT_LEN') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','ROLE_SHORT_LEN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_SHORT_LEN,:NEW.ROLE_SHORT_LEN); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_BASE_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MAX_BASE_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_BASE_CNT,:NEW.MAX_BASE_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEF_TARGET_DRTN_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','DEF_TARGET_DRTN_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEF_TARGET_DRTN_HR_CNT,:NEW.DEF_TARGET_DRTN_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('DAY_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','DAY_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DAY_HR_CNT,:NEW.DAY_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('WEEK_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','WEEK_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WEEK_HR_CNT,:NEW.WEEK_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('YEAR_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','YEAR_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.YEAR_HR_CNT,:NEW.YEAR_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('MONTH_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MONTH_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MONTH_HR_CNT,:NEW.MONTH_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_ACTV_LEVEL_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MAX_ACTV_LEVEL_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_ACTV_LEVEL_CNT,:NEW.MAX_ACTV_LEVEL_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_EPS_LEVEL_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MAX_EPS_LEVEL_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_EPS_LEVEL_CNT,:NEW.MAX_EPS_LEVEL_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_PCAT_LEVEL_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MAX_PCAT_LEVEL_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_PCAT_LEVEL_CNT,:NEW.MAX_PCAT_LEVEL_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_RCAT_LEVEL_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MAX_RCAT_LEVEL_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_RCAT_LEVEL_CNT,:NEW.MAX_RCAT_LEVEL_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('COMPLETE_TASK_HRS_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','COMPLETE_TASK_HRS_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COMPLETE_TASK_HRS_FLAG,:NEW.COMPLETE_TASK_HRS_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEFAULT_TIMESHEET_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','DEFAULT_TIMESHEET_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEFAULT_TIMESHEET_FLAG,:NEW.DEFAULT_TIMESHEET_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('FUTURE_TS_HRS_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','FUTURE_TS_HRS_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FUTURE_TS_HRS_FLAG,:NEW.FUTURE_TS_HRS_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('EV_FIX_COST_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','EV_FIX_COST_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EV_FIX_COST_FLAG,:NEW.EV_FIX_COST_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('TS_DAILY_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','TS_DAILY_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TS_DAILY_FLAG,:NEW.TS_DAILY_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('NOTSTART_TASK_HRS_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','NOTSTART_TASK_HRS_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.NOTSTART_TASK_HRS_FLAG,:NEW.NOTSTART_TASK_HRS_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRESTART_TASK_HRS_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','PRESTART_TASK_HRS_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRESTART_TASK_HRS_FLAG,:NEW.PRESTART_TASK_HRS_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('POSTEND_TASK_HRS_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','POSTEND_TASK_HRS_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POSTEND_TASK_HRS_FLAG,:NEW.POSTEND_TASK_HRS_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('ERMM_ENABLED_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','ERMM_ENABLED_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ERMM_ENABLED_FLAG,:NEW.ERMM_ENABLED_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('NAME_SEP_CHAR') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','NAME_SEP_CHAR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.NAME_SEP_CHAR,:NEW.NAME_SEP_CHAR); END IF;
     IF VOPER <> 'U' OR  UPDATING('YEAR_CHAR') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','YEAR_CHAR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.YEAR_CHAR,:NEW.YEAR_CHAR); END IF;
     IF VOPER <> 'U' OR  UPDATING('MONTH_CHAR') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MONTH_CHAR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MONTH_CHAR,:NEW.MONTH_CHAR); END IF;
     IF VOPER <> 'U' OR  UPDATING('WEEK_CHAR') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','WEEK_CHAR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WEEK_CHAR,:NEW.WEEK_CHAR); END IF;
     IF VOPER <> 'U' OR  UPDATING('DAY_CHAR') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','DAY_CHAR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DAY_CHAR,:NEW.DAY_CHAR); END IF;
     IF VOPER <> 'U' OR  UPDATING('HOUR_CHAR') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','HOUR_CHAR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.HOUR_CHAR,:NEW.HOUR_CHAR); END IF;
     IF VOPER <> 'U' OR  UPDATING('MINUTE_CHAR') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MINUTE_CHAR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MINUTE_CHAR,:NEW.MINUTE_CHAR); END IF;
     IF VOPER <> 'U' OR  UPDATING('TS_APPROVAL_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','TS_APPROVAL_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TS_APPROVAL_TYPE,:NEW.TS_APPROVAL_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('DB_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','DB_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DB_NAME,:NEW.DB_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASKSUM_PERIOD_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','TASKSUM_PERIOD_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASKSUM_PERIOD_TYPE,:NEW.TASKSUM_PERIOD_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('TRSRCSUM_PERIOD_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','TRSRCSUM_PERIOD_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TRSRCSUM_PERIOD_TYPE,:NEW.TRSRCSUM_PERIOD_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('DATABASE_VERSION') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','DATABASE_VERSION',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DATABASE_VERSION,:NEW.DATABASE_VERSION); END IF;
     IF VOPER <> 'U' OR  UPDATING('PHASE_LABEL') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','PHASE_LABEL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PHASE_LABEL,:NEW.PHASE_LABEL); END IF;
     IF VOPER <> 'U' OR  UPDATING('TS_APPROVE_USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','TS_APPROVE_USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TS_APPROVE_USER_ID,:NEW.TS_APPROVE_USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CURR_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','CURR_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CURR_ID,:NEW.CURR_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('EV_USER_PCT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','EV_USER_PCT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EV_USER_PCT,:NEW.EV_USER_PCT); END IF;
     IF VOPER <> 'U' OR  UPDATING('EV_ETC_USER_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','EV_ETC_USER_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EV_ETC_USER_VALUE,:NEW.EV_ETC_USER_VALUE); END IF;
     IF VOPER <> 'U' OR  UPDATING('EV_COMPUTE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','EV_COMPUTE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EV_COMPUTE_TYPE,:NEW.EV_COMPUTE_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('EV_ETC_COMPUTE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','EV_ETC_COMPUTE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EV_ETC_COMPUTE_TYPE,:NEW.EV_ETC_COMPUTE_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_HEADER_1') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','RPT_HEADER_1',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_HEADER_1,:NEW.RPT_HEADER_1); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_HEADER_2') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','RPT_HEADER_2',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_HEADER_2,:NEW.RPT_HEADER_2); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_HEADER_3') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','RPT_HEADER_3',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_HEADER_3,:NEW.RPT_HEADER_3); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_FOOTER_1') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','RPT_FOOTER_1',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_FOOTER_1,:NEW.RPT_FOOTER_1); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_FOOTER_2') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','RPT_FOOTER_2',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_FOOTER_2,:NEW.RPT_FOOTER_2); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_FOOTER_3') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','RPT_FOOTER_3',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_FOOTER_3,:NEW.RPT_FOOTER_3); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_USER_1') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','RPT_USER_1',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_USER_1,:NEW.RPT_USER_1); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_USER_2') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','RPT_USER_2',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_USER_2,:NEW.RPT_USER_2); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_USER_3') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','RPT_USER_3',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_USER_3,:NEW.RPT_USER_3); END IF;
     IF VOPER <> 'U' OR ( UPDATING('LICENSE_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('PREFER','LICENSE_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.LICENSE_DATA,:NEW.LICENSE_DATA); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_ROLE_LEVEL_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','MAX_ROLE_LEVEL_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_ROLE_LEVEL_CNT,:NEW.MAX_ROLE_LEVEL_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('PAST_TS_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','PAST_TS_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PAST_TS_CNT,:NEW.PAST_TS_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJINIT_ADMIN_USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','PROJINIT_ADMIN_USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJINIT_ADMIN_USER_ID,:NEW.PROJINIT_ADMIN_USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEFAULT_RSRC_SEC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','DEFAULT_RSRC_SEC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEFAULT_RSRC_SEC_ID,:NEW.DEFAULT_RSRC_SEC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ALLOW_USER_TIME_PERIOD_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','ALLOW_USER_TIME_PERIOD_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ALLOW_USER_TIME_PERIOD_FLAG,:NEW.ALLOW_USER_TIME_PERIOD_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('EXP_ROOT_URL') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','EXP_ROOT_URL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EXP_ROOT_URL,:NEW.EXP_ROOT_URL); END IF;
     IF VOPER <> 'U' OR  UPDATING('TS_RSRC_DEF_ASGN_ACTV_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PREFER','TS_RSRC_DEF_ASGN_ACTV_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TS_RSRC_DEF_ASGN_ACTV_FLAG,:NEW.TS_RSRC_DEF_ASGN_ACTV_FLAG); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PREFER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:13> [INFO] [2017-09-01 13:01:13] CREATE OR REPLACE TRIGGER RT_PREFER_DEL
 BEFORE DELETE ON PREFER
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'PREFER',:OLD.PREFER_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PREFER
 BEFORE UPDATE OR INSERT ON PREFER
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'PREFER',:OLD.PREFER_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PREFER_ID)
 			  AND TABLE_NAME = 'PREFER';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROCGROUP
 AFTER INSERT OR UPDATE OR DELETE ON PROCGROUP
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROCGROUP',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROC_GROUP_ID;
     ELSE
     	VPK1 := :NEW.PROC_GROUP_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROC_GROUP_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROCGROUP','PROC_GROUP_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROC_GROUP_ID,:NEW.PROC_GROUP_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('PROCGROUP','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROC_GROUP_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROCGROUP','PROC_GROUP_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROC_GROUP_NAME,:NEW.PROC_GROUP_NAME); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROCGROUP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROCGROUP_DEL
 BEFORE DELETE ON PROCGROUP
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'PROCGROUP',:OLD.PROC_GROUP_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROCGROUP
 BEFORE UPDATE OR INSERT ON PROCGROUP
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'PROCGROUP',:OLD.PROC_GROUP_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROC_GROUP_ID)
 			  AND TABLE_NAME = 'PROCGROUP';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROCITEM
 AFTER INSERT OR UPDATE OR DELETE ON PROCITEM
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROCITEM',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROC_ITEM_ID;
     ELSE
     	VPK1 := :NEW.PROC_ITEM_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROC_ITEM_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROCITEM','PROC_ITEM_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROC_ITEM_ID,:NEW.PROC_ITEM_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROC_GROUP_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROCITEM','PROC_GROUP_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROC_GROUP_ID,:NEW.PROC_GROUP_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('PROCITEM','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROC_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROCITEM','PROC_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROC_NAME,:NEW.PROC_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROC_WT') THEN	 PRM_AUDIT.AUDIT_DATA ('PROCITEM','PROC_WT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROC_WT,:NEW.PROC_WT); END IF;
     IF VOPER <> 'U' OR ( UPDATING('PROC_DESCR') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('PROCITEM','PROC_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.PROC_DESCR,:NEW.PROC_DESCR); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROCITEM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROCITEM_DEL
 BEFORE DELETE ON PROCITEM
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'PROCITEM',:OLD.PROC_ITEM_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROCITEM
 BEFORE UPDATE OR INSERT ON PROCITEM
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'PROCITEM',:OLD.PROC_ITEM_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROC_ITEM_ID)
 			  AND TABLE_NAME = 'PROCITEM';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROFILE
 AFTER INSERT OR UPDATE OR DELETE ON PROFILE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROFILE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROF_ID;
     ELSE
     	VPK1 := :NEW.PROF_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROF_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROFILE','PROF_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROF_ID,:NEW.PROF_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEFAULT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROFILE','DEFAULT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEFAULT_FLAG,:NEW.DEFAULT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUPERUSER_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROFILE','SUPERUSER_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SUPERUSER_FLAG,:NEW.SUPERUSER_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('SCOPE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROFILE','SCOPE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SCOPE_TYPE,:NEW.SCOPE_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROF_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROFILE','PROF_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROF_NAME,:NEW.PROF_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROF_DESCR') THEN	 PRM_AUDIT.AUDIT_DATA ('PROFILE','PROF_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROF_DESCR,:NEW.PROF_DESCR); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROFILE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROFILE_DEL
 BEFORE DELETE ON PROFILE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'PROFILE',:OLD.PROF_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROFILE
 BEFORE UPDATE OR INSERT ON PROFILE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'PROFILE',:OLD.PROF_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROF_ID)
 			  AND TABLE_NAME = 'PROFILE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROFPRIV
 AFTER INSERT OR UPDATE OR DELETE ON PROFPRIV
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROFPRIV',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROF_ID;
 VPK2 := :OLD.PRIV_NUM;
     ELSE
     	VPK1 := :NEW.PROF_ID;
 VPK2 := :NEW.PRIV_NUM;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROF_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROFPRIV','PROF_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROF_ID,:NEW.PROF_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRIV_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('PROFPRIV','PRIV_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRIV_NUM,:NEW.PRIV_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('ALLOW_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROFPRIV','ALLOW_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ALLOW_FLAG,:NEW.ALLOW_FLAG); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROFPRIV',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROFPRIV_DEL
 BEFORE DELETE ON PROFPRIV
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'PROFPRIV',:OLD.PROF_ID,:OLD.PRIV_NUM,NULL,NULL );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROFPRIV
 BEFORE UPDATE OR INSERT ON PROFPRIV
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.PROF_ID)
 AND PK2 = TO_CHAR(:NEW.PRIV_NUM)
 		AND TABLE_NAME = 'PROFPRIV';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'PROFPRIV',:OLD.PROF_ID,:OLD.PRIV_NUM,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROF_ID)
 AND PK2 = TO_CHAR(:OLD.PRIV_NUM)
 			  AND TABLE_NAME = 'PROFPRIV';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROJCOST
 AFTER INSERT OR UPDATE OR DELETE ON PROJCOST
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROJCOST',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.COST_ITEM_ID;
     ELSE
     	VPK1 := :NEW.COST_ITEM_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('COST_ITEM_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','COST_ITEM_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.COST_ITEM_ID,:NEW.COST_ITEM_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('AUTO_COMPUTE_ACT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','AUTO_COMPUTE_ACT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.AUTO_COMPUTE_ACT_FLAG,:NEW.AUTO_COMPUTE_ACT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_LOAD_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','COST_LOAD_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_LOAD_TYPE,:NEW.COST_LOAD_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACCT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','ACCT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACCT_ID,:NEW.ACCT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','COST_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_TYPE_ID,:NEW.COST_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','TARGET_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_COST,:NEW.TARGET_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','ACT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_COST,:NEW.ACT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','REMAIN_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_COST,:NEW.REMAIN_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('QTY_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','QTY_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.QTY_NAME,:NEW.QTY_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','TARGET_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_QTY,:NEW.TARGET_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','COST_PER_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY,:NEW.COST_PER_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('PO_NUMBER') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','PO_NUMBER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PO_NUMBER,:NEW.PO_NUMBER); END IF;
     IF VOPER <> 'U' OR  UPDATING('VENDOR_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','VENDOR_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.VENDOR_NAME,:NEW.VENDOR_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','COST_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_NAME,:NEW.COST_NAME); END IF;
     IF VOPER <> 'U' OR ( UPDATING('COST_DESCR') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('PROJCOST','COST_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.COST_DESCR,:NEW.COST_DESCR); END IF;
     IF VOPER <> 'U' OR  UPDATING('POBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJCOST','POBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POBS_ID,:NEW.POBS_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROJCOST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJCOST_DEL
 BEFORE DELETE ON PROJCOST
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'PROJCOST',:OLD.COST_ITEM_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJCOST
 BEFORE UPDATE OR INSERT ON PROJCOST
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'PROJCOST',:OLD.COST_ITEM_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.COST_ITEM_ID)
 			  AND TABLE_NAME = 'PROJCOST';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROJECT
 AFTER INSERT OR UPDATE OR DELETE ON PROJECT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROJECT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROJ_ID;
     ELSE
     	VPK1 := :NEW.PROJ_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FY_START_MONTH_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','FY_START_MONTH_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FY_START_MONTH_NUM,:NEW.FY_START_MONTH_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('CHNG_EFF_CMP_PCT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','CHNG_EFF_CMP_PCT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CHNG_EFF_CMP_PCT_FLAG,:NEW.CHNG_EFF_CMP_PCT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_SELF_ADD_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','RSRC_SELF_ADD_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_SELF_ADD_FLAG,:NEW.RSRC_SELF_ADD_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('ALLOW_COMPLETE_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','ALLOW_COMPLETE_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ALLOW_COMPLETE_FLAG,:NEW.ALLOW_COMPLETE_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_MULTI_ASSIGN_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','RSRC_MULTI_ASSIGN_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_MULTI_ASSIGN_FLAG,:NEW.RSRC_MULTI_ASSIGN_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('CHECKOUT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','CHECKOUT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CHECKOUT_FLAG,:NEW.CHECKOUT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJECT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','PROJECT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJECT_FLAG,:NEW.PROJECT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('STEP_COMPLETE_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','STEP_COMPLETE_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STEP_COMPLETE_FLAG,:NEW.STEP_COMPLETE_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_QTY_RECALC_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','COST_QTY_RECALC_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_QTY_RECALC_FLAG,:NEW.COST_QTY_RECALC_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUM_ONLY_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','SUM_ONLY_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SUM_ONLY_FLAG,:NEW.SUM_ONLY_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('BATCH_SUM_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','BATCH_SUM_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BATCH_SUM_FLAG,:NEW.BATCH_SUM_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('NAME_SEP_CHAR') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','NAME_SEP_CHAR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.NAME_SEP_CHAR,:NEW.NAME_SEP_CHAR); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEF_COMPLETE_PCT_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','DEF_COMPLETE_PCT_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEF_COMPLETE_PCT_TYPE,:NEW.DEF_COMPLETE_PCT_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','PROJ_SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_SHORT_NAME,:NEW.PROJ_SHORT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACCT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','ACCT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACCT_ID,:NEW.ACCT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ORIG_PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','ORIG_PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ORIG_PROJ_ID,:NEW.ORIG_PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SOURCE_PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','SOURCE_PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SOURCE_PROJ_ID,:NEW.SOURCE_PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','BASE_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_TYPE_ID,:NEW.BASE_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CLNDR_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','CLNDR_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CLNDR_ID,:NEW.CLNDR_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUM_BASE_PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','SUM_BASE_PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SUM_BASE_PROJ_ID,:NEW.SUM_BASE_PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_CODE_BASE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','TASK_CODE_BASE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_CODE_BASE,:NEW.TASK_CODE_BASE); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_CODE_STEP') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','TASK_CODE_STEP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_CODE_STEP,:NEW.TASK_CODE_STEP); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRIORITY_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','PRIORITY_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRIORITY_NUM,:NEW.PRIORITY_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_MAX_SUM_LEVEL') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','WBS_MAX_SUM_LEVEL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_MAX_SUM_LEVEL,:NEW.WBS_MAX_SUM_LEVEL); END IF;
     IF VOPER <> 'U' OR  UPDATING('RISK_LEVEL') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','RISK_LEVEL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RISK_LEVEL,:NEW.RISK_LEVEL); END IF;
     IF VOPER <> 'U' OR  UPDATING('STRGY_PRIORITY_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','STRGY_PRIORITY_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STRGY_PRIORITY_NUM,:NEW.STRGY_PRIORITY_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_CHECKSUM') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','LAST_CHECKSUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LAST_CHECKSUM,:NEW.LAST_CHECKSUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('CRITICAL_DRTN_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','CRITICAL_DRTN_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CRITICAL_DRTN_HR_CNT,:NEW.CRITICAL_DRTN_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEF_COST_PER_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','DEF_COST_PER_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEF_COST_PER_QTY,:NEW.DEF_COST_PER_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_RECALC_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','LAST_RECALC_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.LAST_RECALC_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.LAST_RECALC_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('PLAN_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','PLAN_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.PLAN_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.PLAN_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('PLAN_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','PLAN_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.PLAN_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.PLAN_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('SCD_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','SCD_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.SCD_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.SCD_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('ADD_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','ADD_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.ADD_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.ADD_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUM_DATA_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','SUM_DATA_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.SUM_DATA_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.SUM_DATA_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_TASKSUM_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','LAST_TASKSUM_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.LAST_TASKSUM_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.LAST_TASKSUM_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('FCST_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','FCST_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.FCST_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.FCST_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEF_DURATION_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','DEF_DURATION_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEF_DURATION_TYPE,:NEW.DEF_DURATION_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_CODE_PREFIX') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','TASK_CODE_PREFIX',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_CODE_PREFIX,:NEW.TASK_CODE_PREFIX); END IF;
     IF VOPER <> 'U' OR  UPDATING('GUID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','GUID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GUID,:NEW.GUID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEF_QTY_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','DEF_QTY_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEF_QTY_TYPE,:NEW.DEF_QTY_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('ADD_BY_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','ADD_BY_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ADD_BY_NAME,:NEW.ADD_BY_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('WEB_LOCAL_ROOT_PATH') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','WEB_LOCAL_ROOT_PATH',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WEB_LOCAL_ROOT_PATH,:NEW.WEB_LOCAL_ROOT_PATH); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_URL') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','PROJ_URL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_URL,:NEW.PROJ_URL); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEF_RATE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','DEF_RATE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEF_RATE_TYPE,:NEW.DEF_RATE_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_THIS_PER_LINK_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','ACT_THIS_PER_LINK_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_THIS_PER_LINK_FLAG,:NEW.ACT_THIS_PER_LINK_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEF_TASK_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','DEF_TASK_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEF_TASK_TYPE,:NEW.DEF_TASK_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_PCT_LINK_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','ACT_PCT_LINK_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_PCT_LINK_FLAG,:NEW.ACT_PCT_LINK_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('ADD_ACT_REMAIN_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','ADD_ACT_REMAIN_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ADD_ACT_REMAIN_FLAG,:NEW.ADD_ACT_REMAIN_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('CRITICAL_PATH_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','CRITICAL_PATH_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CRITICAL_PATH_TYPE,:NEW.CRITICAL_PATH_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_CODE_PREFIX_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','TASK_CODE_PREFIX_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_CODE_PREFIX_FLAG,:NEW.TASK_CODE_PREFIX_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEF_ROLLUP_DATES_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','DEF_ROLLUP_DATES_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEF_ROLLUP_DATES_FLAG,:NEW.DEF_ROLLUP_DATES_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('REM_TARGET_LINK_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','REM_TARGET_LINK_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REM_TARGET_LINK_FLAG,:NEW.REM_TARGET_LINK_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('RESET_PLANNED_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','RESET_PLANNED_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RESET_PLANNED_FLAG,:NEW.RESET_PLANNED_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('ALLOW_NEG_ACT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','ALLOW_NEG_ACT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ALLOW_NEG_ACT_FLAG,:NEW.ALLOW_NEG_ACT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('MSP_MANAGED_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','MSP_MANAGED_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MSP_MANAGED_FLAG,:NEW.MSP_MANAGED_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('MSP_UPDATE_ACTUALS_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','MSP_UPDATE_ACTUALS_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MSP_UPDATE_ACTUALS_FLAG,:NEW.MSP_UPDATE_ACTUALS_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('CHECKOUT_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','CHECKOUT_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.CHECKOUT_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.CHECKOUT_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('CHECKOUT_USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','CHECKOUT_USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CHECKOUT_USER_ID,:NEW.CHECKOUT_USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUM_ASSIGN_LEVEL') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','SUM_ASSIGN_LEVEL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SUM_ASSIGN_LEVEL,:NEW.SUM_ASSIGN_LEVEL); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_FIN_DATES_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','LAST_FIN_DATES_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LAST_FIN_DATES_ID,:NEW.LAST_FIN_DATES_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USE_PROJECT_BASELINE_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','USE_PROJECT_BASELINE_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USE_PROJECT_BASELINE_FLAG,:NEW.USE_PROJECT_BASELINE_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_BASELINE_UPDATE_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','LAST_BASELINE_UPDATE_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.LAST_BASELINE_UPDATE_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.LAST_BASELINE_UPDATE_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('TS_RSRC_VW_COMPL_ASGN_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','TS_RSRC_VW_COMPL_ASGN_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TS_RSRC_VW_COMPL_ASGN_FLAG,:NEW.TS_RSRC_VW_COMPL_ASGN_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('TS_RSRC_MARK_ACT_FINISH_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','TS_RSRC_MARK_ACT_FINISH_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TS_RSRC_MARK_ACT_FINISH_FLAG,:NEW.TS_RSRC_MARK_ACT_FINISH_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('TS_RSRC_VW_INACT_ACTV_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','TS_RSRC_VW_INACT_ACTV_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TS_RSRC_VW_INACT_ACTV_FLAG,:NEW.TS_RSRC_VW_INACT_ACTV_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('CR_EXTERNAL_KEY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','CR_EXTERNAL_KEY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CR_EXTERNAL_KEY,:NEW.CR_EXTERNAL_KEY); END IF;
     IF VOPER <> 'U' OR  UPDATING('APPLY_ACTUALS_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','APPLY_ACTUALS_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.APPLY_ACTUALS_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.APPLY_ACTUALS_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('DESCRIPTION') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','DESCRIPTION',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DESCRIPTION,:NEW.DESCRIPTION); END IF;
     IF VOPER <> 'U' OR  UPDATING('INTG_PROJ_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','INTG_PROJ_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.INTG_PROJ_TYPE,:NEW.INTG_PROJ_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('MATRIX_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','MATRIX_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MATRIX_ID,:NEW.MATRIX_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('LOCATION_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','LOCATION_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LOCATION_ID,:NEW.LOCATION_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CONTROL_UPDATES_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','CONTROL_UPDATES_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CONTROL_UPDATES_FLAG,:NEW.CONTROL_UPDATES_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('HIST_INTERVAL') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','HIST_INTERVAL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.HIST_INTERVAL,:NEW.HIST_INTERVAL); END IF;
     IF VOPER <> 'U' OR  UPDATING('HIST_LEVEL') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJECT','HIST_LEVEL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.HIST_LEVEL,:NEW.HIST_LEVEL); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROJECT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJECT_DEL
 BEFORE DELETE ON PROJECT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'PROJECT',:OLD.PROJ_ID,NULL,NULL,NULL,NULL);
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJECT
 BEFORE UPDATE OR INSERT ON PROJECT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'PROJECT',:OLD.PROJ_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROJ_ID)
 			  AND TABLE_NAME = 'PROJECT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER TR_PROJECT_OBSPROJ
 AFTER UPDATE OF ORIG_PROJ_ID  ON PROJECT
 FOR EACH ROW
 DECLARE
   VWBS_ID        NUMBER;
   VOBS_ID        NUMBER;
   VPARENT_WBS_ID NUMBER;
   VPROJECT_FLAG  VARCHAR(1);
 BEGIN
      IF :OLD.ORIG_PROJ_ID IS NOT NULL AND :NEW.ORIG_PROJ_ID IS NULL THEN
       SELECT WBS_ID, OBS_ID, PROJ_NODE_FLAG, PARENT_WBS_ID
         INTO VWBS_ID, VOBS_ID, VPROJECT_FLAG, VPARENT_WBS_ID
         FROM PROJWBS
        WHERE PROJ_ID = :NEW.PROJ_ID
          AND PROJ_NODE_FLAG = 'Y';
       BEGIN
         IF VPROJECT_FLAG = 'Y' AND VWBS_ID IS NOT NULL THEN
           BEGIN
             DELETE FROM OBSPROJ WHERE PROJ_ID = :NEW.PROJ_ID;
             INSERT INTO OBSPROJ
               (OBS_ID, PROJ_ID, WBS_ID)
               SELECT OBS_ID, :NEW.PROJ_ID, VWBS_ID
                 FROM OBSPROJ
                WHERE WBS_ID = VPARENT_WBS_ID
               UNION
               SELECT OBS_ID, :NEW.PROJ_ID, VWBS_ID
                 FROM PROJWBS
                WHERE PROJ_ID = :NEW.PROJ_ID;
           END;
         END IF;
       END;
     ELSIF :OLD.ORIG_PROJ_ID IS NULL AND :NEW.ORIG_PROJ_ID IS NOT NULL THEN
       DELETE FROM OBSPROJ WHERE PROJ_ID = :NEW.PROJ_ID;
     END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROJEST
 AFTER INSERT OR UPDATE OR DELETE ON PROJEST
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROJEST',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROJ_EST_ID;
     ELSE
     	VPK1 := :NEW.PROJ_EST_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROJ_EST_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','PROJ_EST_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROJ_EST_ID,:NEW.PROJ_EST_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('APPLIED_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','APPLIED_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.APPLIED_FLAG,:NEW.APPLIED_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','RSRC_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_TYPE,:NEW.RSRC_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('EST_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','EST_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EST_TYPE,:NEW.EST_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('EST_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','EST_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EST_NAME,:NEW.EST_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('BU_CMPLX_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','BU_CMPLX_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BU_CMPLX_VALUE,:NEW.BU_CMPLX_VALUE); END IF;
     IF VOPER <> 'U' OR  UPDATING('ADJ_MULT_PCT') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','ADJ_MULT_PCT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ADJ_MULT_PCT,:NEW.ADJ_MULT_PCT); END IF;
     IF VOPER <> 'U' OR  UPDATING('FP_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','FP_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FP_CNT,:NEW.FP_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('FP_CMPLX_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','FP_CMPLX_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FP_CMPLX_VALUE,:NEW.FP_CMPLX_VALUE); END IF;
     IF VOPER <> 'U' OR  UPDATING('FP_UNADJ_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','FP_UNADJ_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FP_UNADJ_CNT,:NEW.FP_UNADJ_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('EST_TASK_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','EST_TASK_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EST_TASK_CNT,:NEW.EST_TASK_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('FP_PROD_AVG_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','FP_PROD_AVG_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FP_PROD_AVG_VALUE,:NEW.FP_PROD_AVG_VALUE); END IF;
     IF VOPER <> 'U' OR  UPDATING('EST_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','EST_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EST_QTY,:NEW.EST_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('EST_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJEST','EST_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.EST_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.EST_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR ( UPDATING('EST_NOTES') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('PROJEST','EST_NOTES',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.EST_NOTES,:NEW.EST_NOTES); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROJEST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJEST_DEL
 BEFORE DELETE ON PROJEST
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'PROJEST',:OLD.PROJ_EST_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJEST
 BEFORE UPDATE OR INSERT ON PROJEST
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'PROJEST',:OLD.PROJ_EST_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROJ_EST_ID)
 			  AND TABLE_NAME = 'PROJEST';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROJFUND
 AFTER INSERT OR UPDATE OR DELETE ON PROJFUND
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROJFUND',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROJ_FUND_ID;
     ELSE
     	VPK1 := :NEW.PROJ_FUND_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROJ_FUND_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJFUND','PROJ_FUND_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROJ_FUND_ID,:NEW.PROJ_FUND_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FUND_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJFUND','FUND_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FUND_ID,:NEW.FUND_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJFUND','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FUND_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJFUND','FUND_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FUND_COST,:NEW.FUND_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('FUND_WT') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJFUND','FUND_WT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FUND_WT,:NEW.FUND_WT); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROJFUND',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJFUND_DEL
 BEFORE DELETE ON PROJFUND
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'PROJFUND',:OLD.PROJ_FUND_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJFUND
 BEFORE UPDATE OR INSERT ON PROJFUND
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'PROJFUND',:OLD.PROJ_FUND_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROJ_FUND_ID)
 			  AND TABLE_NAME = 'PROJFUND';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROJISSU
 AFTER INSERT OR UPDATE OR DELETE ON PROJISSU
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROJISSU',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.ISSUE_ID;
     ELSE
     	VPK1 := :NEW.ISSUE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('ISSUE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','ISSUE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.ISSUE_ID,:NEW.ISSUE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('OBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','OBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OBS_ID,:NEW.OBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRIORITY_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','PRIORITY_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRIORITY_TYPE,:NEW.PRIORITY_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','STATUS_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS_CODE,:NEW.STATUS_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('ISSUE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','ISSUE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ISSUE_NAME,:NEW.ISSUE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('THRESH_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','THRESH_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.THRESH_ID,:NEW.THRESH_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TRACK_VIEW_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','TRACK_VIEW_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TRACK_VIEW_ID,:NEW.TRACK_VIEW_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('THRESH_PARM_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','THRESH_PARM_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.THRESH_PARM_ID,:NEW.THRESH_PARM_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','BASE_PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_PROJ_ID,:NEW.BASE_PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WORKSPACE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','WORKSPACE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WORKSPACE_ID,:NEW.WORKSPACE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ISSUE_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','ISSUE_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ISSUE_VALUE,:NEW.ISSUE_VALUE); END IF;
     IF VOPER <> 'U' OR  UPDATING('LO_PARM_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','LO_PARM_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LO_PARM_VALUE,:NEW.LO_PARM_VALUE); END IF;
     IF VOPER <> 'U' OR  UPDATING('HI_PARM_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','HI_PARM_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.HI_PARM_VALUE,:NEW.HI_PARM_VALUE); END IF;
     IF VOPER <> 'U' OR  UPDATING('ADD_BY_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','ADD_BY_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ADD_BY_NAME,:NEW.ADD_BY_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('RESOLV_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','RESOLV_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.RESOLV_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.RESOLV_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('ADD_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJISSU','ADD_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.ADD_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.ADD_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR ( UPDATING('ISSUE_NOTES') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('PROJISSU','ISSUE_NOTES',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.ISSUE_NOTES,:NEW.ISSUE_NOTES); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROJISSU',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJISSU_DEL
 BEFORE DELETE ON PROJISSU
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'PROJISSU',:OLD.ISSUE_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJISSU
 BEFORE UPDATE OR INSERT ON PROJISSU
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'PROJISSU',:OLD.ISSUE_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.ISSUE_ID)
 			  AND TABLE_NAME = 'PROJISSU';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROJPCAT
 AFTER INSERT OR UPDATE OR DELETE ON PROJPCAT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROJPCAT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROJ_ID;
 VPK2 := :OLD.PROJ_CATG_TYPE_ID;
     ELSE
     	VPK1 := :NEW.PROJ_ID;
 VPK2 := :NEW.PROJ_CATG_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJPCAT','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_CATG_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJPCAT','PROJ_CATG_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_CATG_TYPE_ID,:NEW.PROJ_CATG_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJPCAT','PROJ_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_CATG_ID,:NEW.PROJ_CATG_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROJPCAT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJPCAT_DEL
 BEFORE DELETE ON PROJPCAT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'PROJPCAT',:OLD.PROJ_ID,:OLD.PROJ_CATG_TYPE_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJPCAT
 BEFORE UPDATE OR INSERT ON PROJPCAT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.PROJ_ID)
 AND PK2 = TO_CHAR(:NEW.PROJ_CATG_TYPE_ID)
 		AND TABLE_NAME = 'PROJPCAT';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'PROJPCAT',:OLD.PROJ_ID,:OLD.PROJ_CATG_TYPE_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROJ_ID)
 AND PK2 = TO_CHAR(:OLD.PROJ_CATG_TYPE_ID)
 			  AND TABLE_NAME = 'PROJPCAT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROJPROP
 AFTER INSERT OR UPDATE OR DELETE ON PROJPROP
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROJPROP',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROJ_ID;
 VPK2 := :OLD.PROP_NAME;
     ELSE
     	VPK1 := :NEW.PROJ_ID;
 VPK2 := :NEW.PROP_NAME;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJPROP','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROP_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJPROP','PROP_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROP_NAME,:NEW.PROP_NAME); END IF;
     IF VOPER <> 'U' OR ( UPDATING('PROP_VALUE') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('PROJPROP','PROP_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.PROP_VALUE,:NEW.PROP_VALUE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROJPROP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJPROP_DEL
 BEFORE DELETE ON PROJPROP
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'PROJPROP',:OLD.PROJ_ID,:OLD.PROP_NAME,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJPROP
 BEFORE UPDATE OR INSERT ON PROJPROP
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.PROJ_ID)
 AND PK2 = :NEW.PROP_NAME
 		AND TABLE_NAME = 'PROJPROP';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'PROJPROP',:OLD.PROJ_ID,:OLD.PROP_NAME,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROJ_ID)
 AND PK2 = :OLD.PROP_NAME
 			  AND TABLE_NAME = 'PROJPROP';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROJRISK
 AFTER INSERT OR UPDATE OR DELETE ON PROJRISK
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROJRISK',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RISK_ID;
     ELSE
     	VPK1 := :NEW.RISK_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RISK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','RISK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RISK_ID,:NEW.RISK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ADD_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','ADD_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.ADD_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.ADD_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','STATUS_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS_CODE,:NEW.STATUS_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RISK_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','RISK_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RISK_NAME,:NEW.RISK_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('RISK_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','RISK_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RISK_TYPE_ID,:NEW.RISK_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('RISK_DESCR') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('PROJRISK','RISK_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.RISK_DESCR,:NEW.RISK_DESCR); END IF;
     IF VOPER <> 'U' OR  UPDATING('RISK_TO_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','RISK_TO_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RISK_TO_TYPE,:NEW.RISK_TO_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('IDENTIFIED_BY_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','IDENTIFIED_BY_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.IDENTIFIED_BY_ID,:NEW.IDENTIFIED_BY_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RESPONSE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','RESPONSE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RESPONSE_TYPE,:NEW.RESPONSE_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RESPONSE_TEXT') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','RESPONSE_TEXT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RESPONSE_TEXT,:NEW.RESPONSE_TEXT); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRE_RSP_PRBLTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','PRE_RSP_PRBLTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRE_RSP_PRBLTY,:NEW.PRE_RSP_PRBLTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRE_RSP_SCHD_PRBLTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','PRE_RSP_SCHD_PRBLTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRE_RSP_SCHD_PRBLTY,:NEW.PRE_RSP_SCHD_PRBLTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRE_RSP_COST_PRBLTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','PRE_RSP_COST_PRBLTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRE_RSP_COST_PRBLTY,:NEW.PRE_RSP_COST_PRBLTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('POST_RSP_PRBLTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','POST_RSP_PRBLTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POST_RSP_PRBLTY,:NEW.POST_RSP_PRBLTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('POST_RSP_SCHD_PRBLTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','POST_RSP_SCHD_PRBLTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POST_RSP_SCHD_PRBLTY,:NEW.POST_RSP_SCHD_PRBLTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('POST_RSP_COST_PRBLTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','POST_RSP_COST_PRBLTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POST_RSP_COST_PRBLTY,:NEW.POST_RSP_COST_PRBLTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('RISK_CAUSE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','RISK_CAUSE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RISK_CAUSE,:NEW.RISK_CAUSE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RISK_EFFECT') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','RISK_EFFECT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RISK_EFFECT,:NEW.RISK_EFFECT); END IF;
     IF VOPER <> 'U' OR  UPDATING('NOTES') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','NOTES',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.NOTES,:NEW.NOTES); END IF;
     IF VOPER <> 'U' OR  UPDATING('RISK_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','RISK_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RISK_CODE,:NEW.RISK_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RISK_DESC') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJRISK','RISK_DESC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RISK_DESC,:NEW.RISK_DESC); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROJRISK',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJRISK_DEL
 BEFORE DELETE ON PROJRISK
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'PROJRISK',:OLD.RISK_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJRISK
 BEFORE UPDATE OR INSERT ON PROJRISK
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'PROJRISK',:OLD.RISK_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RISK_ID)
 			  AND TABLE_NAME = 'PROJRISK';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROJTHRS
 AFTER INSERT OR UPDATE OR DELETE ON PROJTHRS
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROJTHRS',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.THRESH_ID;
     ELSE
     	VPK1 := :NEW.THRESH_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('THRESH_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','THRESH_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.THRESH_ID,:NEW.THRESH_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('OBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','OBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OBS_ID,:NEW.OBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('THRESH_PARM_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','THRESH_PARM_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.THRESH_PARM_ID,:NEW.THRESH_PARM_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','STATUS_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS_CODE,:NEW.STATUS_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRIORITY_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','PRIORITY_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRIORITY_TYPE,:NEW.PRIORITY_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('THRESH_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','THRESH_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.THRESH_TYPE,:NEW.THRESH_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TRACK_VIEW_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','TRACK_VIEW_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TRACK_VIEW_ID,:NEW.TRACK_VIEW_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('LO_PARM_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','LO_PARM_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LO_PARM_VALUE,:NEW.LO_PARM_VALUE); END IF;
     IF VOPER <> 'U' OR  UPDATING('HI_PARM_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','HI_PARM_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.HI_PARM_VALUE,:NEW.HI_PARM_VALUE); END IF;
     IF VOPER <> 'U' OR  UPDATING('WINDOW_START') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','WINDOW_START',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WINDOW_START,:NEW.WINDOW_START); END IF;
     IF VOPER <> 'U' OR  UPDATING('WINDOW_END') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJTHRS','WINDOW_END',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WINDOW_END,:NEW.WINDOW_END); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROJTHRS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJTHRS_DEL
 BEFORE DELETE ON PROJTHRS
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'PROJTHRS',:OLD.THRESH_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJTHRS
 BEFORE UPDATE OR INSERT ON PROJTHRS
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'PROJTHRS',:OLD.THRESH_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.THRESH_ID)
 			  AND TABLE_NAME = 'PROJTHRS';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROJWBS
 AFTER INSERT OR UPDATE OR DELETE ON PROJWBS
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROJWBS',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.WBS_ID;
     ELSE
     	VPK1 := :NEW.WBS_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('OBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','OBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OBS_ID,:NEW.OBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('EST_WT') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','EST_WT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EST_WT,:NEW.EST_WT); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_NODE_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','PROJ_NODE_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_NODE_FLAG,:NEW.PROJ_NODE_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUM_DATA_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','SUM_DATA_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SUM_DATA_FLAG,:NEW.SUM_DATA_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','STATUS_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS_CODE,:NEW.STATUS_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','WBS_SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_SHORT_NAME,:NEW.WBS_SHORT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','WBS_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_NAME,:NEW.WBS_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PHASE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','PHASE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PHASE_ID,:NEW.PHASE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','PARENT_WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_WBS_ID,:NEW.PARENT_WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('EV_USER_PCT') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','EV_USER_PCT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EV_USER_PCT,:NEW.EV_USER_PCT); END IF;
     IF VOPER <> 'U' OR  UPDATING('EV_ETC_USER_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','EV_ETC_USER_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EV_ETC_USER_VALUE,:NEW.EV_ETC_USER_VALUE); END IF;
     IF VOPER <> 'U' OR  UPDATING('ORIG_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','ORIG_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ORIG_COST,:NEW.ORIG_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('INDEP_REMAIN_TOTAL_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','INDEP_REMAIN_TOTAL_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.INDEP_REMAIN_TOTAL_COST,:NEW.INDEP_REMAIN_TOTAL_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ANN_DSCNT_RATE_PCT') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','ANN_DSCNT_RATE_PCT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ANN_DSCNT_RATE_PCT,:NEW.ANN_DSCNT_RATE_PCT); END IF;
     IF VOPER <> 'U' OR  UPDATING('DSCNT_PERIOD_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','DSCNT_PERIOD_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DSCNT_PERIOD_TYPE,:NEW.DSCNT_PERIOD_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('INDEP_REMAIN_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','INDEP_REMAIN_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.INDEP_REMAIN_WORK_QTY,:NEW.INDEP_REMAIN_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ANTICIP_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','ANTICIP_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.ANTICIP_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.ANTICIP_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('ANTICIP_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','ANTICIP_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.ANTICIP_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.ANTICIP_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('EV_COMPUTE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','EV_COMPUTE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EV_COMPUTE_TYPE,:NEW.EV_COMPUTE_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('EV_ETC_COMPUTE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','EV_ETC_COMPUTE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EV_ETC_COMPUTE_TYPE,:NEW.EV_ETC_COMPUTE_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RESP_TEAM_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','RESP_TEAM_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RESP_TEAM_ID,:NEW.RESP_TEAM_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ITERATION_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','ITERATION_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ITERATION_ID,:NEW.ITERATION_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('GUID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','GUID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GUID,:NEW.GUID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TMPL_GUID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','TMPL_GUID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TMPL_GUID,:NEW.TMPL_GUID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ORIGINAL_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','ORIGINAL_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ORIGINAL_QTY,:NEW.ORIGINAL_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('RQMT_REM_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','RQMT_REM_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RQMT_REM_QTY,:NEW.RQMT_REM_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('INTG_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','INTG_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.INTG_TYPE,:NEW.INTG_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_REVIEWER') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWBS','STATUS_REVIEWER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS_REVIEWER,:NEW.STATUS_REVIEWER); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROJWBS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJWBS_DEL
 BEFORE DELETE ON PROJWBS
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'PROJWBS',:OLD.WBS_ID,NULL,NULL,NULL,DECODE(:OLD.PROJ_NODE_FLAG,'N',:OLD.PROJ_ID,NULL) );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJWBS
 BEFORE UPDATE OR INSERT ON PROJWBS
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'PROJWBS',:OLD.WBS_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.WBS_ID)
 			  AND TABLE_NAME = 'PROJWBS';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER TR_PROJWBS_OBSPROJ
 AFTER UPDATE OR INSERT OR DELETE ON PROJWBS
 FOR EACH ROW
 DECLARE
   VPROJECT_FLAG CHAR(1);
   VPROJ_NODE_FLAG CHAR(1);
   VPROJ_ID NUMBER;
   VWBS_ID NUMBER;
   VRET_VAL NUMBER;
   VRET_MSG VARCHAR2(4000);
   VCNT PLS_INTEGER;
   VMSG_TYPE VARCHAR2(10);
   VCOLUPD BOOLEAN;
   VORIG_PROJ_ID   NUMBER;
 BEGIN
   IF UPDATING OR INSERTING THEN
     SELECT COUNT(*) INTO VCNT
     FROM OBSPROJ
     WHERE PROJ_ID = :NEW.PROJ_ID
     AND OBS_ID = :NEW.OBS_ID;
     VCOLUPD := FALSE;
     IF (VCNT=0) OR 
        (UPDATING AND ( NVL(:OLD.PARENT_WBS_ID,-9999999999) <> NVL(:NEW.PARENT_WBS_ID,-9999999999)
                       OR  :OLD.OBS_ID<> :NEW.OBS_ID 
                       OR NVL(:OLD.DELETE_SESSION_ID,-9999999999) <> NVL(:NEW.DELETE_SESSION_ID,-9999999999))
        ) THEN
       NULL;
     ELSE
       RETURN;
     END IF;
     VPROJ_NODE_FLAG := :NEW.PROJ_NODE_FLAG;
     VPROJ_ID := :NEW.PROJ_ID;
   ELSE
     VPROJ_NODE_FLAG := :OLD.PROJ_NODE_FLAG;
     VPROJ_ID := :OLD.PROJ_ID;
   END IF;
   SELECT PROJECT_FLAG, ORIG_PROJ_ID
     INTO VPROJECT_FLAG, VORIG_PROJ_ID
     FROM PROJECT
    WHERE PROJ_ID = VPROJ_ID;
   IF (VORIG_PROJ_ID IS NOT NULL) THEN
     RETURN;
   END IF;
   IF VPROJECT_FLAG = 'Y' THEN 
     VMSG_TYPE := 'PROJECT';
   ELSE
     VMSG_TYPE := 'EPS';
   END IF;
   IF DELETING THEN
     PRMQUEUE_ADD('PROJWBS_SECURITY',VMSG_TYPE,'DELETE', TRIM(TO_CHAR(:OLD.WBS_ID)), TRIM(TO_CHAR(:OLD.PROJ_ID)) );
   ELSIF INSERTING THEN
     SELECT MAX(WBS_ID) INTO VWBS_ID FROM OBSPROJ WHERE PROJ_ID = :NEW.PROJ_ID;
     IF VPROJECT_FLAG  = 'Y' AND VWBS_ID IS NOT NULL THEN
       BEGIN
         INSERT INTO OBSPROJ (OBS_ID, PROJ_ID, WBS_ID)
         VALUES (:NEW.OBS_ID,:NEW.PROJ_ID,VWBS_ID);
       EXCEPTION
         WHEN DUP_VAL_ON_INDEX THEN
           NULL;
       END;
     ELSE
       BEGIN
         INSERT INTO OBSPROJ(OBS_ID,PROJ_ID,WBS_ID)
         SELECT OBS_ID,:NEW.PROJ_ID,:NEW.WBS_ID
         FROM OBSPROJ
         WHERE WBS_ID = :NEW.PARENT_WBS_ID;
         INSERT INTO OBSPROJ (OBS_ID, PROJ_ID, WBS_ID)
         VALUES (:NEW.OBS_ID,:NEW.PROJ_ID,:NEW.WBS_ID);
       EXCEPTION
         WHEN DUP_VAL_ON_INDEX THEN
           NULL;
       END;
     END IF;
   ELSIF UPDATING THEN
     SELECT MAX(WBS_ID) INTO VWBS_ID FROM OBSPROJ WHERE PROJ_ID = :NEW.PROJ_ID;
     IF :OLD.PARENT_WBS_ID <> :NEW.PARENT_WBS_ID AND :NEW.PROJ_NODE_FLAG = 'Y' THEN
       PRMQUEUE_ADD('PROJWBS_SECURITY',VMSG_TYPE,'UPDATE', TRIM(TO_CHAR(:NEW.WBS_ID)), TRIM(TO_CHAR(:NEW.PROJ_ID)) );
       BEGIN
         INSERT INTO OBSPROJ(OBS_ID,PROJ_ID,WBS_ID)
         SELECT OBS_ID,:NEW.PROJ_ID,VWBS_ID
         FROM OBSPROJ OP
         WHERE WBS_ID = :NEW.PARENT_WBS_ID
         MINUS
         SELECT OBS_ID, PROJ_ID, WBS_ID
         FROM OBSPROJ OP2
         WHERE PROJ_ID = :NEW.PROJ_ID;
         IF VWBS_ID IS NOT NULL THEN
           INSERT INTO OBSPROJ (OBS_ID, PROJ_ID, WBS_ID)
           VALUES (:NEW.OBS_ID,:NEW.PROJ_ID,VWBS_ID);
         END IF;
       EXCEPTION
         WHEN DUP_VAL_ON_INDEX THEN
           NULL;
       END;
     ELSIF :OLD.OBS_ID <> :NEW.OBS_ID  THEN
       PRMQUEUE_ADD('PROJWBS_SECURITY',VMSG_TYPE,'UPDATE', TRIM(TO_CHAR(:NEW.WBS_ID)), TRIM(TO_CHAR(:NEW.PROJ_ID)) );
       BEGIN
         IF VWBS_ID IS NOT NULL THEN
           INSERT INTO OBSPROJ (OBS_ID, PROJ_ID, WBS_ID)
           VALUES (:NEW.OBS_ID,:NEW.PROJ_ID,VWBS_ID);
         END IF;
       EXCEPTION
         WHEN DUP_VAL_ON_INDEX THEN
           NULL;
       END;
     ELSIF ( :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL )
           OR ( :OLD.DELETE_SESSION_ID IS NOT NULL AND :NEW.DELETE_SESSION_ID IS NULL ) THEN
       PRMQUEUE_ADD('PROJWBS_SECURITY',VMSG_TYPE,'UPDATE', TRIM(TO_CHAR(:NEW.WBS_ID)), TRIM(TO_CHAR(:NEW.PROJ_ID)) );
       BEGIN
         IF :NEW.DELETE_SESSION_ID IS NULL THEN
           IF VPROJECT_FLAG = 'N' THEN
             VWBS_ID := :NEW.WBS_ID;
           END IF;
           IF VWBS_ID IS NOT NULL THEN
             INSERT INTO OBSPROJ (OBS_ID, PROJ_ID, WBS_ID)
             VALUES (:NEW.OBS_ID,:NEW.PROJ_ID,VWBS_ID);
           END IF;
         END IF;
       EXCEPTION
         WHEN DUP_VAL_ON_INDEX THEN
           NULL;
       END;
     END IF;
   END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PROJWSRPT
 AFTER INSERT OR UPDATE OR DELETE ON PROJWSRPT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PROJWSRPT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RPT_ID;
 VPK2 := :OLD.PROJ_ID;
     ELSE
     	VPK1 := :NEW.RPT_ID;
 VPK2 := :NEW.PROJ_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RPT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWSRPT','RPT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RPT_ID,:NEW.RPT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PROJWSRPT','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PROJWSRPT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJWSRPT_DEL
 BEFORE DELETE ON PROJWSRPT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'PROJWSRPT',:OLD.RPT_ID,:OLD.PROJ_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PROJWSRPT
 BEFORE UPDATE OR INSERT ON PROJWSRPT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.RPT_ID)
 AND PK2 = TO_CHAR(:NEW.PROJ_ID)
 		AND TABLE_NAME = 'PROJWSRPT';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'PROJWSRPT',:OLD.RPT_ID,:OLD.PROJ_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RPT_ID)
 AND PK2 = TO_CHAR(:OLD.PROJ_ID)
 			  AND TABLE_NAME = 'PROJWSRPT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_PRPFOLIO
 AFTER INSERT OR UPDATE OR DELETE ON PRPFOLIO
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('PRPFOLIO',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PFOLIO_ID;
 VPK2 := :OLD.WBS_ID;
     ELSE
     	VPK1 := :NEW.PFOLIO_ID;
 VPK2 := :NEW.WBS_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PFOLIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PRPFOLIO','PFOLIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PFOLIO_ID,:NEW.PFOLIO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('PRPFOLIO','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'PRPFOLIO',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PRPFOLIO_DEL
 BEFORE DELETE ON PRPFOLIO
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'PRPFOLIO',:OLD.PFOLIO_ID,:OLD.WBS_ID,NULL,NULL );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_PRPFOLIO
 BEFORE UPDATE OR INSERT ON PRPFOLIO
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.PFOLIO_ID)
 AND PK2 = TO_CHAR(:NEW.WBS_ID)
 		AND TABLE_NAME = 'PRPFOLIO';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'PRPFOLIO',:OLD.PFOLIO_ID,:OLD.WBS_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PFOLIO_ID)
 AND PK2 = TO_CHAR(:OLD.WBS_ID)
 			  AND TABLE_NAME = 'PRPFOLIO';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_QUERYLIB
 AFTER INSERT OR UPDATE OR DELETE ON QUERYLIB
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('QUERYLIB',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.QUERY_LIB_ID;
     ELSE
     	VPK1 := :NEW.QUERY_LIB_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('QUERY_LIB_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('QUERYLIB','QUERY_LIB_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.QUERY_LIB_ID,:NEW.QUERY_LIB_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('APP_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('QUERYLIB','APP_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.APP_NAME,:NEW.APP_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('CORE_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('QUERYLIB','CORE_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CORE_FLAG,:NEW.CORE_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('MATCH_SQL') THEN	 PRM_AUDIT.AUDIT_DATA ('QUERYLIB','MATCH_SQL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MATCH_SQL,:NEW.MATCH_SQL); END IF;
     IF VOPER <> 'U' OR  UPDATING('HINTS') THEN	 PRM_AUDIT.AUDIT_DATA ('QUERYLIB','HINTS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.HINTS,:NEW.HINTS); END IF;
     IF VOPER <> 'U' OR  UPDATING('REPLACEMENT_SQL') THEN	 PRM_AUDIT.AUDIT_DATA ('QUERYLIB','REPLACEMENT_SQL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REPLACEMENT_SQL,:NEW.REPLACEMENT_SQL); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'QUERYLIB',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_QUERYLIB_DEL
 BEFORE DELETE ON QUERYLIB
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'QUERYLIB',:OLD.QUERY_LIB_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_QUERYLIB
 BEFORE UPDATE OR INSERT ON QUERYLIB
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'QUERYLIB',:OLD.QUERY_LIB_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.QUERY_LIB_ID)
 			  AND TABLE_NAME = 'QUERYLIB';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_RCATTYPE
 AFTER INSERT OR UPDATE OR DELETE ON RCATTYPE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RCATTYPE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RSRC_CATG_TYPE_ID;
     ELSE
     	VPK1 := :NEW.RSRC_CATG_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RSRC_CATG_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RCATTYPE','RSRC_CATG_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RSRC_CATG_TYPE_ID,:NEW.RSRC_CATG_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('RCATTYPE','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_CATG_SHORT_LEN') THEN	 PRM_AUDIT.AUDIT_DATA ('RCATTYPE','RSRC_CATG_SHORT_LEN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_CATG_SHORT_LEN,:NEW.RSRC_CATG_SHORT_LEN); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_CATG_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('RCATTYPE','RSRC_CATG_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_CATG_TYPE,:NEW.RSRC_CATG_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUPER_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('RCATTYPE','SUPER_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SUPER_FLAG,:NEW.SUPER_FLAG); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RCATTYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_RCATTYPE_DEL
 BEFORE DELETE ON RCATTYPE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RCATTYPE',:OLD.RSRC_CATG_TYPE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_RCATTYPE
 BEFORE UPDATE OR INSERT ON RCATTYPE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RCATTYPE',:OLD.RSRC_CATG_TYPE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RSRC_CATG_TYPE_ID)
 			  AND TABLE_NAME = 'RCATTYPE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_RCATVAL
 AFTER INSERT OR UPDATE OR DELETE ON RCATVAL
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RCATVAL',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RSRC_CATG_ID;
     ELSE
     	VPK1 := :NEW.RSRC_CATG_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RSRC_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RCATVAL','RSRC_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RSRC_CATG_ID,:NEW.RSRC_CATG_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_CATG_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RCATVAL','RSRC_CATG_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_CATG_TYPE_ID,:NEW.RSRC_CATG_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('RCATVAL','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_CATG_SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RCATVAL','RSRC_CATG_SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_CATG_SHORT_NAME,:NEW.RSRC_CATG_SHORT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_CATG_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RCATVAL','RSRC_CATG_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_CATG_NAME,:NEW.RSRC_CATG_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_RSRC_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RCATVAL','PARENT_RSRC_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_RSRC_CATG_ID,:NEW.PARENT_RSRC_CATG_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RCATVAL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_RCATVAL_DEL
 BEFORE DELETE ON RCATVAL
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RCATVAL',:OLD.RSRC_CATG_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_RCATVAL
 BEFORE UPDATE OR INSERT ON RCATVAL
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RCATVAL',:OLD.RSRC_CATG_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RSRC_CATG_ID)
 			  AND TABLE_NAME = 'RCATVAL';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_REITTYPE
 AFTER INSERT OR UPDATE OR DELETE ON REITTYPE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('REITTYPE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RELATED_ITEM_TYPE_ID;
     ELSE
     	VPK1 := :NEW.RELATED_ITEM_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RELATED_ITEM_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('REITTYPE','RELATED_ITEM_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RELATED_ITEM_TYPE_ID,:NEW.RELATED_ITEM_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RELATED_ITEM') THEN	 PRM_AUDIT.AUDIT_DATA ('REITTYPE','RELATED_ITEM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RELATED_ITEM,:NEW.RELATED_ITEM); END IF;
     IF VOPER <> 'U' OR  UPDATING('TABLE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('REITTYPE','TABLE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TABLE_NAME,:NEW.TABLE_NAME); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'REITTYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_REITTYPE_DEL
 BEFORE DELETE ON REITTYPE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'REITTYPE',:OLD.RELATED_ITEM_TYPE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER RT_REITTYPE
 BEFORE UPDATE OR INSERT ON REITTYPE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'REITTYPE',:OLD.RELATED_ITEM_TYPE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RELATED_ITEM_TYPE_ID)
 			  AND TABLE_NAME = 'REITTYPE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:14> [INFO] [2017-09-01 13:01:14] CREATE OR REPLACE TRIGGER PRMAUD_RELEASE
 AFTER INSERT OR UPDATE OR DELETE ON RELEASE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RELEASE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RELEASE_ID;
     ELSE
     	VPK1 := :NEW.RELEASE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RELEASE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RELEASE','RELEASE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RELEASE_ID,:NEW.RELEASE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RFOLIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RELEASE','RFOLIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RFOLIO_ID,:NEW.RFOLIO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RELEASE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RELEASE','RELEASE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RELEASE_NAME,:NEW.RELEASE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('RELEASE','START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RELEASE','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RELEASE_THEME') THEN	 PRM_AUDIT.AUDIT_DATA ('RELEASE','RELEASE_THEME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RELEASE_THEME,:NEW.RELEASE_THEME); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RELEASE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RELEASE_DEL
 BEFORE DELETE ON RELEASE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'RELEASE',:OLD.RELEASE_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RELEASE
 BEFORE UPDATE OR INSERT ON RELEASE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'RELEASE',:OLD.RELEASE_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RELEASE_ID)
 			  AND TABLE_NAME = 'RELEASE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RELITEMS
 AFTER INSERT OR UPDATE OR DELETE ON RELITEMS
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RELITEMS',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.ITEM_TYPE_ID;
 VPK2 := :OLD.FK_ID;
 VPK3 := :OLD.RELATED_ITEM_TYPE_ID;
 VPK4 := :OLD.RELATED_FK_ID;
     ELSE
     	VPK1 := :NEW.ITEM_TYPE_ID;
 VPK2 := :NEW.FK_ID;
 VPK3 := :NEW.RELATED_ITEM_TYPE_ID;
 VPK4 := :NEW.RELATED_FK_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('ITEM_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RELITEMS','ITEM_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.ITEM_TYPE_ID,:NEW.ITEM_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RELITEMS','FK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FK_ID,:NEW.FK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RELATED_ITEM_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RELITEMS','RELATED_ITEM_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RELATED_ITEM_TYPE_ID,:NEW.RELATED_ITEM_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RELATED_FK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RELITEMS','RELATED_FK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RELATED_FK_ID,:NEW.RELATED_FK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RELITEMS','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RELITEMS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RELITEMS_DEL
 BEFORE DELETE ON RELITEMS
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'RELITEMS',:OLD.ITEM_TYPE_ID,:OLD.FK_ID,:OLD.RELATED_ITEM_TYPE_ID,:OLD.RELATED_FK_ID
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RELITEMS
 BEFORE UPDATE OR INSERT ON RELITEMS
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.ITEM_TYPE_ID)
 AND PK2 = TO_CHAR(:NEW.FK_ID)
 AND PK3 = TO_CHAR(:NEW.RELATED_ITEM_TYPE_ID)
 AND PK4 = TO_CHAR(:NEW.RELATED_FK_ID)
 		AND TABLE_NAME = 'RELITEMS';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'RELITEMS',:OLD.ITEM_TYPE_ID,:OLD.FK_ID,:OLD.RELATED_ITEM_TYPE_ID,:OLD.RELATED_FK_ID
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.ITEM_TYPE_ID)
 AND PK2 = TO_CHAR(:OLD.FK_ID)
 AND PK3 = TO_CHAR(:OLD.RELATED_ITEM_TYPE_ID)
 AND PK4 = TO_CHAR(:OLD.RELATED_FK_ID)
 			  AND TABLE_NAME = 'RELITEMS';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RFOLIO
 AFTER INSERT OR UPDATE OR DELETE ON RFOLIO
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RFOLIO',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RFOLIO_ID;
     ELSE
     	VPK1 := :NEW.RFOLIO_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RFOLIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RFOLIO','RFOLIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RFOLIO_ID,:NEW.RFOLIO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RFOLIO','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RFOLIO_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RFOLIO','RFOLIO_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RFOLIO_NAME,:NEW.RFOLIO_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('RFOLIO_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('RFOLIO','RFOLIO_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RFOLIO_TYPE,:NEW.RFOLIO_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RFOLIO_DESCR') THEN	 PRM_AUDIT.AUDIT_DATA ('RFOLIO','RFOLIO_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RFOLIO_DESCR,:NEW.RFOLIO_DESCR); END IF;
     IF VOPER <> 'U' OR  UPDATING('TEAM_CAPACITY_PCT') THEN	 PRM_AUDIT.AUDIT_DATA ('RFOLIO','TEAM_CAPACITY_PCT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TEAM_CAPACITY_PCT,:NEW.TEAM_CAPACITY_PCT); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_RFOLIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RFOLIO','PARENT_RFOLIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_RFOLIO_ID,:NEW.PARENT_RFOLIO_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('RFOLIO_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('RFOLIO','RFOLIO_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.RFOLIO_DATA,:NEW.RFOLIO_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RFOLIO',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RFOLIO_DEL
 BEFORE DELETE ON RFOLIO
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RFOLIO',:OLD.RFOLIO_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RFOLIO
 BEFORE UPDATE OR INSERT ON RFOLIO
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RFOLIO',:OLD.RFOLIO_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RFOLIO_ID)
 			  AND TABLE_NAME = 'RFOLIO';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RISKCTRL
 AFTER INSERT OR UPDATE OR DELETE ON RISKCTRL
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RISKCTRL',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RISK_ID;
     ELSE
     	VPK1 := :NEW.RISK_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RISK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RISKCTRL','RISK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RISK_ID,:NEW.RISK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RISKCTRL','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('RISK_CONTROL') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('RISKCTRL','RISK_CONTROL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.RISK_CONTROL,:NEW.RISK_CONTROL); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RISKCTRL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RISKCTRL_DEL
 BEFORE DELETE ON RISKCTRL
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'RISKCTRL',:OLD.RISK_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RISKCTRL
 BEFORE UPDATE OR INSERT ON RISKCTRL
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'RISKCTRL',:OLD.RISK_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RISK_ID)
 			  AND TABLE_NAME = 'RISKCTRL';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RISKTYPE
 AFTER INSERT OR UPDATE OR DELETE ON RISKTYPE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RISKTYPE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RISK_TYPE_ID;
     ELSE
     	VPK1 := :NEW.RISK_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RISK_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RISKTYPE','RISK_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RISK_TYPE_ID,:NEW.RISK_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('RISKTYPE','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('RISK_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('RISKTYPE','RISK_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RISK_TYPE,:NEW.RISK_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_RISK_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RISKTYPE','PARENT_RISK_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_RISK_TYPE_ID,:NEW.PARENT_RISK_TYPE_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RISKTYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RISKTYPE_DEL
 BEFORE DELETE ON RISKTYPE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RISKTYPE',:OLD.RISK_TYPE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RISKTYPE
 BEFORE UPDATE OR INSERT ON RISKTYPE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RISKTYPE',:OLD.RISK_TYPE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RISK_TYPE_ID)
 			  AND TABLE_NAME = 'RISKTYPE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RLFOLIO
 AFTER INSERT OR UPDATE OR DELETE ON RLFOLIO
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RLFOLIO',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RLFOLIO_ID;
     ELSE
     	VPK1 := :NEW.RLFOLIO_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RLFOLIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RLFOLIO','RLFOLIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RLFOLIO_ID,:NEW.RLFOLIO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RLFOLIO','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RLFOLIO_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RLFOLIO','RLFOLIO_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RLFOLIO_NAME,:NEW.RLFOLIO_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('RLFOLIO_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('RLFOLIO','RLFOLIO_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RLFOLIO_TYPE,:NEW.RLFOLIO_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RLFOLIO_DESCR') THEN	 PRM_AUDIT.AUDIT_DATA ('RLFOLIO','RLFOLIO_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RLFOLIO_DESCR,:NEW.RLFOLIO_DESCR); END IF;
     IF VOPER <> 'U' OR ( UPDATING('RLFOLIO_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('RLFOLIO','RLFOLIO_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.RLFOLIO_DATA,:NEW.RLFOLIO_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RLFOLIO',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RLFOLIO_DEL
 BEFORE DELETE ON RLFOLIO
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RLFOLIO',:OLD.RLFOLIO_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RLFOLIO
 BEFORE UPDATE OR INSERT ON RLFOLIO
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RLFOLIO',:OLD.RLFOLIO_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RLFOLIO_ID)
 			  AND TABLE_NAME = 'RLFOLIO';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_ROLELIMIT
 AFTER INSERT OR UPDATE OR DELETE ON ROLELIMIT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('ROLELIMIT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.ROLELIMIT_ID;
     ELSE
     	VPK1 := :NEW.ROLELIMIT_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('ROLELIMIT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLELIMIT','ROLELIMIT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.ROLELIMIT_ID,:NEW.ROLELIMIT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLELIMIT','ROLE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_ID,:NEW.ROLE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLELIMIT','START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_QTY_PER_HR') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLELIMIT','MAX_QTY_PER_HR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_QTY_PER_HR,:NEW.MAX_QTY_PER_HR); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'ROLELIMIT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_ROLELIMIT_DEL
 BEFORE DELETE ON ROLELIMIT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'ROLELIMIT',:OLD.ROLELIMIT_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_ROLELIMIT
 BEFORE UPDATE OR INSERT ON ROLELIMIT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'ROLELIMIT',:OLD.ROLELIMIT_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.ROLELIMIT_ID)
 			  AND TABLE_NAME = 'ROLELIMIT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_ROLERATE
 AFTER INSERT OR UPDATE OR DELETE ON ROLERATE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('ROLERATE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.ROLE_RATE_ID;
     ELSE
     	VPK1 := :NEW.ROLE_RATE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('ROLE_RATE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLERATE','ROLE_RATE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.ROLE_RATE_ID,:NEW.ROLE_RATE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLERATE','ROLE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_ID,:NEW.ROLE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLERATE','COST_PER_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY,:NEW.COST_PER_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY2') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLERATE','COST_PER_QTY2',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY2,:NEW.COST_PER_QTY2); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY3') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLERATE','COST_PER_QTY3',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY3,:NEW.COST_PER_QTY3); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY4') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLERATE','COST_PER_QTY4',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY4,:NEW.COST_PER_QTY4); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY5') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLERATE','COST_PER_QTY5',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY5,:NEW.COST_PER_QTY5); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'ROLERATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_ROLERATE_DEL
 BEFORE DELETE ON ROLERATE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'ROLERATE',:OLD.ROLE_RATE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_ROLERATE
 BEFORE UPDATE OR INSERT ON ROLERATE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'ROLERATE',:OLD.ROLE_RATE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.ROLE_RATE_ID)
 			  AND TABLE_NAME = 'ROLERATE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_ROLES
 AFTER INSERT OR UPDATE OR DELETE ON ROLES
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('ROLES',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.ROLE_ID;
     ELSE
     	VPK1 := :NEW.ROLE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('ROLE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLES','ROLE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.ROLE_ID,:NEW.ROLE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLES','ROLE_SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_SHORT_NAME,:NEW.ROLE_SHORT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLES','ROLE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_NAME,:NEW.ROLE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLES','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_ROLE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLES','PARENT_ROLE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_ROLE_ID,:NEW.PARENT_ROLE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEF_COST_QTY_LINK_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLES','DEF_COST_QTY_LINK_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEF_COST_QTY_LINK_FLAG,:NEW.DEF_COST_QTY_LINK_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_QTY_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLES','COST_QTY_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_QTY_TYPE,:NEW.COST_QTY_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('POBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLES','POBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POBS_ID,:NEW.POBS_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('ROLE_DESCR') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('ROLES','ROLE_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.ROLE_DESCR,:NEW.ROLE_DESCR); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'ROLES',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_ROLES_DEL
 BEFORE DELETE ON ROLES
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'ROLES',:OLD.ROLE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_ROLES
 BEFORE UPDATE OR INSERT ON ROLES
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'ROLES',:OLD.ROLE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.ROLE_ID)
 			  AND TABLE_NAME = 'ROLES';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_ROLFOLIO
 AFTER INSERT OR UPDATE OR DELETE ON ROLFOLIO
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('ROLFOLIO',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RLFOLIO_ID;
 VPK2 := :OLD.ROLE_ID;
     ELSE
     	VPK1 := :NEW.RLFOLIO_ID;
 VPK2 := :NEW.ROLE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RLFOLIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLFOLIO','RLFOLIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RLFOLIO_ID,:NEW.RLFOLIO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('ROLFOLIO','ROLE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_ID,:NEW.ROLE_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'ROLFOLIO',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_ROLFOLIO_DEL
 BEFORE DELETE ON ROLFOLIO
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'ROLFOLIO',:OLD.RLFOLIO_ID,:OLD.ROLE_ID,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_ROLFOLIO
 BEFORE UPDATE OR INSERT ON ROLFOLIO
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.RLFOLIO_ID)
 AND PK2 = TO_CHAR(:NEW.ROLE_ID)
 		AND TABLE_NAME = 'ROLFOLIO';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'ROLFOLIO',:OLD.RLFOLIO_ID,:OLD.ROLE_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RLFOLIO_ID)
 AND PK2 = TO_CHAR(:OLD.ROLE_ID)
 			  AND TABLE_NAME = 'ROLFOLIO';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RPT
 AFTER INSERT OR UPDATE OR DELETE ON RPT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RPT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RPT_ID;
     ELSE
     	VPK1 := :NEW.RPT_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RPT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RPT','RPT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RPT_ID,:NEW.RPT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('GLOBAL_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('RPT','GLOBAL_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GLOBAL_FLAG,:NEW.GLOBAL_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('RPT','RPT_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_TYPE,:NEW.RPT_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RPT','RPT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_NAME,:NEW.RPT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_AREA') THEN	 PRM_AUDIT.AUDIT_DATA ('RPT','RPT_AREA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_AREA,:NEW.RPT_AREA); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_GROUP_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RPT','RPT_GROUP_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_GROUP_ID,:NEW.RPT_GROUP_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RPT','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_STATE') THEN	 PRM_AUDIT.AUDIT_DATA ('RPT','RPT_STATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_STATE,:NEW.RPT_STATE); END IF;
     IF VOPER <> 'U' OR ( UPDATING('RPT_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('RPT','RPT_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.RPT_DATA,:NEW.RPT_DATA); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_RUN_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('RPT','LAST_RUN_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.LAST_RUN_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.LAST_RUN_DATE,'YYYYMMDDHH24MISS')); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RPT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RPT_DEL
 BEFORE DELETE ON RPT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'RPT',:OLD.RPT_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RPT
 BEFORE UPDATE OR INSERT ON RPT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'RPT',:OLD.RPT_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RPT_ID)
 			  AND TABLE_NAME = 'RPT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RPTBATCH
 AFTER INSERT OR UPDATE OR DELETE ON RPTBATCH
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RPTBATCH',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RPT_BATCH_ID;
     ELSE
     	VPK1 := :NEW.RPT_BATCH_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RPT_BATCH_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RPTBATCH','RPT_BATCH_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RPT_BATCH_ID,:NEW.RPT_BATCH_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_BATCH_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RPTBATCH','RPT_BATCH_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_BATCH_NAME,:NEW.RPT_BATCH_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RPTBATCH','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RPTBATCH',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RPTBATCH_DEL
 BEFORE DELETE ON RPTBATCH
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'RPTBATCH',:OLD.RPT_BATCH_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RPTBATCH
 BEFORE UPDATE OR INSERT ON RPTBATCH
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'RPTBATCH',:OLD.RPT_BATCH_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RPT_BATCH_ID)
 			  AND TABLE_NAME = 'RPTBATCH';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RPTGROUP
 AFTER INSERT OR UPDATE OR DELETE ON RPTGROUP
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RPTGROUP',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RPT_GROUP_ID;
     ELSE
     	VPK1 := :NEW.RPT_GROUP_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RPT_GROUP_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RPTGROUP','RPT_GROUP_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RPT_GROUP_ID,:NEW.RPT_GROUP_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_GROUP_SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('RPTGROUP','RPT_GROUP_SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_GROUP_SEQ_NUM,:NEW.RPT_GROUP_SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_GROUP_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RPTGROUP','RPT_GROUP_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_GROUP_NAME,:NEW.RPT_GROUP_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_GROUP_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RPTGROUP','PARENT_GROUP_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_GROUP_ID,:NEW.PARENT_GROUP_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RPTGROUP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RPTGROUP_DEL
 BEFORE DELETE ON RPTGROUP
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RPTGROUP',:OLD.RPT_GROUP_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RPTGROUP
 BEFORE UPDATE OR INSERT ON RPTGROUP
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RPTGROUP',:OLD.RPT_GROUP_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RPT_GROUP_ID)
 			  AND TABLE_NAME = 'RPTGROUP';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RPTLIST
 AFTER INSERT OR UPDATE OR DELETE ON RPTLIST
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RPTLIST',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RPT_BATCH_ID;
 VPK2 := :OLD.RPT_ID;
     ELSE
     	VPK1 := :NEW.RPT_BATCH_ID;
 VPK2 := :NEW.RPT_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RPT_BATCH_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RPTLIST','RPT_BATCH_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RPT_BATCH_ID,:NEW.RPT_BATCH_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RPT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RPTLIST','RPT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RPT_ID,:NEW.RPT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('RPTLIST','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RPTLIST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RPTLIST_DEL
 BEFORE DELETE ON RPTLIST
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RPTLIST',:OLD.RPT_BATCH_ID,:OLD.RPT_ID,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RPTLIST
 BEFORE UPDATE OR INSERT ON RPTLIST
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.RPT_BATCH_ID)
 AND PK2 = TO_CHAR(:NEW.RPT_ID)
 		AND TABLE_NAME = 'RPTLIST';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RPTLIST',:OLD.RPT_BATCH_ID,:OLD.RPT_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RPT_BATCH_ID)
 AND PK2 = TO_CHAR(:OLD.RPT_ID)
 			  AND TABLE_NAME = 'RPTLIST';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RSRC
 AFTER INSERT OR UPDATE OR DELETE ON RSRC
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RSRC',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RSRC_ID;
     ELSE
     	VPK1 := :NEW.RSRC_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CLNDR_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','CLNDR_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CLNDR_ID,:NEW.CLNDR_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','RSRC_SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_SEQ_NUM,:NEW.RSRC_SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('TIMESHEET_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','TIMESHEET_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TIMESHEET_FLAG,:NEW.TIMESHEET_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACTIVE_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','ACTIVE_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACTIVE_FLAG,:NEW.ACTIVE_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','RSRC_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_TYPE,:NEW.RSRC_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('AUTO_COMPUTE_ACT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','AUTO_COMPUTE_ACT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.AUTO_COMPUTE_ACT_FLAG,:NEW.AUTO_COMPUTE_ACT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('OT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','OT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OT_FLAG,:NEW.OT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEF_COST_QTY_LINK_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','DEF_COST_QTY_LINK_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEF_COST_QTY_LINK_FLAG,:NEW.DEF_COST_QTY_LINK_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','RSRC_SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_SHORT_NAME,:NEW.RSRC_SHORT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','RSRC_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_NAME,:NEW.RSRC_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','PARENT_RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_RSRC_ID,:NEW.PARENT_RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('XFER_COMPLETE_DAY_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','XFER_COMPLETE_DAY_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.XFER_COMPLETE_DAY_CNT,:NEW.XFER_COMPLETE_DAY_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('XFER_NOTSTART_DAY_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','XFER_NOTSTART_DAY_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.XFER_NOTSTART_DAY_CNT,:NEW.XFER_NOTSTART_DAY_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('TS_APPROVE_USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','TS_APPROVE_USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TS_APPROVE_USER_ID,:NEW.TS_APPROVE_USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','ROLE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_ID,:NEW.ROLE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CURR_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','CURR_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CURR_ID,:NEW.CURR_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_CHECKSUM') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','LAST_CHECKSUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LAST_CHECKSUM,:NEW.LAST_CHECKSUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('SHIFT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','SHIFT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SHIFT_ID,:NEW.SHIFT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('OT_FACTOR') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','OT_FACTOR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OT_FACTOR,:NEW.OT_FACTOR); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEF_QTY_PER_HR') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','DEF_QTY_PER_HR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEF_QTY_PER_HR,:NEW.DEF_QTY_PER_HR); END IF;
     IF VOPER <> 'U' OR  UPDATING('GUID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','GUID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GUID,:NEW.GUID); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_QTY_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','COST_QTY_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_QTY_TYPE,:NEW.COST_QTY_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('OFFICE_PHONE') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','OFFICE_PHONE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OFFICE_PHONE,:NEW.OFFICE_PHONE); END IF;
     IF VOPER <> 'U' OR  UPDATING('OTHER_PHONE') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','OTHER_PHONE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OTHER_PHONE,:NEW.OTHER_PHONE); END IF;
     IF VOPER <> 'U' OR  UPDATING('EMPLOYEE_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','EMPLOYEE_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EMPLOYEE_CODE,:NEW.EMPLOYEE_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_TITLE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','RSRC_TITLE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_TITLE_NAME,:NEW.RSRC_TITLE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('EMAIL_ADDR') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','EMAIL_ADDR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EMAIL_ADDR,:NEW.EMAIL_ADDR); END IF;
     IF VOPER <> 'U' OR  UPDATING('UNIT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','UNIT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UNIT_ID,:NEW.UNIT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('POBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','POBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POBS_ID,:NEW.POBS_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('RSRC_NOTES') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('RSRC','RSRC_NOTES',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.RSRC_NOTES,:NEW.RSRC_NOTES); END IF;
     IF VOPER <> 'U' OR  UPDATING('INTG_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','INTG_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.INTG_TYPE,:NEW.INTG_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('LOCATION_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRC','LOCATION_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LOCATION_ID,:NEW.LOCATION_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RSRC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRC_DEL
 BEFORE DELETE ON RSRC
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RSRC',:OLD.RSRC_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRC
 BEFORE UPDATE OR INSERT ON RSRC
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RSRC',:OLD.RSRC_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RSRC_ID)
 			  AND TABLE_NAME = 'RSRC';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RSRCANDASH
 AFTER INSERT OR UPDATE OR DELETE ON RSRCANDASH
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RSRCANDASH',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.DASHBOARD_ID;
 VPK2 := :OLD.RSRCAN_VIEW_ID;
     ELSE
     	VPK1 := :NEW.DASHBOARD_ID;
 VPK2 := :NEW.RSRCAN_VIEW_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('DASHBOARD_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCANDASH','DASHBOARD_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.DASHBOARD_ID,:NEW.DASHBOARD_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRCAN_VIEW_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCANDASH','RSRCAN_VIEW_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRCAN_VIEW_ID,:NEW.RSRCAN_VIEW_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCANDASH','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RSRCANDASH',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCANDASH
 BEFORE UPDATE OR INSERT ON RSRCANDASH
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.DASHBOARD_ID)
 AND PK2 = TO_CHAR(:NEW.RSRCAN_VIEW_ID)
 		AND TABLE_NAME = 'RSRCANDASH';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RSRCANDASH',:OLD.DASHBOARD_ID,:OLD.RSRCAN_VIEW_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.DASHBOARD_ID)
 AND PK2 = TO_CHAR(:OLD.RSRCAN_VIEW_ID)
 			  AND TABLE_NAME = 'RSRCANDASH';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCANDASH_DEL
 BEFORE DELETE ON RSRCANDASH
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RSRCANDASH',:OLD.DASHBOARD_ID,:OLD.RSRCAN_VIEW_ID,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RSRCANVIEW
 AFTER INSERT OR UPDATE OR DELETE ON RSRCANVIEW
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RSRCANVIEW',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RSRCAN_VIEW_ID;
     ELSE
     	VPK1 := :NEW.RSRCAN_VIEW_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RSRCAN_VIEW_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCANVIEW','RSRCAN_VIEW_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RSRCAN_VIEW_ID,:NEW.RSRCAN_VIEW_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRCAN_VIEW_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCANVIEW','RSRCAN_VIEW_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRCAN_VIEW_NAME,:NEW.RSRCAN_VIEW_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCANVIEW','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRCAN_VIEW_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCANVIEW','RSRCAN_VIEW_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRCAN_VIEW_TYPE,:NEW.RSRCAN_VIEW_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRCAN_VIEW_DATA') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCANVIEW','RSRCAN_VIEW_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRCAN_VIEW_DATA,:NEW.RSRCAN_VIEW_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RSRCANVIEW',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCANVIEW_DEL
 BEFORE DELETE ON RSRCANVIEW
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RSRCANVIEW',:OLD.RSRCAN_VIEW_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCANVIEW
 BEFORE UPDATE OR INSERT ON RSRCANVIEW
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RSRCANVIEW',:OLD.RSRCAN_VIEW_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RSRCAN_VIEW_ID)
 			  AND TABLE_NAME = 'RSRCANVIEW';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RSRCCURV
 AFTER INSERT OR UPDATE OR DELETE ON RSRCCURV
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RSRCCURV',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.CURV_ID;
     ELSE
     	VPK1 := :NEW.CURV_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('CURV_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCCURV','CURV_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.CURV_ID,:NEW.CURV_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CURV_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCCURV','CURV_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CURV_NAME,:NEW.CURV_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('DEFAULT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCCURV','DEFAULT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DEFAULT_FLAG,:NEW.DEFAULT_FLAG); END IF;
     IF VOPER <> 'U' OR ( UPDATING('CURV_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('RSRCCURV','CURV_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.CURV_DATA,:NEW.CURV_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RSRCCURV',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCCURV_DEL
 BEFORE DELETE ON RSRCCURV
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RSRCCURV',:OLD.CURV_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCCURV
 BEFORE UPDATE OR INSERT ON RSRCCURV
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RSRCCURV',:OLD.CURV_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.CURV_ID)
 			  AND TABLE_NAME = 'RSRCCURV';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RSRCHOUR
 AFTER INSERT OR UPDATE OR DELETE ON RSRCHOUR
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RSRCHOUR',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RSRC_HR_ID;
     ELSE
     	VPK1 := :NEW.RSRC_HR_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RSRC_HR_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','RSRC_HR_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RSRC_HR_ID,:NEW.RSRC_HR_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','TS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TS_ID,:NEW.TS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_TS_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','TASK_TS_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_TS_FLAG,:NEW.TASK_TS_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASKRSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','TASKRSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASKRSRC_ID,:NEW.TASKRSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('NONWORK_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','NONWORK_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.NONWORK_TYPE_ID,:NEW.NONWORK_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PEND_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','PEND_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PEND_HR_CNT,:NEW.PEND_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.HR_CNT,:NEW.HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('PEND_OT_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','PEND_OT_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PEND_OT_HR_CNT,:NEW.PEND_OT_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('OT_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','OT_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OT_HR_CNT,:NEW.OT_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('WORK_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','WORK_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.WORK_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.WORK_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCHOUR','STATUS_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS_CODE,:NEW.STATUS_CODE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RSRCHOUR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCHOUR_DEL
 BEFORE DELETE ON RSRCHOUR
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'RSRCHOUR',:OLD.RSRC_HR_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCHOUR
 BEFORE UPDATE OR INSERT ON RSRCHOUR
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'RSRCHOUR',:OLD.RSRC_HR_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RSRC_HR_ID)
 			  AND TABLE_NAME = 'RSRCHOUR';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER TR_RSRCHOUR_LDI
 BEFORE UPDATE OR INSERT ON RSRCHOUR
 FOR EACH ROW
 DECLARE
   VPK_ID           NUMBER(10);
 BEGIN
   IF INSERTING 
       OR ( :NEW.DELETE_SESSION_ID IS NULL AND :OLD.DELETE_SESSION_ID IS NOT NULL ) THEN
     BEGIN
       SELECT RSRC_ID INTO VPK_ID
       FROM RSRC 
       WHERE RSRC_ID = :NEW.RSRC_ID 
       AND DELETE_SESSION_ID IS NOT NULL;
       IF INSERTING THEN
         RAISE_APPLICATION_ERROR(-20200,'LDV INTEGRITY ERROR. CANNOT INSERT/RESTORE RSRCHOUR ' ||
                                TO_CHAR(:NEW.RSRC_HR_ID )||' BECAUSE RSRC ' ||
                                TO_CHAR(:NEW.RSRC_ID) || ' IS DELETED');
       ELSE
         :NEW.DELETE_SESSION_ID := :OLD.DELETE_SESSION_ID;
       END IF;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         NULL;
     END;
     BEGIN
       SELECT TASKRSRC_ID INTO VPK_ID
       FROM TASKRSRC 
       WHERE TASKRSRC_ID = :NEW.TASKRSRC_ID 
       AND DELETE_SESSION_ID IS NOT NULL;
       IF INSERTING THEN
         RAISE_APPLICATION_ERROR(-20200,'LDV INTEGRITY ERROR. CANNOT INSERT/RESTORE RSRCHOUR ' ||
                                TO_CHAR(:NEW.RSRC_HR_ID )||' BECAUSE TASKRSRC ' ||
                                TO_CHAR(:NEW.TASKRSRC_ID) || ' IS DELETED');
       ELSE
         :NEW.DELETE_SESSION_ID := :OLD.DELETE_SESSION_ID;
       END IF;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         NULL;
     END;
   END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RSRCPROP
 AFTER INSERT OR UPDATE OR DELETE ON RSRCPROP
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RSRCPROP',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RSRC_ID;
 VPK2 := :OLD.PROP_NAME;
     ELSE
     	VPK1 := :NEW.RSRC_ID;
 VPK2 := :NEW.PROP_NAME;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCPROP','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROP_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCPROP','PROP_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROP_NAME,:NEW.PROP_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROP_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCPROP','PROP_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROP_VALUE,:NEW.PROP_VALUE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RSRCPROP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCPROP_DEL
 BEFORE DELETE ON RSRCPROP
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RSRCPROP',:OLD.RSRC_ID,:OLD.PROP_NAME,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCPROP
 BEFORE UPDATE OR INSERT ON RSRCPROP
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.RSRC_ID)
 AND PK2 = :NEW.PROP_NAME
 		AND TABLE_NAME = 'RSRCPROP';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RSRCPROP',:OLD.RSRC_ID,:OLD.PROP_NAME,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RSRC_ID)
 AND PK2 = :OLD.PROP_NAME
 			  AND TABLE_NAME = 'RSRCPROP';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RSRCRATE
 AFTER INSERT OR UPDATE OR DELETE ON RSRCRATE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RSRCRATE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RSRC_RATE_ID;
     ELSE
     	VPK1 := :NEW.RSRC_RATE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RSRC_RATE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRATE','RSRC_RATE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RSRC_RATE_ID,:NEW.RSRC_RATE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRATE','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRATE','START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('SHIFT_PERIOD_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRATE','SHIFT_PERIOD_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SHIFT_PERIOD_ID,:NEW.SHIFT_PERIOD_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('MAX_QTY_PER_HR') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRATE','MAX_QTY_PER_HR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MAX_QTY_PER_HR,:NEW.MAX_QTY_PER_HR); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRATE','COST_PER_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY,:NEW.COST_PER_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY2') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRATE','COST_PER_QTY2',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY2,:NEW.COST_PER_QTY2); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY3') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRATE','COST_PER_QTY3',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY3,:NEW.COST_PER_QTY3); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY4') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRATE','COST_PER_QTY4',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY4,:NEW.COST_PER_QTY4); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY5') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRATE','COST_PER_QTY5',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY5,:NEW.COST_PER_QTY5); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RSRCRATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCRATE_DEL
 BEFORE DELETE ON RSRCRATE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RSRCRATE',:OLD.RSRC_RATE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCRATE
 BEFORE UPDATE OR INSERT ON RSRCRATE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RSRCRATE',:OLD.RSRC_RATE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RSRC_RATE_ID)
 			  AND TABLE_NAME = 'RSRCRATE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RSRCRCAT
 AFTER INSERT OR UPDATE OR DELETE ON RSRCRCAT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RSRCRCAT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RSRC_ID;
 VPK2 := :OLD.RSRC_CATG_TYPE_ID;
     ELSE
     	VPK1 := :NEW.RSRC_ID;
 VPK2 := :NEW.RSRC_CATG_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRCAT','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_CATG_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRCAT','RSRC_CATG_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_CATG_TYPE_ID,:NEW.RSRC_CATG_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCRCAT','RSRC_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_CATG_ID,:NEW.RSRC_CATG_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RSRCRCAT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCRCAT_DEL
 BEFORE DELETE ON RSRCRCAT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RSRCRCAT',:OLD.RSRC_ID,:OLD.RSRC_CATG_TYPE_ID,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCRCAT
 BEFORE UPDATE OR INSERT ON RSRCRCAT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.RSRC_ID)
 AND PK2 = TO_CHAR(:NEW.RSRC_CATG_TYPE_ID)
 		AND TABLE_NAME = 'RSRCRCAT';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RSRCRCAT',:OLD.RSRC_ID,:OLD.RSRC_CATG_TYPE_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RSRC_ID)
 AND PK2 = TO_CHAR(:OLD.RSRC_CATG_TYPE_ID)
 			  AND TABLE_NAME = 'RSRCRCAT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RSRCROLE
 AFTER INSERT OR UPDATE OR DELETE ON RSRCROLE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RSRCROLE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RSRC_ID;
 VPK2 := :OLD.ROLE_ID;
     ELSE
     	VPK1 := :NEW.RSRC_ID;
 VPK2 := :NEW.ROLE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCROLE','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCROLE','ROLE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_ID,:NEW.ROLE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SKILL_LEVEL') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCROLE','SKILL_LEVEL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SKILL_LEVEL,:NEW.SKILL_LEVEL); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RSRCROLE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCROLE_DEL
 BEFORE DELETE ON RSRCROLE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RSRCROLE',:OLD.RSRC_ID,:OLD.ROLE_ID,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCROLE
 BEFORE UPDATE OR INSERT ON RSRCROLE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.RSRC_ID)
 AND PK2 = TO_CHAR(:NEW.ROLE_ID)
 		AND TABLE_NAME = 'RSRCROLE';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RSRCROLE',:OLD.RSRC_ID,:OLD.ROLE_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RSRC_ID)
 AND PK2 = TO_CHAR(:OLD.ROLE_ID)
 			  AND TABLE_NAME = 'RSRCROLE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RSRCSEC
 AFTER INSERT OR UPDATE OR DELETE ON RSRCSEC
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RSRCSEC',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.USER_ID;
 VPK2 := :OLD.RSRC_ID;
     ELSE
     	VPK1 := :NEW.USER_ID;
 VPK2 := :NEW.RSRC_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCSEC','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRCSEC','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RSRCSEC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCSEC_DEL
 BEFORE DELETE ON RSRCSEC
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RSRCSEC',:OLD.USER_ID,:OLD.RSRC_ID,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRCSEC
 BEFORE UPDATE OR INSERT ON RSRCSEC
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.USER_ID)
 AND PK2 = TO_CHAR(:NEW.RSRC_ID)
 		AND TABLE_NAME = 'RSRCSEC';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RSRCSEC',:OLD.USER_ID,:OLD.RSRC_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.USER_ID)
 AND PK2 = TO_CHAR(:OLD.RSRC_ID)
 			  AND TABLE_NAME = 'RSRCSEC';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER PRMAUD_RSRFOLIO
 AFTER INSERT OR UPDATE OR DELETE ON RSRFOLIO
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('RSRFOLIO',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RFOLIO_ID;
 VPK2 := :OLD.RSRC_ID;
     ELSE
     	VPK1 := :NEW.RFOLIO_ID;
 VPK2 := :NEW.RSRC_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('RFOLIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRFOLIO','RFOLIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.RFOLIO_ID,:NEW.RFOLIO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('RSRFOLIO','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'RSRFOLIO',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRFOLIO_DEL
 BEFORE DELETE ON RSRFOLIO
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'RSRFOLIO',:OLD.RFOLIO_ID,:OLD.RSRC_ID,NULL,NULL );
 END;
<09.01.2017 13:01:15> [INFO] [2017-09-01 13:01:15] CREATE OR REPLACE TRIGGER RT_RSRFOLIO
 BEFORE UPDATE OR INSERT ON RSRFOLIO
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.RFOLIO_ID)
 AND PK2 = TO_CHAR(:NEW.RSRC_ID)
 		AND TABLE_NAME = 'RSRFOLIO';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'RSRFOLIO',:OLD.RFOLIO_ID,:OLD.RSRC_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RFOLIO_ID)
 AND PK2 = TO_CHAR(:OLD.RSRC_ID)
 			  AND TABLE_NAME = 'RSRFOLIO';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_SCENARIO
 AFTER INSERT OR UPDATE OR DELETE ON SCENARIO
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('SCENARIO',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.SCENARIO_ID;
     ELSE
     	VPK1 := :NEW.SCENARIO_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('SCENARIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENARIO','SCENARIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.SCENARIO_ID,:NEW.SCENARIO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SCENARIO_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENARIO','SCENARIO_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SCENARIO_NAME,:NEW.SCENARIO_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENARIO','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TABLE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENARIO','TABLE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TABLE_NAME,:NEW.TABLE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('FK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENARIO','FK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FK_ID,:NEW.FK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SCENARIO_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENARIO','SCENARIO_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SCENARIO_TYPE,:NEW.SCENARIO_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('VIEW_PREF_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENARIO','VIEW_PREF_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.VIEW_PREF_ID,:NEW.VIEW_PREF_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('VIEW_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENARIO','VIEW_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.VIEW_TYPE,:NEW.VIEW_TYPE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'SCENARIO',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SCENARIO_DEL
 BEFORE DELETE ON SCENARIO
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'SCENARIO',:OLD.SCENARIO_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SCENARIO
 BEFORE UPDATE OR INSERT ON SCENARIO
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'SCENARIO',:OLD.SCENARIO_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.SCENARIO_ID)
 			  AND TABLE_NAME = 'SCENARIO';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_SCENPROJ
 AFTER INSERT OR UPDATE OR DELETE ON SCENPROJ
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('SCENPROJ',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.SCENARIO_ID;
 VPK2 := :OLD.PROJ_ID;
     ELSE
     	VPK1 := :NEW.SCENARIO_ID;
 VPK2 := :NEW.PROJ_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('SCENARIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENPROJ','SCENARIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.SCENARIO_ID,:NEW.SCENARIO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENPROJ','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SELECTED_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENPROJ','SELECTED_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SELECTED_FLAG,:NEW.SELECTED_FLAG); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'SCENPROJ',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SCENPROJ_DEL
 BEFORE DELETE ON SCENPROJ
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'SCENPROJ',:OLD.SCENARIO_ID,:OLD.PROJ_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SCENPROJ
 BEFORE UPDATE OR INSERT ON SCENPROJ
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.SCENARIO_ID)
 AND PK2 = TO_CHAR(:NEW.PROJ_ID)
 		AND TABLE_NAME = 'SCENPROJ';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'SCENPROJ',:OLD.SCENARIO_ID,:OLD.PROJ_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.SCENARIO_ID)
 AND PK2 = TO_CHAR(:OLD.PROJ_ID)
 			  AND TABLE_NAME = 'SCENPROJ';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_SCENROLE
 AFTER INSERT OR UPDATE OR DELETE ON SCENROLE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('SCENROLE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.SCENARIO_ID;
 VPK2 := :OLD.ROLE_ID;
     ELSE
     	VPK1 := :NEW.SCENARIO_ID;
 VPK2 := :NEW.ROLE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('SCENARIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENROLE','SCENARIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.SCENARIO_ID,:NEW.SCENARIO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENROLE','ROLE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_ID,:NEW.ROLE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SELECTED_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENROLE','SELECTED_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SELECTED_FLAG,:NEW.SELECTED_FLAG); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'SCENROLE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SCENROLE_DEL
 BEFORE DELETE ON SCENROLE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'SCENROLE',:OLD.SCENARIO_ID,:OLD.ROLE_ID,NULL,NULL );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SCENROLE
 BEFORE UPDATE OR INSERT ON SCENROLE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.SCENARIO_ID)
 AND PK2 = TO_CHAR(:NEW.ROLE_ID)
 		AND TABLE_NAME = 'SCENROLE';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'SCENROLE',:OLD.SCENARIO_ID,:OLD.ROLE_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.SCENARIO_ID)
 AND PK2 = TO_CHAR(:OLD.ROLE_ID)
 			  AND TABLE_NAME = 'SCENROLE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_SCENUSER
 AFTER INSERT OR UPDATE OR DELETE ON SCENUSER
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('SCENUSER',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   VPRM_USER_NAME := PRM_AUDIT.G_PRM_USER_NAME;
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.SCENARIO_ID;
 VPK2 := :OLD.USER_ID;
     ELSE
     	VPK1 := :NEW.SCENARIO_ID;
 VPK2 := :NEW.USER_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('SCENARIO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENUSER','SCENARIO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.SCENARIO_ID,:NEW.SCENARIO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SCENUSER','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'SCENUSER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SCENUSER
 BEFORE UPDATE OR INSERT ON SCENUSER
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
   :NEW.UPDATE_USER := PRM_AUDIT.G_PRM_USER_NAME;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.G_PRM_USER_NAME;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'SCENUSER',:OLD.SCENARIO_ID,:OLD.USER_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.SCENARIO_ID)
 AND PK2 = TO_CHAR(:OLD.USER_ID)
 			  AND TABLE_NAME = 'SCENUSER';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SCENUSER_DEL
 BEFORE DELETE ON SCENUSER
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'SCENUSER',:OLD.SCENARIO_ID,:OLD.USER_ID,NULL,NULL );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SETTINGS_DEL
 BEFORE DELETE ON SETTINGS
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'SETTINGS',:OLD.NAMESPACE,:OLD.SETTING_NAME,NULL,NULL );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SETTINGS
 BEFORE UPDATE OR INSERT ON SETTINGS
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.NAMESPACE)
 AND PK2 = :NEW.SETTING_NAME
 		AND TABLE_NAME = 'SETTINGS';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'SETTINGS',:OLD.NAMESPACE,:OLD.SETTING_NAME,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.NAMESPACE)
 AND PK2 = :OLD.SETTING_NAME
 			  AND TABLE_NAME = 'SETTINGS';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_SHIFT
 AFTER INSERT OR UPDATE OR DELETE ON SHIFT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('SHIFT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.SHIFT_ID;
     ELSE
     	VPK1 := :NEW.SHIFT_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('SHIFT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SHIFT','SHIFT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.SHIFT_ID,:NEW.SHIFT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SHIFT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('SHIFT','SHIFT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SHIFT_NAME,:NEW.SHIFT_NAME); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'SHIFT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SHIFT_DEL
 BEFORE DELETE ON SHIFT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'SHIFT',:OLD.SHIFT_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SHIFT
 BEFORE UPDATE OR INSERT ON SHIFT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'SHIFT',:OLD.SHIFT_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.SHIFT_ID)
 			  AND TABLE_NAME = 'SHIFT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_SHIFTPER
 AFTER INSERT OR UPDATE OR DELETE ON SHIFTPER
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('SHIFTPER',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.SHIFT_PERIOD_ID;
     ELSE
     	VPK1 := :NEW.SHIFT_PERIOD_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('SHIFT_PERIOD_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SHIFTPER','SHIFT_PERIOD_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.SHIFT_PERIOD_ID,:NEW.SHIFT_PERIOD_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SHIFT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('SHIFTPER','SHIFT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SHIFT_ID,:NEW.SHIFT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SHIFT_START_HR_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('SHIFTPER','SHIFT_START_HR_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SHIFT_START_HR_NUM,:NEW.SHIFT_START_HR_NUM); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'SHIFTPER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SHIFTPER_DEL
 BEFORE DELETE ON SHIFTPER
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'SHIFTPER',:OLD.SHIFT_PERIOD_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_SHIFTPER
 BEFORE UPDATE OR INSERT ON SHIFTPER
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'SHIFTPER',:OLD.SHIFT_PERIOD_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.SHIFT_PERIOD_ID)
 			  AND TABLE_NAME = 'SHIFTPER';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASK
 AFTER INSERT OR UPDATE OR DELETE ON TASK
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASK',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TASK_ID;
     ELSE
     	VPK1 := :NEW.TASK_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CLNDR_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','CLNDR_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CLNDR_ID,:NEW.CLNDR_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('EST_WT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','EST_WT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EST_WT,:NEW.EST_WT); END IF;
     IF VOPER <> 'U' OR  UPDATING('PHYS_COMPLETE_PCT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','PHYS_COMPLETE_PCT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PHYS_COMPLETE_PCT,:NEW.PHYS_COMPLETE_PCT); END IF;
     IF VOPER <> 'U' OR  UPDATING('REV_FDBK_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','REV_FDBK_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REV_FDBK_FLAG,:NEW.REV_FDBK_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('LOCK_PLAN_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','LOCK_PLAN_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LOCK_PLAN_FLAG,:NEW.LOCK_PLAN_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('AUTO_COMPUTE_ACT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','AUTO_COMPUTE_ACT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.AUTO_COMPUTE_ACT_FLAG,:NEW.AUTO_COMPUTE_ACT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('COMPLETE_PCT_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','COMPLETE_PCT_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COMPLETE_PCT_TYPE,:NEW.COMPLETE_PCT_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','TASK_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_TYPE,:NEW.TASK_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('DURATION_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','DURATION_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DURATION_TYPE,:NEW.DURATION_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('REVIEW_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','REVIEW_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REVIEW_TYPE,:NEW.REVIEW_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','STATUS_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS_CODE,:NEW.STATUS_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','TASK_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_CODE,:NEW.TASK_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','TASK_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_NAME,:NEW.TASK_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOTAL_FLOAT_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','TOTAL_FLOAT_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOTAL_FLOAT_HR_CNT,:NEW.TOTAL_FLOAT_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('FREE_FLOAT_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','FREE_FLOAT_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FREE_FLOAT_HR_CNT,:NEW.FREE_FLOAT_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_DRTN_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','REMAIN_DRTN_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_DRTN_HR_CNT,:NEW.REMAIN_DRTN_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','ACT_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_WORK_QTY,:NEW.ACT_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','REMAIN_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_WORK_QTY,:NEW.REMAIN_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','TARGET_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_WORK_QTY,:NEW.TARGET_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_DRTN_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','TARGET_DRTN_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_DRTN_HR_CNT,:NEW.TARGET_DRTN_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','TARGET_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_EQUIP_QTY,:NEW.TARGET_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','ACT_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_EQUIP_QTY,:NEW.ACT_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','REMAIN_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_EQUIP_QTY,:NEW.REMAIN_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('CSTR_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','CSTR_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.CSTR_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.CSTR_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','ACT_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.ACT_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.ACT_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','ACT_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.ACT_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.ACT_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('LATE_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','LATE_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.LATE_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.LATE_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('LATE_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','LATE_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.LATE_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.LATE_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('EXPECT_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','EXPECT_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.EXPECT_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.EXPECT_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('EARLY_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','EARLY_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.EARLY_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.EARLY_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('EARLY_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','EARLY_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.EARLY_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.EARLY_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('RESTART_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','RESTART_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.RESTART_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.RESTART_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('REEND_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','REEND_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.REEND_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.REEND_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','TARGET_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.TARGET_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.TARGET_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','TARGET_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.TARGET_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.TARGET_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('REVIEW_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','REVIEW_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.REVIEW_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.REVIEW_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('REM_LATE_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','REM_LATE_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.REM_LATE_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.REM_LATE_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('REM_LATE_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','REM_LATE_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.REM_LATE_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.REM_LATE_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('CSTR_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','CSTR_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CSTR_TYPE,:NEW.CSTR_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRIORITY_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','PRIORITY_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRIORITY_TYPE,:NEW.PRIORITY_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('GUID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','GUID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GUID,:NEW.GUID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TMPL_GUID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','TMPL_GUID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TMPL_GUID,:NEW.TMPL_GUID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CSTR_DATE2') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','CSTR_DATE2',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.CSTR_DATE2,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.CSTR_DATE2,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('CSTR_TYPE2') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','CSTR_TYPE2',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CSTR_TYPE2,:NEW.CSTR_TYPE2); END IF;
     IF VOPER <> 'U' OR  UPDATING('FLOAT_PATH') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','FLOAT_PATH',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FLOAT_PATH,:NEW.FLOAT_PATH); END IF;
     IF VOPER <> 'U' OR  UPDATING('FLOAT_PATH_ORDER') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','FLOAT_PATH_ORDER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FLOAT_PATH_ORDER,:NEW.FLOAT_PATH_ORDER); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_THIS_PER_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','ACT_THIS_PER_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_THIS_PER_WORK_QTY,:NEW.ACT_THIS_PER_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_THIS_PER_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','ACT_THIS_PER_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_THIS_PER_EQUIP_QTY,:NEW.ACT_THIS_PER_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('DRIVING_PATH_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','DRIVING_PATH_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DRIVING_PATH_FLAG,:NEW.DRIVING_PATH_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUSPEND_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','SUSPEND_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.SUSPEND_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.SUSPEND_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('RESUME_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','RESUME_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.RESUME_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.RESUME_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('EXTERNAL_EARLY_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','EXTERNAL_EARLY_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.EXTERNAL_EARLY_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.EXTERNAL_EARLY_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('EXTERNAL_LATE_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','EXTERNAL_LATE_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.EXTERNAL_LATE_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.EXTERNAL_LATE_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('LOCATION_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','LOCATION_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LOCATION_ID,:NEW.LOCATION_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CONTROL_UPDATES_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TASK','CONTROL_UPDATES_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CONTROL_UPDATES_FLAG,:NEW.CONTROL_UPDATES_FLAG); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASK',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASK_DEL
 BEFORE DELETE ON TASK
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASK',:OLD.TASK_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASK
 BEFORE UPDATE OR INSERT ON TASK
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASK',:OLD.TASK_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TASK_ID)
 			  AND TABLE_NAME = 'TASK';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKACTV
 AFTER INSERT OR UPDATE OR DELETE ON TASKACTV
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKACTV',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TASK_ID;
 VPK2 := :OLD.ACTV_CODE_TYPE_ID;
     ELSE
     	VPK1 := :NEW.TASK_ID;
 VPK2 := :NEW.ACTV_CODE_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKACTV','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACTV_CODE_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKACTV','ACTV_CODE_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACTV_CODE_TYPE_ID,:NEW.ACTV_CODE_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACTV_CODE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKACTV','ACTV_CODE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACTV_CODE_ID,:NEW.ACTV_CODE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKACTV','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKACTV',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKACTV_DEL
 BEFORE DELETE ON TASKACTV
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKACTV',:OLD.TASK_ID,:OLD.ACTV_CODE_TYPE_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKACTV
 BEFORE UPDATE OR INSERT ON TASKACTV
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.TASK_ID)
 AND PK2 = TO_CHAR(:NEW.ACTV_CODE_TYPE_ID)
 		AND TABLE_NAME = 'TASKACTV';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKACTV',:OLD.TASK_ID,:OLD.ACTV_CODE_TYPE_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TASK_ID)
 AND PK2 = TO_CHAR(:OLD.ACTV_CODE_TYPE_ID)
 			  AND TABLE_NAME = 'TASKACTV';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKDOC
 AFTER INSERT OR UPDATE OR DELETE ON TASKDOC
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKDOC',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TASKDOC_ID;
     ELSE
     	VPK1 := :NEW.TASKDOC_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASKDOC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKDOC','TASKDOC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASKDOC_ID,:NEW.TASKDOC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DOC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKDOC','DOC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DOC_ID,:NEW.DOC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKDOC','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKDOC','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WP_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKDOC','WP_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WP_FLAG,:NEW.WP_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKDOC','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKDOC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKDOC_DEL
 BEFORE DELETE ON TASKDOC
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKDOC',:OLD.TASKDOC_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKDOC
 BEFORE UPDATE OR INSERT ON TASKDOC
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKDOC',:OLD.TASKDOC_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TASKDOC_ID)
 			  AND TABLE_NAME = 'TASKDOC';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKFDBK
 AFTER INSERT OR UPDATE OR DELETE ON TASKFDBK
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKFDBK',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TASK_ID;
     ELSE
     	VPK1 := :NEW.TASK_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFDBK','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFDBK','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('TASK_FDBK') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('TASKFDBK','TASK_FDBK',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.TASK_FDBK,:NEW.TASK_FDBK); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKFDBK',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKFDBK_DEL
 BEFORE DELETE ON TASKFDBK
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKFDBK',:OLD.TASK_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKFDBK
 BEFORE UPDATE OR INSERT ON TASKFDBK
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKFDBK',:OLD.TASK_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TASK_ID)
 			  AND TABLE_NAME = 'TASKFDBK';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKFIN
 AFTER INSERT OR UPDATE OR DELETE ON TASKFIN
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKFIN',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.FIN_DATES_ID;
 VPK2 := :OLD.TASK_ID;
     ELSE
     	VPK1 := :NEW.FIN_DATES_ID;
 VPK2 := :NEW.TASK_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('FIN_DATES_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','FIN_DATES_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.FIN_DATES_ID,:NEW.FIN_DATES_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','ACT_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_WORK_QTY,:NEW.ACT_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_WORK_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','ACT_WORK_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_WORK_COST,:NEW.ACT_WORK_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','ACT_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_EQUIP_QTY,:NEW.ACT_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_EQUIP_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','ACT_EQUIP_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_EQUIP_COST,:NEW.ACT_EQUIP_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_MAT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','ACT_MAT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_MAT_COST,:NEW.ACT_MAT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_EXPENSE_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','ACT_EXPENSE_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_EXPENSE_COST,:NEW.ACT_EXPENSE_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('BCWP') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','BCWP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BCWP,:NEW.BCWP); END IF;
     IF VOPER <> 'U' OR  UPDATING('SCHED_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','SCHED_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SCHED_WORK_QTY,:NEW.SCHED_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('BCWS') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','BCWS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BCWS,:NEW.BCWS); END IF;
     IF VOPER <> 'U' OR  UPDATING('PERFM_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKFIN','PERFM_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PERFM_WORK_QTY,:NEW.PERFM_WORK_QTY); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKFIN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKFIN_DEL
 BEFORE DELETE ON TASKFIN
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKFIN',:OLD.FIN_DATES_ID,:OLD.TASK_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKFIN
 BEFORE UPDATE OR INSERT ON TASKFIN
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.FIN_DATES_ID)
 AND PK2 = TO_CHAR(:NEW.TASK_ID)
 		AND TABLE_NAME = 'TASKFIN';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKFIN',:OLD.FIN_DATES_ID,:OLD.TASK_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.FIN_DATES_ID)
 AND PK2 = TO_CHAR(:OLD.TASK_ID)
 			  AND TABLE_NAME = 'TASKFIN';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKMEMO
 AFTER INSERT OR UPDATE OR DELETE ON TASKMEMO
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKMEMO',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.MEMO_ID;
     ELSE
     	VPK1 := :NEW.MEMO_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('MEMO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKMEMO','MEMO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.MEMO_ID,:NEW.MEMO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKMEMO','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('MEMO_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKMEMO','MEMO_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MEMO_TYPE_ID,:NEW.MEMO_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKMEMO','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('TASK_MEMO') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('TASKMEMO','TASK_MEMO',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.TASK_MEMO,:NEW.TASK_MEMO); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKMEMO',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKMEMO_DEL
 BEFORE DELETE ON TASKMEMO
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKMEMO',:OLD.MEMO_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKMEMO
 BEFORE UPDATE OR INSERT ON TASKMEMO
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKMEMO',:OLD.MEMO_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.MEMO_ID)
 			  AND TABLE_NAME = 'TASKMEMO';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKNOTE
 AFTER INSERT OR UPDATE OR DELETE ON TASKNOTE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKNOTE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TASK_ID;
     ELSE
     	VPK1 := :NEW.TASK_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKNOTE','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKNOTE','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('TASK_NOTES') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('TASKNOTE','TASK_NOTES',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.TASK_NOTES,:NEW.TASK_NOTES); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKNOTE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKNOTE_DEL
 BEFORE DELETE ON TASKNOTE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKNOTE',:OLD.TASK_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKNOTE
 BEFORE UPDATE OR INSERT ON TASKNOTE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKNOTE',:OLD.TASK_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TASK_ID)
 			  AND TABLE_NAME = 'TASKNOTE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKPRED
 AFTER INSERT OR UPDATE OR DELETE ON TASKPRED
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKPRED',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TASK_PRED_ID;
     ELSE
     	VPK1 := :NEW.TASK_PRED_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASK_PRED_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPRED','TASK_PRED_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASK_PRED_ID,:NEW.TASK_PRED_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPRED','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRED_TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPRED','PRED_TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRED_TASK_ID,:NEW.PRED_TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPRED','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRED_PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPRED','PRED_PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRED_PROJ_ID,:NEW.PRED_PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRED_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPRED','PRED_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRED_TYPE,:NEW.PRED_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAG_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPRED','LAG_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LAG_HR_CNT,:NEW.LAG_HR_CNT); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKPRED',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKPRED_DEL
 BEFORE DELETE ON TASKPRED
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKPRED',:OLD.TASK_PRED_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 	IF :OLD.PRED_PROJ_ID != :OLD.PROJ_ID THEN
     INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
     VALUES ( SYSDATE,'TASKPRED',:OLD.TASK_PRED_ID,NULL,NULL,NULL
   	,:OLD.PRED_PROJ_ID );
    END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKPRED
 BEFORE UPDATE OR INSERT ON TASKPRED
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKPRED',:OLD.TASK_PRED_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			  IF :OLD.PRED_PROJ_ID != :OLD.PROJ_ID THEN
 				INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 				VALUES ( SYSDATE,'TASKPRED',:OLD.TASK_PRED_ID,NULL,NULL,NULL
   	,:OLD.PRED_PROJ_ID );
 			  END IF;
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TASK_PRED_ID)
 			  AND TABLE_NAME = 'TASKPRED';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKPROC
 AFTER INSERT OR UPDATE OR DELETE ON TASKPROC
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKPROC',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.PROC_ID;
     ELSE
     	VPK1 := :NEW.PROC_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('PROC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPROC','PROC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.PROC_ID,:NEW.PROC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPROC','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPROC','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPROC','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('COMPLETE_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPROC','COMPLETE_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COMPLETE_FLAG,:NEW.COMPLETE_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROC_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPROC','PROC_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROC_NAME,:NEW.PROC_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROC_WT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPROC','PROC_WT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROC_WT,:NEW.PROC_WT); END IF;
     IF VOPER <> 'U' OR  UPDATING('COMPLETE_PCT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKPROC','COMPLETE_PCT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COMPLETE_PCT,:NEW.COMPLETE_PCT); END IF;
     IF VOPER <> 'U' OR ( UPDATING('PROC_DESCR') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('TASKPROC','PROC_DESCR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.PROC_DESCR,:NEW.PROC_DESCR); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKPROC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKPROC_DEL
 BEFORE DELETE ON TASKPROC
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKPROC',:OLD.PROC_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKPROC
 BEFORE UPDATE OR INSERT ON TASKPROC
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKPROC',:OLD.PROC_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.PROC_ID)
 			  AND TABLE_NAME = 'TASKPROC';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKRISK
 BEFORE UPDATE OR INSERT ON TASKRISK
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.RISK_ID)
 AND PK2 = TO_CHAR(:NEW.TASK_ID)
 		AND TABLE_NAME = 'TASKRISK';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKRISK',:OLD.RISK_ID,:OLD.TASK_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.RISK_ID)
 AND PK2 = TO_CHAR(:OLD.TASK_ID)
 			  AND TABLE_NAME = 'TASKRISK';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKRISK
 AFTER INSERT OR UPDATE OR DELETE ON TASKRISK
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKRISK',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.RISK_ID;
 VPK2 := :OLD.TASK_ID;
     ELSE
     	VPK1 := :NEW.RISK_ID;
 VPK2 := :NEW.TASK_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRISK','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RISK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRISK','RISK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RISK_ID,:NEW.RISK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRISK','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKRISK',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKRISK_DEL
 BEFORE DELETE ON TASKRISK
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKRISK',:OLD.RISK_ID,:OLD.TASK_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKRSRC
 AFTER INSERT OR UPDATE OR DELETE ON TASKRSRC
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKRSRC',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TASKRSRC_ID;
     ELSE
     	VPK1 := :NEW.TASKRSRC_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASKRSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','TASKRSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASKRSRC_ID,:NEW.TASKRSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','RSRC_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_TYPE,:NEW.RSRC_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_QTY_LINK_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','COST_QTY_LINK_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_QTY_LINK_FLAG,:NEW.COST_QTY_LINK_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','ROLE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_ID,:NEW.ROLE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACCT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','ACCT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACCT_ID,:NEW.ACCT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('POBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','POBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.POBS_ID,:NEW.POBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SKILL_LEVEL') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','SKILL_LEVEL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SKILL_LEVEL,:NEW.SKILL_LEVEL); END IF;
     IF VOPER <> 'U' OR  UPDATING('PEND_COMPLETE_PCT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','PEND_COMPLETE_PCT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PEND_COMPLETE_PCT,:NEW.PEND_COMPLETE_PCT); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','REMAIN_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_QTY,:NEW.REMAIN_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('PEND_REMAIN_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','PEND_REMAIN_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PEND_REMAIN_QTY,:NEW.PEND_REMAIN_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','TARGET_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_QTY,:NEW.TARGET_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_QTY_PER_HR') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','REMAIN_QTY_PER_HR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_QTY_PER_HR,:NEW.REMAIN_QTY_PER_HR); END IF;
     IF VOPER <> 'U' OR  UPDATING('PEND_ACT_REG_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','PEND_ACT_REG_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PEND_ACT_REG_QTY,:NEW.PEND_ACT_REG_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_LAG_DRTN_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','TARGET_LAG_DRTN_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_LAG_DRTN_HR_CNT,:NEW.TARGET_LAG_DRTN_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_QTY_PER_HR') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','TARGET_QTY_PER_HR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_QTY_PER_HR,:NEW.TARGET_QTY_PER_HR); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_OT_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','ACT_OT_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_OT_QTY,:NEW.ACT_OT_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('PEND_ACT_OT_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','PEND_ACT_OT_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PEND_ACT_OT_QTY,:NEW.PEND_ACT_OT_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_REG_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','ACT_REG_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_REG_QTY,:NEW.ACT_REG_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('RELAG_DRTN_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','RELAG_DRTN_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RELAG_DRTN_HR_CNT,:NEW.RELAG_DRTN_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('OT_FACTOR') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','OT_FACTOR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OT_FACTOR,:NEW.OT_FACTOR); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','COST_PER_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY,:NEW.COST_PER_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','TARGET_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_COST,:NEW.TARGET_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_REG_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','ACT_REG_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_REG_COST,:NEW.ACT_REG_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_OT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','ACT_OT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_OT_COST,:NEW.ACT_OT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','REMAIN_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_COST,:NEW.REMAIN_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','ACT_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.ACT_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.ACT_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','ACT_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.ACT_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.ACT_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('RESTART_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','RESTART_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.RESTART_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.RESTART_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('REEND_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','REEND_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.REEND_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.REEND_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','TARGET_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.TARGET_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.TARGET_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','TARGET_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.TARGET_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.TARGET_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('REM_LATE_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','REM_LATE_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.REM_LATE_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.REM_LATE_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('REM_LATE_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','REM_LATE_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.REM_LATE_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.REM_LATE_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('GUID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','GUID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GUID,:NEW.GUID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RATE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','RATE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RATE_TYPE,:NEW.RATE_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_THIS_PER_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','ACT_THIS_PER_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_THIS_PER_COST,:NEW.ACT_THIS_PER_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_THIS_PER_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','ACT_THIS_PER_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_THIS_PER_QTY,:NEW.ACT_THIS_PER_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('CURV_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','CURV_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CURV_ID,:NEW.CURV_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLLUP_DATES_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','ROLLUP_DATES_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLLUP_DATES_FLAG,:NEW.ROLLUP_DATES_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('COST_PER_QTY_SOURCE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','COST_PER_QTY_SOURCE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COST_PER_QTY_SOURCE_TYPE,:NEW.COST_PER_QTY_SOURCE_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_CRV') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','REMAIN_CRV',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_CRV,:NEW.REMAIN_CRV); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_CRV') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','TARGET_CRV',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_CRV,:NEW.TARGET_CRV); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACTUAL_CRV') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','ACTUAL_CRV',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACTUAL_CRV,:NEW.ACTUAL_CRV); END IF;
     IF VOPER <> 'U' OR ( UPDATING('RSRC_REQUEST_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('TASKRSRC','RSRC_REQUEST_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.RSRC_REQUEST_DATA,:NEW.RSRC_REQUEST_DATA); END IF;
     IF VOPER <> 'U' OR  UPDATING('TS_PEND_ACT_END_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','TS_PEND_ACT_END_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TS_PEND_ACT_END_FLAG,:NEW.TS_PEND_ACT_END_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRIOR_TS_ACT_REG_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','PRIOR_TS_ACT_REG_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRIOR_TS_ACT_REG_QTY,:NEW.PRIOR_TS_ACT_REG_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('PRIOR_TS_ACT_OT_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKRSRC','PRIOR_TS_ACT_OT_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PRIOR_TS_ACT_OT_QTY,:NEW.PRIOR_TS_ACT_OT_QTY); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKRSRC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKRSRC_DEL
 BEFORE DELETE ON TASKRSRC
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKRSRC',:OLD.TASKRSRC_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKRSRC
 BEFORE UPDATE OR INSERT ON TASKRSRC
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKRSRC',:OLD.TASKRSRC_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TASKRSRC_ID)
 			  AND TABLE_NAME = 'TASKRSRC';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKSUM
 AFTER INSERT OR UPDATE OR DELETE ON TASKSUM
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKSUM',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TASK_SUM_ID;
     ELSE
     	VPK1 := :NEW.TASK_SUM_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASK_SUM_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','TASK_SUM_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASK_SUM_ID,:NEW.TASK_SUM_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('COMPLETE_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','COMPLETE_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COMPLETE_CNT,:NEW.COMPLETE_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACTIVE_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACTIVE_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACTIVE_CNT,:NEW.ACTIVE_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('NOTSTARTED_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','NOTSTARTED_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.NOTSTARTED_CNT,:NEW.NOTSTARTED_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_COMPLETE_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BASE_COMPLETE_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_COMPLETE_CNT,:NEW.BASE_COMPLETE_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_ACTIVE_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BASE_ACTIVE_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_ACTIVE_CNT,:NEW.BASE_ACTIVE_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_NOTSTARTED_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BASE_NOTSTARTED_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_NOTSTARTED_CNT,:NEW.BASE_NOTSTARTED_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_DRTN_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_DRTN_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_DRTN_HR_CNT,:NEW.ACT_DRTN_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_EQUIP_QTY,:NEW.ACT_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_WORK_QTY,:NEW.ACT_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOTAL_DRTN_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','TOTAL_DRTN_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOTAL_DRTN_HR_CNT,:NEW.TOTAL_DRTN_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_DRTN_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BASE_DRTN_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_DRTN_HR_CNT,:NEW.BASE_DRTN_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BASE_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_WORK_QTY,:NEW.BASE_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BASE_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_EQUIP_QTY,:NEW.BASE_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ETC_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ETC_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ETC_WORK_QTY,:NEW.ETC_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_DRTN_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','REMAIN_DRTN_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_DRTN_HR_CNT,:NEW.REMAIN_DRTN_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','REMAIN_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_WORK_QTY,:NEW.REMAIN_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','REMAIN_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_EQUIP_QTY,:NEW.REMAIN_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOTAL_FLOAT_HR_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','TOTAL_FLOAT_HR_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOTAL_FLOAT_HR_CNT,:NEW.TOTAL_FLOAT_HR_CNT); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_EXPENSE_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_EXPENSE_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_EXPENSE_COST,:NEW.ACT_EXPENSE_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_WORK_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_WORK_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_WORK_COST,:NEW.ACT_WORK_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_EQUIP_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_EQUIP_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_EQUIP_COST,:NEW.ACT_EQUIP_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_EXPENSE_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BASE_EXPENSE_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_EXPENSE_COST,:NEW.BASE_EXPENSE_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_WORK_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BASE_WORK_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_WORK_COST,:NEW.BASE_WORK_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_EQUIP_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BASE_EQUIP_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_EQUIP_COST,:NEW.BASE_EQUIP_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('BCWP') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BCWP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BCWP,:NEW.BCWP); END IF;
     IF VOPER <> 'U' OR  UPDATING('ETC') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ETC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ETC,:NEW.ETC); END IF;
     IF VOPER <> 'U' OR  UPDATING('BCWS') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BCWS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BCWS,:NEW.BCWS); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_EXPENSE_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','REMAIN_EXPENSE_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_EXPENSE_COST,:NEW.REMAIN_EXPENSE_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_WORK_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','REMAIN_WORK_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_WORK_COST,:NEW.REMAIN_WORK_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_EQUIP_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','REMAIN_EQUIP_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_EQUIP_COST,:NEW.REMAIN_EQUIP_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('PERFM_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','PERFM_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PERFM_WORK_QTY,:NEW.PERFM_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('SCHED_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','SCHED_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SCHED_WORK_QTY,:NEW.SCHED_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.ACT_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.ACT_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.ACT_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.ACT_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BASE_END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.BASE_END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.BASE_END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BASE_START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.BASE_START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.BASE_START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('REEND_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','REEND_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.REEND_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.REEND_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('RESTART_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','RESTART_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.RESTART_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.RESTART_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_THIS_PER_WORK_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_THIS_PER_WORK_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_THIS_PER_WORK_COST,:NEW.ACT_THIS_PER_WORK_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_THIS_PER_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_THIS_PER_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_THIS_PER_WORK_QTY,:NEW.ACT_THIS_PER_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_THIS_PER_EQUIP_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_THIS_PER_EQUIP_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_THIS_PER_EQUIP_COST,:NEW.ACT_THIS_PER_EQUIP_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_THIS_PER_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_THIS_PER_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_THIS_PER_EQUIP_QTY,:NEW.ACT_THIS_PER_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_MAT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','BASE_MAT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_MAT_COST,:NEW.BASE_MAT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_MAT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','REMAIN_MAT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_MAT_COST,:NEW.REMAIN_MAT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_MAT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_MAT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_MAT_COST,:NEW.ACT_MAT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_THIS_PER_MAT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUM','ACT_THIS_PER_MAT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_THIS_PER_MAT_COST,:NEW.ACT_THIS_PER_MAT_COST); END IF;
     IF VOPER <> 'U' OR ( UPDATING('SPREAD_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('TASKSUM','SPREAD_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.SPREAD_DATA,:NEW.SPREAD_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKSUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKSUM_DEL
 BEFORE DELETE ON TASKSUM
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKSUM',:OLD.TASK_SUM_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKSUM
 BEFORE UPDATE OR INSERT ON TASKSUM
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKSUM',:OLD.TASK_SUM_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TASK_SUM_ID)
 			  AND TABLE_NAME = 'TASKSUM';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKSUMFIN
 AFTER INSERT OR UPDATE OR DELETE ON TASKSUMFIN
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKSUMFIN',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TASK_SUM_FIN_ID;
     ELSE
     	VPK1 := :NEW.TASK_SUM_FIN_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASK_SUM_FIN_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TASK_SUM_FIN_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASK_SUM_FIN_ID,:NEW.TASK_SUM_FIN_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FIN_DATES_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','FIN_DATES_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FIN_DATES_ID,:NEW.FIN_DATES_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_SUM_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TASK_SUM_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_SUM_ID,:NEW.TASK_SUM_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','ACT_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_WORK_QTY,:NEW.ACT_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_WORK_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','ACT_WORK_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_WORK_COST,:NEW.ACT_WORK_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','ACT_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_EQUIP_QTY,:NEW.ACT_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_EQUIP_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','ACT_EQUIP_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_EQUIP_COST,:NEW.ACT_EQUIP_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_MAT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','ACT_MAT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_MAT_COST,:NEW.ACT_MAT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_EXPENSE_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','ACT_EXPENSE_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_EXPENSE_COST,:NEW.ACT_EXPENSE_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOTAL_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TOTAL_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOTAL_WORK_QTY,:NEW.TOTAL_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOTAL_WORK_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TOTAL_WORK_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOTAL_WORK_COST,:NEW.TOTAL_WORK_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOTAL_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TOTAL_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOTAL_EQUIP_QTY,:NEW.TOTAL_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOTAL_EQUIP_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TOTAL_EQUIP_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOTAL_EQUIP_COST,:NEW.TOTAL_EQUIP_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOTAL_MAT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TOTAL_MAT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOTAL_MAT_COST,:NEW.TOTAL_MAT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOTAL_EXPENSE_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TOTAL_EXPENSE_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOTAL_EXPENSE_COST,:NEW.TOTAL_EXPENSE_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOTAL_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TOTAL_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOTAL_COST,:NEW.TOTAL_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','ACT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_COST,:NEW.ACT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('BCWP') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','BCWP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BCWP,:NEW.BCWP); END IF;
     IF VOPER <> 'U' OR  UPDATING('PERFM_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','PERFM_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PERFM_WORK_QTY,:NEW.PERFM_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ETC') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','ETC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ETC,:NEW.ETC); END IF;
     IF VOPER <> 'U' OR  UPDATING('ETC_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','ETC_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ETC_WORK_QTY,:NEW.ETC_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('EAC') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','EAC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EAC,:NEW.EAC); END IF;
     IF VOPER <> 'U' OR  UPDATING('EAC_WORK') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','EAC_WORK',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EAC_WORK,:NEW.EAC_WORK); END IF;
     IF VOPER <> 'U' OR  UPDATING('BCWS') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','BCWS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BCWS,:NEW.BCWS); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACWP') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','ACWP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACWP,:NEW.ACWP); END IF;
     IF VOPER <> 'U' OR  UPDATING('SCHED_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','SCHED_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SCHED_WORK_QTY,:NEW.SCHED_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','BASE_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_COST,:NEW.BASE_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','BASE_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_WORK_QTY,:NEW.BASE_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_WORK_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','BASE_WORK_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_WORK_COST,:NEW.BASE_WORK_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_MAT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','BASE_MAT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_MAT_COST,:NEW.BASE_MAT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_EQUIP_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','BASE_EQUIP_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_EQUIP_COST,:NEW.BASE_EQUIP_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','BASE_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_EQUIP_QTY,:NEW.BASE_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('BASE_EXPENSE_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','BASE_EXPENSE_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BASE_EXPENSE_COST,:NEW.BASE_EXPENSE_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','REMAIN_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_COST,:NEW.REMAIN_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','REMAIN_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_WORK_QTY,:NEW.REMAIN_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_WORK_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','REMAIN_WORK_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_WORK_COST,:NEW.REMAIN_WORK_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_MAT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','REMAIN_MAT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_MAT_COST,:NEW.REMAIN_MAT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_EQUIP_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','REMAIN_EQUIP_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_EQUIP_COST,:NEW.REMAIN_EQUIP_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','REMAIN_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_EQUIP_QTY,:NEW.REMAIN_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_EXPENSE_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','REMAIN_EXPENSE_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_EXPENSE_COST,:NEW.REMAIN_EXPENSE_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TARGET_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_COST,:NEW.TARGET_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_EQUIP_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TARGET_EQUIP_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_EQUIP_COST,:NEW.TARGET_EQUIP_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TARGET_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_EQUIP_QTY,:NEW.TARGET_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_EXPENSE_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TARGET_EXPENSE_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_EXPENSE_COST,:NEW.TARGET_EXPENSE_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_MAT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TARGET_MAT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_MAT_COST,:NEW.TARGET_MAT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_WORK_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TARGET_WORK_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_WORK_COST,:NEW.TARGET_WORK_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','TARGET_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_WORK_QTY,:NEW.TARGET_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('LATE_REMAIN_WORK_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','LATE_REMAIN_WORK_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LATE_REMAIN_WORK_QTY,:NEW.LATE_REMAIN_WORK_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('LATE_REMAIN_WORK_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','LATE_REMAIN_WORK_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LATE_REMAIN_WORK_COST,:NEW.LATE_REMAIN_WORK_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('LATE_REMAIN_EQUIP_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','LATE_REMAIN_EQUIP_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LATE_REMAIN_EQUIP_COST,:NEW.LATE_REMAIN_EQUIP_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('LATE_REMAIN_EQUIP_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','LATE_REMAIN_EQUIP_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LATE_REMAIN_EQUIP_QTY,:NEW.LATE_REMAIN_EQUIP_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('LATE_REMAIN_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','LATE_REMAIN_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LATE_REMAIN_COST,:NEW.LATE_REMAIN_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('LATE_REMAIN_MAT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','LATE_REMAIN_MAT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LATE_REMAIN_MAT_COST,:NEW.LATE_REMAIN_MAT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('LATE_REMAIN_EXPENSE_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKSUMFIN','LATE_REMAIN_EXPENSE_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LATE_REMAIN_EXPENSE_COST,:NEW.LATE_REMAIN_EXPENSE_COST); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKSUMFIN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKSUMFIN_DEL
 BEFORE DELETE ON TASKSUMFIN
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKSUMFIN',:OLD.TASK_SUM_FIN_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER RT_TASKSUMFIN
 BEFORE UPDATE OR INSERT ON TASKSUMFIN
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKSUMFIN',:OLD.TASK_SUM_FIN_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TASK_SUM_FIN_ID)
 			  AND TABLE_NAME = 'TASKSUMFIN';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:16> [INFO] [2017-09-01 13:01:16] CREATE OR REPLACE TRIGGER PRMAUD_TASKUSER
 AFTER INSERT OR UPDATE OR DELETE ON TASKUSER
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKUSER',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TASK_ID;
 VPK2 := :OLD.USER_ID;
     ELSE
     	VPK1 := :NEW.TASK_ID;
 VPK2 := :NEW.USER_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKUSER','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKUSER','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKUSER','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKUSER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:18> [INFO] [2017-09-01 13:01:18] CREATE OR REPLACE TRIGGER RT_TASKUSER
 BEFORE UPDATE OR INSERT ON TASKUSER
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.TASK_ID)
 AND PK2 = TO_CHAR(:NEW.USER_ID)
 		AND TABLE_NAME = 'TASKUSER';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKUSER',:OLD.TASK_ID,:OLD.USER_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TASK_ID)
 AND PK2 = TO_CHAR(:OLD.USER_ID)
 			  AND TABLE_NAME = 'TASKUSER';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:18> [INFO] [2017-09-01 13:01:18] CREATE OR REPLACE TRIGGER RT_TASKUSER_DEL
 BEFORE DELETE ON TASKUSER
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKUSER',:OLD.TASK_ID,:OLD.USER_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:18> [INFO] [2017-09-01 13:01:18] CREATE OR REPLACE TRIGGER PRMAUD_TASKWKSP
 AFTER INSERT OR UPDATE OR DELETE ON TASKWKSP
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TASKWKSP',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.WORKSPACE_ID;
 VPK2 := :OLD.TASK_ID;
     ELSE
     	VPK1 := :NEW.WORKSPACE_ID;
 VPK2 := :NEW.TASK_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('WORKSPACE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKWKSP','WORKSPACE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.WORKSPACE_ID,:NEW.WORKSPACE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKWKSP','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKWKSP','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CR_EXTERNAL_KEY') THEN	 PRM_AUDIT.AUDIT_DATA ('TASKWKSP','CR_EXTERNAL_KEY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CR_EXTERNAL_KEY,:NEW.CR_EXTERNAL_KEY); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TASKWKSP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:18> [INFO] [2017-09-01 13:01:18] CREATE OR REPLACE TRIGGER RT_TASKWKSP_DEL
 BEFORE DELETE ON TASKWKSP
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TASKWKSP',:OLD.WORKSPACE_ID,:OLD.TASK_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:18> [INFO] [2017-09-01 13:01:18] CREATE OR REPLACE TRIGGER RT_TASKWKSP
 BEFORE UPDATE OR INSERT ON TASKWKSP
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.WORKSPACE_ID)
 AND PK2 = TO_CHAR(:NEW.TASK_ID)
 		AND TABLE_NAME = 'TASKWKSP';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TASKWKSP',:OLD.WORKSPACE_ID,:OLD.TASK_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.WORKSPACE_ID)
 AND PK2 = TO_CHAR(:OLD.TASK_ID)
 			  AND TABLE_NAME = 'TASKWKSP';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:18> [INFO] [2017-09-01 13:01:18] CREATE OR REPLACE TRIGGER PRMAUD_THRSPARM
 AFTER INSERT OR UPDATE OR DELETE ON THRSPARM
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('THRSPARM',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.THRESH_PARM_ID;
     ELSE
     	VPK1 := :NEW.THRESH_PARM_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('THRESH_PARM_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('THRSPARM','THRESH_PARM_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.THRESH_PARM_ID,:NEW.THRESH_PARM_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('THRSPARM','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('THRSPARM','WBS_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_FLAG,:NEW.WBS_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('THRSPARM','TASK_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_FLAG,:NEW.TASK_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('THRSPARM','RSRC_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_FLAG,:NEW.RSRC_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('THRESH_PARM_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('THRSPARM','THRESH_PARM_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.THRESH_PARM_TYPE,:NEW.THRESH_PARM_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('THRESH_PARM_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('THRSPARM','THRESH_PARM_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.THRESH_PARM_NAME,:NEW.THRESH_PARM_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('THRESH_FIELD_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('THRSPARM','THRESH_FIELD_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.THRESH_FIELD_NAME,:NEW.THRESH_FIELD_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('THRESH_SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('THRSPARM','THRESH_SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.THRESH_SHORT_NAME,:NEW.THRESH_SHORT_NAME); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'THRSPARM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:18> [INFO] [2017-09-01 13:01:18] CREATE OR REPLACE TRIGGER RT_THRSPARM_DEL
 BEFORE DELETE ON THRSPARM
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'THRSPARM',:OLD.THRESH_PARM_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:18> [INFO] [2017-09-01 13:01:18] CREATE OR REPLACE TRIGGER RT_THRSPARM
 BEFORE UPDATE OR INSERT ON THRSPARM
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'THRSPARM',:OLD.THRESH_PARM_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.THRESH_PARM_ID)
 			  AND TABLE_NAME = 'THRSPARM';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:18> [INFO] [2017-09-01 13:01:18] CREATE OR REPLACE TRIGGER PRMAUD_TIMESHT
 AFTER INSERT OR UPDATE OR DELETE ON TIMESHT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TIMESHT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TS_ID;
 VPK2 := :OLD.RSRC_ID;
     ELSE
     	VPK1 := :NEW.TS_ID;
 VPK2 := :NEW.RSRC_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TIMESHT','TS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TS_ID,:NEW.TS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TIMESHT','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DAILY_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TIMESHT','DAILY_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DAILY_FLAG,:NEW.DAILY_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_CODE') THEN	 PRM_AUDIT.AUDIT_DATA ('TIMESHT','STATUS_CODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS_CODE,:NEW.STATUS_CODE); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TIMESHT','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('LAST_RECV_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TIMESHT','LAST_RECV_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.LAST_RECV_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.LAST_RECV_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TIMESHT','STATUS_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.STATUS_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.STATUS_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR ( UPDATING('TS_NOTES') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('TIMESHT','TS_NOTES',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.TS_NOTES,:NEW.TS_NOTES); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TIMESHT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TIMESHT_DEL
 BEFORE DELETE ON TIMESHT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'TIMESHT',:OLD.TS_ID,:OLD.RSRC_ID,NULL,NULL );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TIMESHT
 BEFORE UPDATE OR INSERT ON TIMESHT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.TS_ID)
 AND PK2 = TO_CHAR(:NEW.RSRC_ID)
 		AND TABLE_NAME = 'TIMESHT';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'TIMESHT',:OLD.TS_ID,:OLD.RSRC_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TS_ID)
 AND PK2 = TO_CHAR(:OLD.RSRC_ID)
 			  AND TABLE_NAME = 'TIMESHT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER PRMAUD_TMPLCATG
 AFTER INSERT OR UPDATE OR DELETE ON TMPLCATG
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TMPLCATG',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TMPLCATG_CATG_ID;
     ELSE
     	VPK1 := :NEW.TMPLCATG_CATG_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TMPLCATG_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TMPLCATG','TMPLCATG_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TMPLCATG_CATG_ID,:NEW.TMPLCATG_CATG_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CATG_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('TMPLCATG','CATG_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CATG_NAME,:NEW.CATG_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJECT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TMPLCATG','PROJECT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJECT_FLAG,:NEW.PROJECT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROCESS_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TMPLCATG','PROCESS_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROCESS_FLAG,:NEW.PROCESS_FLAG); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TMPLCATG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TMPLCATG_DEL
 BEFORE DELETE ON TMPLCATG
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'TMPLCATG',:OLD.TMPLCATG_CATG_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TMPLCATG
 BEFORE UPDATE OR INSERT ON TMPLCATG
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'TMPLCATG',:OLD.TMPLCATG_CATG_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TMPLCATG_CATG_ID)
 			  AND TABLE_NAME = 'TMPLCATG';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER PRMAUD_TRAKVIEW
 AFTER INSERT OR UPDATE OR DELETE ON TRAKVIEW
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TRAKVIEW',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TRACK_VIEW_ID;
     ELSE
     	VPK1 := :NEW.TRACK_VIEW_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TRACK_VIEW_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRAKVIEW','TRACK_VIEW_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TRACK_VIEW_ID,:NEW.TRACK_VIEW_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DISPLAY_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('TRAKVIEW','DISPLAY_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DISPLAY_TYPE,:NEW.DISPLAY_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('TRACK_VIEW_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('TRAKVIEW','TRACK_VIEW_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TRACK_VIEW_NAME,:NEW.TRACK_VIEW_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('WEB_VIEW_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TRAKVIEW','WEB_VIEW_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WEB_VIEW_FLAG,:NEW.WEB_VIEW_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRAKVIEW','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('TRACK_VIEW_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('TRAKVIEW','TRACK_VIEW_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.TRACK_VIEW_DATA,:NEW.TRACK_VIEW_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TRAKVIEW',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TRAKVIEW_DEL
 BEFORE DELETE ON TRAKVIEW
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'TRAKVIEW',:OLD.TRACK_VIEW_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TRAKVIEW
 BEFORE UPDATE OR INSERT ON TRAKVIEW
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'TRAKVIEW',:OLD.TRACK_VIEW_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TRACK_VIEW_ID)
 			  AND TABLE_NAME = 'TRAKVIEW';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER PRMAUD_TRSRCFIN
 AFTER INSERT OR UPDATE OR DELETE ON TRSRCFIN
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TRSRCFIN',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.FIN_DATES_ID;
 VPK2 := :OLD.TASKRSRC_ID;
     ELSE
     	VPK1 := :NEW.FIN_DATES_ID;
 VPK2 := :NEW.TASKRSRC_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('FIN_DATES_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCFIN','FIN_DATES_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.FIN_DATES_ID,:NEW.FIN_DATES_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASKRSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCFIN','TASKRSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASKRSRC_ID,:NEW.TASKRSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCFIN','TASK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASK_ID,:NEW.TASK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCFIN','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCFIN','ACT_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_QTY,:NEW.ACT_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCFIN','ACT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_COST,:NEW.ACT_COST); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TRSRCFIN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TRSRCFIN_DEL
 BEFORE DELETE ON TRSRCFIN
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TRSRCFIN',:OLD.FIN_DATES_ID,:OLD.TASKRSRC_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TRSRCFIN
 BEFORE UPDATE OR INSERT ON TRSRCFIN
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.FIN_DATES_ID)
 AND PK2 = TO_CHAR(:NEW.TASKRSRC_ID)
 		AND TABLE_NAME = 'TRSRCFIN';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TRSRCFIN',:OLD.FIN_DATES_ID,:OLD.TASKRSRC_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.FIN_DATES_ID)
 AND PK2 = TO_CHAR(:OLD.TASKRSRC_ID)
 			  AND TABLE_NAME = 'TRSRCFIN';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER PRMAUD_TRSRCSUM
 AFTER INSERT OR UPDATE OR DELETE ON TRSRCSUM
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TRSRCSUM',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TASKRSRC_SUM_ID;
     ELSE
     	VPK1 := :NEW.TASKRSRC_SUM_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TASKRSRC_SUM_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUM','TASKRSRC_SUM_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TASKRSRC_SUM_ID,:NEW.TASKRSRC_SUM_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUM','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUM','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUM','ROLE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_ID,:NEW.ROLE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SKILL_LEVEL') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUM','SKILL_LEVEL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SKILL_LEVEL,:NEW.SKILL_LEVEL); END IF;
     IF VOPER <> 'U' OR  UPDATING('OVERALLOC_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUM','OVERALLOC_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.OVERALLOC_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.OVERALLOC_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR ( UPDATING('SPREAD_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('TRSRCSUM','SPREAD_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.SPREAD_DATA,:NEW.SPREAD_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TRSRCSUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TRSRCSUM_DEL
 BEFORE DELETE ON TRSRCSUM
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TRSRCSUM',:OLD.TASKRSRC_SUM_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TRSRCSUM
 BEFORE UPDATE OR INSERT ON TRSRCSUM
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TRSRCSUM',:OLD.TASKRSRC_SUM_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TASKRSRC_SUM_ID)
 			  AND TABLE_NAME = 'TRSRCSUM';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER PRMAUD_TRSRCSUMFN
 AFTER INSERT OR UPDATE OR DELETE ON TRSRCSUMFN
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TRSRCSUMFN',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TRSRC_SUM_FIN_ID;
     ELSE
     	VPK1 := :NEW.TRSRC_SUM_FIN_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TRSRC_SUM_FIN_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','TRSRC_SUM_FIN_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TRSRC_SUM_FIN_ID,:NEW.TRSRC_SUM_FIN_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FIN_DATES_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','FIN_DATES_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FIN_DATES_ID,:NEW.FIN_DATES_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','ROLE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_ID,:NEW.ROLE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TASKRSRC_SUM_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','TASKRSRC_SUM_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TASKRSRC_SUM_ID,:NEW.TASKRSRC_SUM_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','ACT_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_QTY,:NEW.ACT_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','ACT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_COST,:NEW.ACT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_OT_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','ACT_OT_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_OT_QTY,:NEW.ACT_OT_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_REG_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','ACT_REG_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_REG_QTY,:NEW.ACT_REG_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_OT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','ACT_OT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_OT_COST,:NEW.ACT_OT_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACT_REG_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','ACT_REG_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACT_REG_COST,:NEW.ACT_REG_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOTAL_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','TOTAL_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOTAL_QTY,:NEW.TOTAL_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOTAL_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','TOTAL_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOTAL_COST,:NEW.TOTAL_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','REMAIN_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_QTY,:NEW.REMAIN_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('REMAIN_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','REMAIN_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REMAIN_COST,:NEW.REMAIN_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','TARGET_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_QTY,:NEW.TARGET_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TARGET_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','TARGET_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TARGET_COST,:NEW.TARGET_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('STAFFED_REMAIN_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','STAFFED_REMAIN_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STAFFED_REMAIN_QTY,:NEW.STAFFED_REMAIN_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('UNSTAFFED_REMAIN_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','UNSTAFFED_REMAIN_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UNSTAFFED_REMAIN_QTY,:NEW.UNSTAFFED_REMAIN_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('STAFFED_REMAIN_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','STAFFED_REMAIN_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STAFFED_REMAIN_COST,:NEW.STAFFED_REMAIN_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('UNSTAFFED_REMAIN_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','UNSTAFFED_REMAIN_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UNSTAFFED_REMAIN_COST,:NEW.UNSTAFFED_REMAIN_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('STAFFED_LATE_REMAIN_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','STAFFED_LATE_REMAIN_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STAFFED_LATE_REMAIN_QTY,:NEW.STAFFED_LATE_REMAIN_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('UNSTAFFED_LATE_REMAIN_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','UNSTAFFED_LATE_REMAIN_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UNSTAFFED_LATE_REMAIN_QTY,:NEW.UNSTAFFED_LATE_REMAIN_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('STAFFED_LATE_REMAIN_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','STAFFED_LATE_REMAIN_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STAFFED_LATE_REMAIN_COST,:NEW.STAFFED_LATE_REMAIN_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('UNSTAFFED_LATE_REMAIN_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','UNSTAFFED_LATE_REMAIN_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UNSTAFFED_LATE_REMAIN_COST,:NEW.UNSTAFFED_LATE_REMAIN_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('LATE_REMAIN_QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','LATE_REMAIN_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LATE_REMAIN_QTY,:NEW.LATE_REMAIN_QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('LATE_REMAIN_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('TRSRCSUMFN','LATE_REMAIN_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LATE_REMAIN_COST,:NEW.LATE_REMAIN_COST); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TRSRCSUMFN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TRSRCSUMFN_DEL
 BEFORE DELETE ON TRSRCSUMFN
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TRSRCSUMFN',:OLD.TRSRC_SUM_FIN_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TRSRCSUMFN
 BEFORE UPDATE OR INSERT ON TRSRCSUMFN
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TRSRCSUMFN',:OLD.TRSRC_SUM_FIN_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TRSRC_SUM_FIN_ID)
 			  AND TABLE_NAME = 'TRSRCSUMFN';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER PRMAUD_TSDATES
 AFTER INSERT OR UPDATE OR DELETE ON TSDATES
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TSDATES',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TS_ID;
     ELSE
     	VPK1 := :NEW.TS_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TSDATES','TS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TS_ID,:NEW.TS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TSDATES','START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('TSDATES','END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.END_DATE,'YYYYMMDDHH24MISS')); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TSDATES',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TSDATES_DEL
 BEFORE DELETE ON TSDATES
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'TSDATES',:OLD.TS_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TSDATES
 BEFORE UPDATE OR INSERT ON TSDATES
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'TSDATES',:OLD.TS_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TS_ID)
 			  AND TABLE_NAME = 'TSDATES';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER PRMAUD_TSDELEGATE
 AFTER INSERT OR UPDATE OR DELETE ON TSDELEGATE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('TSDELEGATE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.TS_DELEGATE_ID;
     ELSE
     	VPK1 := :NEW.TS_DELEGATE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('TS_DELEGATE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TSDELEGATE','TS_DELEGATE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.TS_DELEGATE_ID,:NEW.TS_DELEGATE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TSDELEGATE','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TS_DELEGATE_USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TSDELEGATE','TS_DELEGATE_USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TS_DELEGATE_USER_ID,:NEW.TS_DELEGATE_USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('TSDELEGATE','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACTIVE_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('TSDELEGATE','ACTIVE_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACTIVE_FLAG,:NEW.ACTIVE_FLAG); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'TSDELEGATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TSDELEGATE_DEL
 BEFORE DELETE ON TSDELEGATE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'TSDELEGATE',:OLD.TS_DELEGATE_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_TSDELEGATE
 BEFORE UPDATE OR INSERT ON TSDELEGATE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'TSDELEGATE',:OLD.TS_DELEGATE_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.TS_DELEGATE_ID)
 			  AND TABLE_NAME = 'TSDELEGATE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER PRMAUD_UDFCODE
 AFTER INSERT OR UPDATE OR DELETE ON UDFCODE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('UDFCODE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.UDF_CODE_ID;
     ELSE
     	VPK1 := :NEW.UDF_CODE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('UDF_CODE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFCODE','UDF_CODE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.UDF_CODE_ID,:NEW.UDF_CODE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('UDF_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFCODE','UDF_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UDF_TYPE_ID,:NEW.UDF_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFCODE','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('SHORT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFCODE','SHORT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SHORT_NAME,:NEW.SHORT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('UDF_CODE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFCODE','UDF_CODE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UDF_CODE_NAME,:NEW.UDF_CODE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PARENT_UDF_CODE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFCODE','PARENT_UDF_CODE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PARENT_UDF_CODE_ID,:NEW.PARENT_UDF_CODE_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'UDFCODE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_UDFCODE_DEL
 BEFORE DELETE ON UDFCODE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'UDFCODE',:OLD.UDF_CODE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:19> [INFO] [2017-09-01 13:01:19] CREATE OR REPLACE TRIGGER RT_UDFCODE
 BEFORE UPDATE OR INSERT ON UDFCODE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'UDFCODE',:OLD.UDF_CODE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.UDF_CODE_ID)
 			  AND TABLE_NAME = 'UDFCODE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER PRMAUD_UDFTYPE
 AFTER INSERT OR UPDATE OR DELETE ON UDFTYPE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('UDFTYPE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.UDF_TYPE_ID;
     ELSE
     	VPK1 := :NEW.UDF_TYPE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('UDF_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','UDF_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.UDF_TYPE_ID,:NEW.UDF_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TABLE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','TABLE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TABLE_NAME,:NEW.TABLE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('UDF_TYPE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','UDF_TYPE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UDF_TYPE_NAME,:NEW.UDF_TYPE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('UDF_TYPE_LABEL') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','UDF_TYPE_LABEL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UDF_TYPE_LABEL,:NEW.UDF_TYPE_LABEL); END IF;
     IF VOPER <> 'U' OR  UPDATING('LOGICAL_DATA_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','LOGICAL_DATA_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LOGICAL_DATA_TYPE,:NEW.LOGICAL_DATA_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUPER_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','SUPER_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SUPER_FLAG,:NEW.SUPER_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('UDF_CODE_SHORT_LEN') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','UDF_CODE_SHORT_LEN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UDF_CODE_SHORT_LEN,:NEW.UDF_CODE_SHORT_LEN); END IF;
     IF VOPER <> 'U' OR  UPDATING('FORMULA') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','FORMULA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FORMULA,:NEW.FORMULA); END IF;
     IF VOPER <> 'U' OR  UPDATING('INDICATOR_EXPRESSION') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','INDICATOR_EXPRESSION',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.INDICATOR_EXPRESSION,:NEW.INDICATOR_EXPRESSION); END IF;
     IF VOPER <> 'U' OR  UPDATING('DISP_DATA_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','DISP_DATA_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DISP_DATA_FLAG,:NEW.DISP_DATA_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('DISP_INDICATOR_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','DISP_INDICATOR_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DISP_INDICATOR_FLAG,:NEW.DISP_INDICATOR_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUMMARY_INDICATOR_EXPRESSION') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','SUMMARY_INDICATOR_EXPRESSION',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SUMMARY_INDICATOR_EXPRESSION,:NEW.SUMMARY_INDICATOR_EXPRESSION); END IF;
     IF VOPER <> 'U' OR  UPDATING('SUMMARY_METHOD') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFTYPE','SUMMARY_METHOD',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SUMMARY_METHOD,:NEW.SUMMARY_METHOD); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'UDFTYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_UDFTYPE_DEL
 BEFORE DELETE ON UDFTYPE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'UDFTYPE',:OLD.UDF_TYPE_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_UDFTYPE
 BEFORE UPDATE OR INSERT ON UDFTYPE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'UDFTYPE',:OLD.UDF_TYPE_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.UDF_TYPE_ID)
 			  AND TABLE_NAME = 'UDFTYPE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER PRMAUD_UDFVALUE
 AFTER INSERT OR UPDATE OR DELETE ON UDFVALUE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('UDFVALUE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.UDF_TYPE_ID;
 VPK2 := :OLD.FK_ID;
     ELSE
     	VPK1 := :NEW.UDF_TYPE_ID;
 VPK2 := :NEW.FK_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('UDF_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFVALUE','UDF_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.UDF_TYPE_ID,:NEW.UDF_TYPE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('FK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFVALUE','FK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FK_ID,:NEW.FK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFVALUE','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('UDF_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFVALUE','UDF_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.UDF_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.UDF_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('UDF_TEXT') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFVALUE','UDF_TEXT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UDF_TEXT,:NEW.UDF_TEXT); END IF;
     IF VOPER <> 'U' OR  UPDATING('UDF_NUMBER') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFVALUE','UDF_NUMBER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UDF_NUMBER,:NEW.UDF_NUMBER); END IF;
     IF VOPER <> 'U' OR  UPDATING('UDF_CODE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFVALUE','UDF_CODE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UDF_CODE_ID,:NEW.UDF_CODE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TABLE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('UDFVALUE','TABLE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TABLE_NAME,:NEW.TABLE_NAME); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'UDFVALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_UDFVALUE_DEL
 BEFORE DELETE ON UDFVALUE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'UDFVALUE',:OLD.UDF_TYPE_ID,:OLD.FK_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_UDFVALUE
 BEFORE UPDATE OR INSERT ON UDFVALUE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.UDF_TYPE_ID)
 AND PK2 = TO_CHAR(:NEW.FK_ID)
 		AND TABLE_NAME = 'UDFVALUE';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'UDFVALUE',:OLD.UDF_TYPE_ID,:OLD.FK_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.UDF_TYPE_ID)
 AND PK2 = TO_CHAR(:OLD.FK_ID)
 			  AND TABLE_NAME = 'UDFVALUE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER PRMAUD_UMEASURE
 AFTER INSERT OR UPDATE OR DELETE ON UMEASURE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('UMEASURE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.UNIT_ID;
     ELSE
     	VPK1 := :NEW.UNIT_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('UNIT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('UMEASURE','UNIT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.UNIT_ID,:NEW.UNIT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('UMEASURE','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('UNIT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('UMEASURE','UNIT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UNIT_NAME,:NEW.UNIT_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('UNIT_ABBREV') THEN	 PRM_AUDIT.AUDIT_DATA ('UMEASURE','UNIT_ABBREV',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UNIT_ABBREV,:NEW.UNIT_ABBREV); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'UMEASURE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_UMEASURE_DEL
 BEFORE DELETE ON UMEASURE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'UMEASURE',:OLD.UNIT_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_UMEASURE
 BEFORE UPDATE OR INSERT ON UMEASURE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'UMEASURE',:OLD.UNIT_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.UNIT_ID)
 			  AND TABLE_NAME = 'UMEASURE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER PRMAUD_USERCOL
 AFTER INSERT OR UPDATE OR DELETE ON USERCOL
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('USERCOL',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.USER_COL_ID;
     ELSE
     	VPK1 := :NEW.USER_COL_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('USER_COL_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERCOL','USER_COL_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.USER_COL_ID,:NEW.USER_COL_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TABLE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('USERCOL','TABLE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TABLE_NAME,:NEW.TABLE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('LOGICAL_DATA_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('USERCOL','LOGICAL_DATA_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.LOGICAL_DATA_TYPE,:NEW.LOGICAL_DATA_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_COL_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('USERCOL','USER_COL_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_COL_NAME,:NEW.USER_COL_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_COL_LABEL') THEN	 PRM_AUDIT.AUDIT_DATA ('USERCOL','USER_COL_LABEL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_COL_LABEL,:NEW.USER_COL_LABEL); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'USERCOL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_USERCOL_DEL
 BEFORE DELETE ON USERCOL
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'USERCOL',:OLD.USER_COL_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_USERCOL
 BEFORE UPDATE OR INSERT ON USERCOL
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'USERCOL',:OLD.USER_COL_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.USER_COL_ID)
 			  AND TABLE_NAME = 'USERCOL';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER PRMAUD_USERDATA
 AFTER INSERT OR UPDATE OR DELETE ON USERDATA
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('USERDATA',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.USER_DATA_ID;
     ELSE
     	VPK1 := :NEW.USER_DATA_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('USER_DATA_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERDATA','USER_DATA_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.USER_DATA_ID,:NEW.USER_DATA_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERDATA','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TOPIC_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('USERDATA','TOPIC_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TOPIC_NAME,:NEW.TOPIC_NAME); END IF;
     IF VOPER <> 'U' OR ( UPDATING('USER_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('USERDATA','USER_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.USER_DATA,:NEW.USER_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'USERDATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_USERDATA_DEL
 BEFORE DELETE ON USERDATA
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'USERDATA',:OLD.USER_DATA_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_USERDATA
 BEFORE UPDATE OR INSERT ON USERDATA
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'USERDATA',:OLD.USER_DATA_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.USER_DATA_ID)
 			  AND TABLE_NAME = 'USERDATA';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER PRMAUD_USERENG
 AFTER INSERT OR UPDATE OR DELETE ON USERENG
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('USERENG',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.USER_ENG_ID;
     ELSE
     	VPK1 := :NEW.USER_ENG_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('USER_ENG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERENG','USER_ENG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.USER_ENG_ID,:NEW.USER_ENG_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERENG','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('DB_ENGINE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('USERENG','DB_ENGINE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.DB_ENGINE_TYPE,:NEW.DB_ENGINE_TYPE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'USERENG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_USERENG_DEL
 BEFORE DELETE ON USERENG
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'USERENG',:OLD.USER_ENG_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_USERENG
 BEFORE UPDATE OR INSERT ON USERENG
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'USERENG',:OLD.USER_ENG_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.USER_ENG_ID)
 			  AND TABLE_NAME = 'USERENG';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER PRMAUD_USEROBS
 AFTER INSERT OR UPDATE OR DELETE ON USEROBS
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('USEROBS',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.USER_ID;
 VPK2 := :OLD.OBS_ID;
     ELSE
     	VPK1 := :NEW.USER_ID;
 VPK2 := :NEW.OBS_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USEROBS','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('OBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USEROBS','OBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OBS_ID,:NEW.OBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROF_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USEROBS','PROF_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROF_ID,:NEW.PROF_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'USEROBS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_USEROBS_DEL
 BEFORE DELETE ON USEROBS
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'USEROBS',:OLD.USER_ID,:OLD.OBS_ID,NULL,NULL );
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER RT_USEROBS
 BEFORE UPDATE OR INSERT ON USEROBS
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.USER_ID)
 AND PK2 = TO_CHAR(:NEW.OBS_ID)
 		AND TABLE_NAME = 'USEROBS';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'USEROBS',:OLD.USER_ID,:OLD.OBS_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.USER_ID)
 AND PK2 = TO_CHAR(:OLD.OBS_ID)
 			  AND TABLE_NAME = 'USEROBS';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:20> [INFO] [2017-09-01 13:01:20] CREATE OR REPLACE TRIGGER PRMAUD_USEROPEN
 AFTER INSERT OR UPDATE OR DELETE ON USEROPEN
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('USEROPEN',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.USER_OPEN_ID;
     ELSE
     	VPK1 := :NEW.USER_OPEN_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('USER_OPEN_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USEROPEN','USER_OPEN_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.USER_OPEN_ID,:NEW.USER_OPEN_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_OPEN_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('USEROPEN','USER_OPEN_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_OPEN_NAME,:NEW.USER_OPEN_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USEROPEN','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'USEROPEN',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_USEROPEN_DEL
 BEFORE DELETE ON USEROPEN
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'USEROPEN',:OLD.USER_OPEN_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_USEROPEN
 BEFORE UPDATE OR INSERT ON USEROPEN
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'USEROPEN',:OLD.USER_OPEN_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.USER_OPEN_ID)
 			  AND TABLE_NAME = 'USEROPEN';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER TR_USERS_TSDELEGATE
 BEFORE DELETE ON USERS
 FOR EACH ROW
 DECLARE
 BEGIN
   DELETE FROM TSDELEGATE TSD
    WHERE TSD.TS_DELEGATE_USER_ID = :OLD.USER_ID
       OR TSD.USER_ID = :OLD.USER_ID;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER PRMAUD_USERS
 AFTER INSERT OR UPDATE OR DELETE ON USERS
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('USERS',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   VPRM_USER_NAME := PRM_AUDIT.G_PRM_USER_NAME;
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.USER_ID;
     ELSE
     	VPK1 := :NEW.USER_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('GLOBAL_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','GLOBAL_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GLOBAL_FLAG,:NEW.GLOBAL_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('EMAIL_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','EMAIL_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EMAIL_TYPE,:NEW.EMAIL_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','USER_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_NAME,:NEW.USER_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROF_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','PROF_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROF_ID,:NEW.PROF_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CURR_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','CURR_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CURR_ID,:NEW.CURR_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('ALL_RSRC_ACCESS_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','ALL_RSRC_ACCESS_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ALL_RSRC_ACCESS_FLAG,:NEW.ALL_RSRC_ACCESS_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('REPORT_USER_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','REPORT_USER_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.REPORT_USER_FLAG,:NEW.REPORT_USER_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('GUID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','GUID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.GUID,:NEW.GUID); END IF;
     IF VOPER <> 'U' OR  UPDATING('EMAIL_SRV_USER_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','EMAIL_SRV_USER_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EMAIL_SRV_USER_NAME,:NEW.EMAIL_SRV_USER_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('OFFICE_PHONE') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','OFFICE_PHONE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OFFICE_PHONE,:NEW.OFFICE_PHONE); END IF;
     IF VOPER <> 'U' OR  UPDATING('ACTUAL_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','ACTUAL_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ACTUAL_NAME,:NEW.ACTUAL_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('EMAIL_SEND_SERVER') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','EMAIL_SEND_SERVER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EMAIL_SEND_SERVER,:NEW.EMAIL_SEND_SERVER); END IF;
     IF VOPER <> 'U' OR  UPDATING('EMAIL_ADDR') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','EMAIL_ADDR',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EMAIL_ADDR,:NEW.EMAIL_ADDR); END IF;
     IF VOPER <> 'U' OR  UPDATING('EMAIL_SRV_PASSWD') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','EMAIL_SRV_PASSWD',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EMAIL_SRV_PASSWD,:NEW.EMAIL_SRV_PASSWD); END IF;
     IF VOPER <> 'U' OR  UPDATING('PASSWD') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','PASSWD',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PASSWD,:NEW.PASSWD); END IF;
     IF VOPER <> 'U' OR  UPDATING('NOTIFY_PREFS') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','NOTIFY_PREFS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.NOTIFY_PREFS,:NEW.NOTIFY_PREFS); END IF;
     IF VOPER <> 'U' OR  UPDATING('NAVI_VIEW_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','NAVI_VIEW_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.NAVI_VIEW_ID,:NEW.NAVI_VIEW_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('OVERRIDE_NAVIVIEW_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','OVERRIDE_NAVIVIEW_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.OVERRIDE_NAVIVIEW_FLAG,:NEW.OVERRIDE_NAVIVIEW_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('UI_VIEW_PREF_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','UI_VIEW_PREF_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.UI_VIEW_PREF_ID,:NEW.UI_VIEW_PREF_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('CR_EXTERNAL_KEY') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','CR_EXTERNAL_KEY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CR_EXTERNAL_KEY,:NEW.CR_EXTERNAL_KEY); END IF;
     IF VOPER <> 'U' OR  UPDATING('CR_USER_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','CR_USER_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CR_USER_NAME,:NEW.CR_USER_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('FAILED_LOGIN_ATTEMPTS_CNT') THEN	 PRM_AUDIT.AUDIT_DATA ('USERS','FAILED_LOGIN_ATTEMPTS_CNT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FAILED_LOGIN_ATTEMPTS_CNT,:NEW.FAILED_LOGIN_ATTEMPTS_CNT); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'USERS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_USERS_DEL
 BEFORE DELETE ON USERS
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'USERS',:OLD.USER_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_USERS
 BEFORE UPDATE OR INSERT ON USERS
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
   :NEW.UPDATE_USER := PRM_AUDIT.G_PRM_USER_NAME;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.G_PRM_USER_NAME;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'USERS',:OLD.USER_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.USER_ID)
 			  AND TABLE_NAME = 'USERS';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_USERSET_DEL
 BEFORE DELETE ON USERSET
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'USERSET',:OLD.NAMESPACE,:OLD.SETTING_NAME,:OLD.USER_ID,NULL );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_USERSET
 BEFORE UPDATE OR INSERT ON USERSET
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.NAMESPACE)
 AND PK2 = :NEW.SETTING_NAME
 AND PK3 = TO_CHAR(:NEW.USER_ID)
 		AND TABLE_NAME = 'USERSET';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'USERSET',:OLD.NAMESPACE,:OLD.SETTING_NAME,:OLD.USER_ID,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.NAMESPACE)
 AND PK2 = :OLD.SETTING_NAME
 AND PK3 = TO_CHAR(:OLD.USER_ID)
 			  AND TABLE_NAME = 'USERSET';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER PRMAUD_USERWKSP
 AFTER INSERT OR UPDATE OR DELETE ON USERWKSP
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('USERWKSP',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.USER_ID;
 VPK2 := :OLD.WORKSPACE_ID;
     ELSE
     	VPK1 := :NEW.USER_ID;
 VPK2 := :NEW.WORKSPACE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERWKSP','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WORKSPACE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERWKSP','WORKSPACE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WORKSPACE_ID,:NEW.WORKSPACE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USERWKSP','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'USERWKSP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_USERWKSP_DEL
 BEFORE DELETE ON USERWKSP
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'USERWKSP',:OLD.USER_ID,:OLD.WORKSPACE_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_USERWKSP
 BEFORE UPDATE OR INSERT ON USERWKSP
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.USER_ID)
 AND PK2 = TO_CHAR(:NEW.WORKSPACE_ID)
 		AND TABLE_NAME = 'USERWKSP';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'USERWKSP',:OLD.USER_ID,:OLD.WORKSPACE_ID,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.USER_ID)
 AND PK2 = TO_CHAR(:OLD.WORKSPACE_ID)
 			  AND TABLE_NAME = 'USERWKSP';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_USESSION_DEL
 BEFORE DELETE ON USESSION
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'USESSION',:OLD.SESSION_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_USESSION
 BEFORE UPDATE OR INSERT ON USESSION
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
   :NEW.UPDATE_USER := PRM_AUDIT.G_PRM_USER_NAME;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.G_PRM_USER_NAME;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'USESSION',:OLD.SESSION_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.SESSION_ID)
 			  AND TABLE_NAME = 'USESSION';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER TR_USESSION_LOGOFF
 AFTER UPDATE OR DELETE  ON USESSION
 FOR EACH ROW
 DECLARE
   VUSER_NAME USERS.USER_NAME%TYPE;
   VOPT       NUMBER;
 BEGIN
   SETTINGS_READ_BOOL(VOPT, 'DATABASE.AUDIT.LOGOUT', 'ENABLED',1); 
   IF VOPT = 0 THEN
     RETURN;
   END IF;
   IF :OLD.USER_ID IS NOT NULL THEN
     SELECT USER_NAME INTO VUSER_NAME FROM USERS WHERE USER_ID = :OLD.USER_ID;
   ELSE
     VUSER_NAME := NULL;
   END IF;
   IF UPDATING('DELETE_SESSION_ID') THEN
     IF :OLD.DELETE_SESSION_ID IS NULL AND
        :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       INSERT INTO USESSAUD
         (SESSION_ID,LOGIN_DATE,LOGOUT_DATE,LAST_ACTIVE_TIME,USER_NAME,USER_ID,HOST_NAME,APP_NAME,HARD_DRIVE_CODE,DB_ENGINE_TYPE,OS_USER_NAME)
       VALUES
         (:OLD.SESSION_ID,:OLD.LOGIN_TIME,SYSDATE,:OLD.LAST_ACTIVE_TIME,VUSER_NAME,:OLD.USER_ID,:OLD.HOST_NAME,:OLD.APP_NAME,:OLD.HARD_DRIVE_CODE,:OLD.DB_ENGINE_TYPE,:OLD.OS_USER_NAME);
     END IF;
   ELSIF DELETING THEN
     IF (:OLD.DELETE_SESSION_ID IS NULL) THEN
       INSERT INTO USESSAUD
         (SESSION_ID,LOGIN_DATE,LOGOUT_DATE,LAST_ACTIVE_TIME,USER_NAME,USER_ID,HOST_NAME,APP_NAME,HARD_DRIVE_CODE,DB_ENGINE_TYPE,OS_USER_NAME)
       VALUES
         (:OLD.SESSION_ID,:OLD.LOGIN_TIME,SYSDATE,:OLD.LAST_ACTIVE_TIME,VUSER_NAME,:OLD.USER_ID,:OLD.HOST_NAME,:OLD.APP_NAME,:OLD.HARD_DRIVE_CODE,:OLD.DB_ENGINE_TYPE,:OLD.OS_USER_NAME);
     END IF;
   END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER PRMAUD_USROPNVAL
 AFTER INSERT OR UPDATE OR DELETE ON USROPNVAL
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('USROPNVAL',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.USER_OPEN_ID;
 VPK2 := :OLD.PK_ID;
 VPK3 := :OLD.USROPN_TYPE;
     ELSE
     	VPK1 := :NEW.USER_OPEN_ID;
 VPK2 := :NEW.PK_ID;
 VPK3 := :NEW.USROPN_TYPE;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('USER_OPEN_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USROPNVAL','USER_OPEN_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.USER_OPEN_ID,:NEW.USER_OPEN_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PK_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('USROPNVAL','PK_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PK_ID,:NEW.PK_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USROPN_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('USROPNVAL','USROPN_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USROPN_TYPE,:NEW.USROPN_TYPE); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'USROPNVAL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_USROPNVAL_DEL
 BEFORE DELETE ON USROPNVAL
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'USROPNVAL',:OLD.USER_OPEN_ID,:OLD.PK_ID,:OLD.USROPN_TYPE,NULL );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_USROPNVAL
 BEFORE UPDATE OR INSERT ON USROPNVAL
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.USER_OPEN_ID)
 AND PK2 = TO_CHAR(:NEW.PK_ID)
 AND PK3 = TO_CHAR(:NEW.USROPN_TYPE)
 		AND TABLE_NAME = 'USROPNVAL';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'USROPNVAL',:OLD.USER_OPEN_ID,:OLD.PK_ID,:OLD.USROPN_TYPE,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.USER_OPEN_ID)
 AND PK2 = TO_CHAR(:OLD.PK_ID)
 AND PK3 = TO_CHAR(:OLD.USROPN_TYPE)
 			  AND TABLE_NAME = 'USROPNVAL';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER PRMAUD_VIEWPREF
 AFTER INSERT OR UPDATE OR DELETE ON VIEWPREF
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('VIEWPREF',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.VIEW_PREF_ID;
     ELSE
     	VPK1 := :NEW.VIEW_PREF_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('VIEW_PREF_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('VIEWPREF','VIEW_PREF_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.VIEW_PREF_ID,:NEW.VIEW_PREF_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('VIEW_PREF_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('VIEWPREF','VIEW_PREF_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.VIEW_PREF_NAME,:NEW.VIEW_PREF_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('VIEW_PREF_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('VIEWPREF','VIEW_PREF_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.VIEW_PREF_TYPE,:NEW.VIEW_PREF_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('VIEWPREF','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'VIEWPREF',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_VIEWPREF_DEL
 BEFORE DELETE ON VIEWPREF
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'VIEWPREF',:OLD.VIEW_PREF_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_VIEWPREF
 BEFORE UPDATE OR INSERT ON VIEWPREF
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'VIEWPREF',:OLD.VIEW_PREF_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.VIEW_PREF_ID)
 			  AND TABLE_NAME = 'VIEWPREF';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER PRMAUD_VIEWPROP
 AFTER INSERT OR UPDATE OR DELETE ON VIEWPROP
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('VIEWPROP',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.VIEW_ID;
     ELSE
     	VPK1 := :NEW.VIEW_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('VIEW_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('VIEWPROP','VIEW_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.VIEW_ID,:NEW.VIEW_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('VIEW_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('VIEWPROP','VIEW_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.VIEW_NAME,:NEW.VIEW_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('VIEWPROP','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('VIEWPROP','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('VIEW_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('VIEWPROP','VIEW_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.VIEW_TYPE,:NEW.VIEW_TYPE); END IF;
     IF VOPER <> 'U' OR ( UPDATING('VIEW_DATA') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('VIEWPROP','VIEW_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.VIEW_DATA,:NEW.VIEW_DATA); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'VIEWPROP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_VIEWPROP_DEL
 BEFORE DELETE ON VIEWPROP
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'VIEWPROP',:OLD.VIEW_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_VIEWPROP
 BEFORE UPDATE OR INSERT ON VIEWPROP
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'VIEWPROP',:OLD.VIEW_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.VIEW_ID)
 			  AND TABLE_NAME = 'VIEWPROP';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER PRMAUD_VWPREFDASH
 AFTER INSERT OR UPDATE OR DELETE ON VWPREFDASH
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('VWPREFDASH',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.DASHBOARD_ID;
 VPK2 := :OLD.VIEW_PREF_ID;
     ELSE
     	VPK1 := :NEW.DASHBOARD_ID;
 VPK2 := :NEW.VIEW_PREF_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('DASHBOARD_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('VWPREFDASH','DASHBOARD_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.DASHBOARD_ID,:NEW.DASHBOARD_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('VIEW_PREF_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('VWPREFDASH','VIEW_PREF_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.VIEW_PREF_ID,:NEW.VIEW_PREF_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('VWPREFDASH','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'VWPREFDASH',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_VWPREFDASH
 BEFORE UPDATE OR INSERT ON VWPREFDASH
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.DASHBOARD_ID)
 AND PK2 = TO_CHAR(:NEW.VIEW_PREF_ID)
 		AND TABLE_NAME = 'VWPREFDASH';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'VWPREFDASH',:OLD.DASHBOARD_ID,:OLD.VIEW_PREF_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.DASHBOARD_ID)
 AND PK2 = TO_CHAR(:OLD.VIEW_PREF_ID)
 			  AND TABLE_NAME = 'VWPREFDASH';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_VWPREFDASH_DEL
 BEFORE DELETE ON VWPREFDASH
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'VWPREFDASH',:OLD.DASHBOARD_ID,:OLD.VIEW_PREF_ID,NULL,NULL );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER PRMAUD_VWPREFDATA
 AFTER INSERT OR UPDATE OR DELETE ON VWPREFDATA
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('VWPREFDATA',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.VIEW_PREF_ID;
 VPK2 := :OLD.VIEW_PREF_KEY;
     ELSE
     	VPK1 := :NEW.VIEW_PREF_ID;
 VPK2 := :NEW.VIEW_PREF_KEY;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('VIEW_PREF_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('VWPREFDATA','VIEW_PREF_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.VIEW_PREF_ID,:NEW.VIEW_PREF_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('VIEW_PREF_KEY') THEN	 PRM_AUDIT.AUDIT_DATA ('VWPREFDATA','VIEW_PREF_KEY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.VIEW_PREF_KEY,:NEW.VIEW_PREF_KEY); END IF;
     IF VOPER <> 'U' OR  UPDATING('VIEW_PREF_VALUE') THEN	 PRM_AUDIT.AUDIT_DATA ('VWPREFDATA','VIEW_PREF_VALUE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.VIEW_PREF_VALUE,:NEW.VIEW_PREF_VALUE); END IF;
     IF VOPER <> 'U' OR ( UPDATING('VIEW_PREF_VALUE_BLOB') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('VWPREFDATA','VIEW_PREF_VALUE_BLOB',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.VIEW_PREF_VALUE_BLOB,:NEW.VIEW_PREF_VALUE_BLOB); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'VWPREFDATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_VWPREFDATA_DEL
 BEFORE DELETE ON VWPREFDATA
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'VWPREFDATA',:OLD.VIEW_PREF_ID,:OLD.VIEW_PREF_KEY,NULL,NULL );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_VWPREFDATA
 BEFORE UPDATE OR INSERT ON VWPREFDATA
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.VIEW_PREF_ID)
 AND PK2 = TO_CHAR(:NEW.VIEW_PREF_KEY)
 		AND TABLE_NAME = 'VWPREFDATA';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'VWPREFDATA',:OLD.VIEW_PREF_ID,:OLD.VIEW_PREF_KEY,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.VIEW_PREF_ID)
 AND PK2 = TO_CHAR(:OLD.VIEW_PREF_KEY)
 			  AND TABLE_NAME = 'VWPREFDATA';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER PRMAUD_VWPREFUSER
 AFTER INSERT OR UPDATE OR DELETE ON VWPREFUSER
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('VWPREFUSER',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.VIEW_PREF_ID;
 VPK2 := :OLD.USER_ID;
     ELSE
     	VPK1 := :NEW.VIEW_PREF_ID;
 VPK2 := :NEW.USER_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('VIEW_PREF_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('VWPREFUSER','VIEW_PREF_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.VIEW_PREF_ID,:NEW.VIEW_PREF_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('VWPREFUSER','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'VWPREFUSER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_VWPREFUSER_DEL
 BEFORE DELETE ON VWPREFUSER
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'VWPREFUSER',:OLD.VIEW_PREF_ID,:OLD.USER_ID,NULL,NULL );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_VWPREFUSER
 BEFORE UPDATE OR INSERT ON VWPREFUSER
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.VIEW_PREF_ID)
 AND PK2 = TO_CHAR(:NEW.USER_ID)
 		AND TABLE_NAME = 'VWPREFUSER';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'VWPREFUSER',:OLD.VIEW_PREF_ID,:OLD.USER_ID,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.VIEW_PREF_ID)
 AND PK2 = TO_CHAR(:OLD.USER_ID)
 			  AND TABLE_NAME = 'VWPREFUSER';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER PRMAUD_WBRSCAT
 AFTER INSERT OR UPDATE OR DELETE ON WBRSCAT
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('WBRSCAT',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.WBRS_CAT_ID;
     ELSE
     	VPK1 := :NEW.WBRS_CAT_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('WBRS_CAT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBRSCAT','WBRS_CAT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.WBRS_CAT_ID,:NEW.WBRS_CAT_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBRS_CAT_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('WBRSCAT','WBRS_CAT_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBRS_CAT_NAME,:NEW.WBRS_CAT_NAME); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'WBRSCAT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_WBRSCAT_DEL
 BEFORE DELETE ON WBRSCAT
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'WBRSCAT',:OLD.WBRS_CAT_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_WBRSCAT
 BEFORE UPDATE OR INSERT ON WBRSCAT
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'WBRSCAT',:OLD.WBRS_CAT_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.WBRS_CAT_ID)
 			  AND TABLE_NAME = 'WBRSCAT';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER PRMAUD_WBSBUDG
 AFTER INSERT OR UPDATE OR DELETE ON WBSBUDG
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('WBSBUDG',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.WBS_BUDG_ID;
     ELSE
     	VPK1 := :NEW.WBS_BUDG_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('WBS_BUDG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSBUDG','WBS_BUDG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.WBS_BUDG_ID,:NEW.WBS_BUDG_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSBUDG','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSBUDG','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSBUDG','START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('SPEND_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSBUDG','SPEND_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SPEND_COST,:NEW.SPEND_COST); END IF;
     IF VOPER <> 'U' OR  UPDATING('BENEFIT_COST') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSBUDG','BENEFIT_COST',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.BENEFIT_COST,:NEW.BENEFIT_COST); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'WBSBUDG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_WBSBUDG_DEL
 BEFORE DELETE ON WBSBUDG
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'WBSBUDG',:OLD.WBS_BUDG_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_WBSBUDG
 BEFORE UPDATE OR INSERT ON WBSBUDG
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'WBSBUDG',:OLD.WBS_BUDG_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.WBS_BUDG_ID)
 			  AND TABLE_NAME = 'WBSBUDG';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER PRMAUD_WBSMEMO
 AFTER INSERT OR UPDATE OR DELETE ON WBSMEMO
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('WBSMEMO',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.WBS_MEMO_ID;
     ELSE
     	VPK1 := :NEW.WBS_MEMO_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('WBS_MEMO_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSMEMO','WBS_MEMO_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.WBS_MEMO_ID,:NEW.WBS_MEMO_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSMEMO','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSMEMO','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('MEMO_TYPE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSMEMO','MEMO_TYPE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.MEMO_TYPE_ID,:NEW.MEMO_TYPE_ID); END IF;
     IF VOPER <> 'U' OR ( UPDATING('WBS_MEMO') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('WBSMEMO','WBS_MEMO',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.WBS_MEMO,:NEW.WBS_MEMO); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'WBSMEMO',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_WBSMEMO_DEL
 BEFORE DELETE ON WBSMEMO
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'WBSMEMO',:OLD.WBS_MEMO_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER RT_WBSMEMO
 BEFORE UPDATE OR INSERT ON WBSMEMO
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'WBSMEMO',:OLD.WBS_MEMO_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.WBS_MEMO_ID)
 			  AND TABLE_NAME = 'WBSMEMO';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:21> [INFO] [2017-09-01 13:01:21] CREATE OR REPLACE TRIGGER PRMAUD_WBSRSRC
 AFTER INSERT OR UPDATE OR DELETE ON WBSRSRC
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('WBSRSRC',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.WBSRSRC_ID;
     ELSE
     	VPK1 := :NEW.WBSRSRC_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('WBSRSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC','WBSRSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.WBSRSRC_ID,:NEW.WBSRSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC','RSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_ID,:NEW.RSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('COMMITTED_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC','COMMITTED_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COMMITTED_FLAG,:NEW.COMMITTED_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('START_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC','START_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.START_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.START_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('END_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC','END_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.END_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.END_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('AUTO_COMPUTE_DATES_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC','AUTO_COMPUTE_DATES_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.AUTO_COMPUTE_DATES_FLAG,:NEW.AUTO_COMPUTE_DATES_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('ROLE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC','ROLE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ROLE_ID,:NEW.ROLE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('RSRC_REQUEST_DATA') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC','RSRC_REQUEST_DATA',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.RSRC_REQUEST_DATA,:NEW.RSRC_REQUEST_DATA); END IF;
     IF VOPER <> 'U' OR  UPDATING('ALLOCATION_PCT') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC','ALLOCATION_PCT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.ALLOCATION_PCT,:NEW.ALLOCATION_PCT); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBRS_CAT_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC','WBRS_CAT_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBRS_CAT_ID,:NEW.WBRS_CAT_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'WBSRSRC',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WBSRSRC_DEL
 BEFORE DELETE ON WBSRSRC
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'WBSRSRC',:OLD.WBSRSRC_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WBSRSRC
 BEFORE UPDATE OR INSERT ON WBSRSRC
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'WBSRSRC',:OLD.WBSRSRC_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.WBSRSRC_ID)
 			  AND TABLE_NAME = 'WBSRSRC';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER PRMAUD_WBSRSRC_QTY
 AFTER INSERT OR UPDATE OR DELETE ON WBSRSRC_QTY
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('WBSRSRC_QTY',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.WBSRSRC_ID;
 VPK2 := :OLD.WEEK_START;
 VPK3 := :OLD.MONTH_START;
     ELSE
     	VPK1 := :NEW.WBSRSRC_ID;
 VPK2 := :NEW.WEEK_START;
 VPK3 := :NEW.MONTH_START;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('WBSRSRC_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC_QTY','WBSRSRC_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.WBSRSRC_ID,:NEW.WBSRSRC_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WEEK_START') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC_QTY','WEEK_START',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.WEEK_START,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.WEEK_START,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('MONTH_START') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC_QTY','MONTH_START',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.MONTH_START,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.MONTH_START,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('QTY') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC_QTY','QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.QTY,:NEW.QTY); END IF;
     IF VOPER <> 'U' OR  UPDATING('FIN_DATES_ID1') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC_QTY','FIN_DATES_ID1',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FIN_DATES_ID1,:NEW.FIN_DATES_ID1); END IF;
     IF VOPER <> 'U' OR  UPDATING('FIN_QTY1') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC_QTY','FIN_QTY1',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FIN_QTY1,:NEW.FIN_QTY1); END IF;
     IF VOPER <> 'U' OR  UPDATING('FIN_DATES_ID2') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC_QTY','FIN_DATES_ID2',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FIN_DATES_ID2,:NEW.FIN_DATES_ID2); END IF;
     IF VOPER <> 'U' OR  UPDATING('FIN_QTY2') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSRSRC_QTY','FIN_QTY2',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.FIN_QTY2,:NEW.FIN_QTY2); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'WBSRSRC_QTY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WBSRSRC_QTY_DEL
 BEFORE DELETE ON WBSRSRC_QTY
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'WBSRSRC_QTY',:OLD.WBSRSRC_ID,TO_CHAR(:OLD.WEEK_START,'MM/DD/YYYY HH24:MI:SS'),TO_CHAR(:OLD.MONTH_START,'MM/DD/YYYY HH24:MI:SS'),NULL );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WBSRSRC_QTY
 BEFORE UPDATE OR INSERT ON WBSRSRC_QTY
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.WBSRSRC_ID)
 AND PK2 = TO_CHAR(:NEW.WEEK_START,'MM/DD/YYYY HH24:MI:SS')
 AND PK3 = TO_CHAR(:NEW.MONTH_START,'MM/DD/YYYY HH24:MI:SS')
 		AND TABLE_NAME = 'WBSRSRC_QTY';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'WBSRSRC_QTY',:OLD.WBSRSRC_ID,TO_CHAR(:OLD.WEEK_START,'MM/DD/YYYY HH24:MI:SS'),TO_CHAR(:OLD.MONTH_START,'MM/DD/YYYY HH24:MI:SS'),NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.WBSRSRC_ID)
 AND PK2 = TO_CHAR(:OLD.WEEK_START,'MM/DD/YYYY HH24:MI:SS')
 AND PK3 = TO_CHAR(:OLD.MONTH_START,'MM/DD/YYYY HH24:MI:SS')
 			  AND TABLE_NAME = 'WBSRSRC_QTY';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER PRMAUD_WBSSTEP
 AFTER INSERT OR UPDATE OR DELETE ON WBSSTEP
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('WBSSTEP',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.WBS_STEP_ID;
     ELSE
     	VPK1 := :NEW.WBS_STEP_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('WBS_STEP_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSSTEP','WBS_STEP_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.WBS_STEP_ID,:NEW.WBS_STEP_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSSTEP','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WBS_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSSTEP','WBS_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WBS_ID,:NEW.WBS_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('SEQ_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSSTEP','SEQ_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.SEQ_NUM,:NEW.SEQ_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('COMPLETE_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSSTEP','COMPLETE_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COMPLETE_FLAG,:NEW.COMPLETE_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('STEP_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSSTEP','STEP_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STEP_NAME,:NEW.STEP_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('STEP_WT') THEN	 PRM_AUDIT.AUDIT_DATA ('WBSSTEP','STEP_WT',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STEP_WT,:NEW.STEP_WT); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'WBSSTEP',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WBSSTEP_DEL
 BEFORE DELETE ON WBSSTEP
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'WBSSTEP',:OLD.WBS_STEP_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WBSSTEP
 BEFORE UPDATE OR INSERT ON WBSSTEP
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'WBSSTEP',:OLD.WBS_STEP_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.WBS_STEP_ID)
 			  AND TABLE_NAME = 'WBSSTEP';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER PRMAUD_WKFLTMPL
 AFTER INSERT OR UPDATE OR DELETE ON WKFLTMPL
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('WKFLTMPL',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.WKFL_TMPL_ID;
     ELSE
     	VPK1 := :NEW.WKFL_TMPL_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('WKFL_TMPL_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WKFLTMPL','WKFL_TMPL_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.WKFL_TMPL_ID,:NEW.WKFL_TMPL_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('TEMPLATE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('WKFLTMPL','TEMPLATE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TEMPLATE_NAME,:NEW.TEMPLATE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJECT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('WKFLTMPL','PROJECT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJECT_FLAG,:NEW.PROJECT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('WK_EXTERNAL_KEY') THEN	 PRM_AUDIT.AUDIT_DATA ('WKFLTMPL','WK_EXTERNAL_KEY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WK_EXTERNAL_KEY,:NEW.WK_EXTERNAL_KEY); END IF;
     IF VOPER <> 'U' OR  UPDATING('TMPLCATG_CATG_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WKFLTMPL','TMPLCATG_CATG_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.TMPLCATG_CATG_ID,:NEW.TMPLCATG_CATG_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'WKFLTMPL',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WKFLTMPL_DEL
 BEFORE DELETE ON WKFLTMPL
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'WKFLTMPL',:OLD.WKFL_TMPL_ID,NULL,NULL,NULL );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WKFLTMPL
 BEFORE UPDATE OR INSERT ON WKFLTMPL
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'WKFLTMPL',:OLD.WKFL_TMPL_ID,NULL,NULL,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.WKFL_TMPL_ID)
 			  AND TABLE_NAME = 'WKFLTMPL';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER PRMAUD_WKFLUSER
 AFTER INSERT OR UPDATE OR DELETE ON WKFLUSER
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('WKFLUSER',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.WORK_FLOW_ID;
 VPK2 := :OLD.USER_ID;
 VPK3 := :OLD.STAGE_NUM;
     ELSE
     	VPK1 := :NEW.WORK_FLOW_ID;
 VPK2 := :NEW.USER_ID;
 VPK3 := :NEW.STAGE_NUM;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('WORK_FLOW_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WKFLUSER','WORK_FLOW_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.WORK_FLOW_ID,:NEW.WORK_FLOW_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WKFLUSER','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('STAGE_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('WKFLUSER','STAGE_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STAGE_NUM,:NEW.STAGE_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('COMMENTS') THEN	 PRM_AUDIT.AUDIT_DATA ('WKFLUSER','COMMENTS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.COMMENTS,:NEW.COMMENTS); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'WKFLUSER',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WKFLUSER_DEL
 BEFORE DELETE ON WKFLUSER
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
   VALUES ( SYSDATE,'WKFLUSER',:OLD.WORK_FLOW_ID,:OLD.USER_ID,:OLD.STAGE_NUM,NULL );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WKFLUSER
 BEFORE UPDATE OR INSERT ON WKFLUSER
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 		DELETE FROM REFRDEL
 		WHERE PK1 = TO_CHAR(:NEW.WORK_FLOW_ID)
 AND PK2 = TO_CHAR(:NEW.USER_ID)
 AND PK3 = TO_CHAR(:NEW.STAGE_NUM)
 		AND TABLE_NAME = 'WKFLUSER';
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4)
 			  VALUES ( SYSDATE,'WKFLUSER',:OLD.WORK_FLOW_ID,:OLD.USER_ID,:OLD.STAGE_NUM,NULL );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.WORK_FLOW_ID)
 AND PK2 = TO_CHAR(:OLD.USER_ID)
 AND PK3 = TO_CHAR(:OLD.STAGE_NUM)
 			  AND TABLE_NAME = 'WKFLUSER';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER PRMAUD_WORKFLOW
 AFTER INSERT OR UPDATE OR DELETE ON WORKFLOW
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('WORKFLOW',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.WORK_FLOW_ID;
     ELSE
     	VPK1 := :NEW.WORK_FLOW_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('WORK_FLOW_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKFLOW','WORK_FLOW_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.WORK_FLOW_ID,:NEW.WORK_FLOW_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKFLOW','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WORKFLOW_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKFLOW','WORKFLOW_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WORKFLOW_NAME,:NEW.WORKFLOW_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('EXTERNAL_KEY') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKFLOW','EXTERNAL_KEY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EXTERNAL_KEY,:NEW.EXTERNAL_KEY); END IF;
     IF VOPER <> 'U' OR  UPDATING('STAGE_NUM') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKFLOW','STAGE_NUM',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STAGE_NUM,:NEW.STAGE_NUM); END IF;
     IF VOPER <> 'U' OR  UPDATING('STATUS') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKFLOW','STATUS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STATUS,:NEW.STATUS); END IF;
     IF VOPER <> 'U' OR  UPDATING('EXISTING_PROJECT_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKFLOW','EXISTING_PROJECT_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.EXISTING_PROJECT_FLAG,:NEW.EXISTING_PROJECT_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('STAGE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKFLOW','STAGE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STAGE_NAME,:NEW.STAGE_NAME); END IF;
     IF VOPER <> 'U' OR  UPDATING('STAGE_MODIFIED_FLAG') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKFLOW','STAGE_MODIFIED_FLAG',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.STAGE_MODIFIED_FLAG,:NEW.STAGE_MODIFIED_FLAG); END IF;
     IF VOPER <> 'U' OR  UPDATING('INITIATED_DATE') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKFLOW','INITIATED_DATE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,TO_CHAR(:OLD.INITIATED_DATE,'YYYYMMDDHH24MISS'),TO_CHAR(:NEW.INITIATED_DATE,'YYYYMMDDHH24MISS')); END IF;
     IF VOPER <> 'U' OR  UPDATING('WORKSPACE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKFLOW','WORKSPACE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WORKSPACE_ID,:NEW.WORKSPACE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('USER_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKFLOW','USER_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.USER_ID,:NEW.USER_ID); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'WORKFLOW',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WORKFLOW_DEL
 BEFORE DELETE ON WORKFLOW
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'WORKFLOW',:OLD.WORK_FLOW_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WORKFLOW
 BEFORE UPDATE OR INSERT ON WORKFLOW
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'WORKFLOW',:OLD.WORK_FLOW_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.WORK_FLOW_ID)
 			  AND TABLE_NAME = 'WORKFLOW';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER PRMAUD_WORKSPACE
 AFTER INSERT OR UPDATE OR DELETE ON WORKSPACE
 FOR EACH ROW
 DECLARE
   VPK1          VARCHAR2(255);
   VPK2          VARCHAR2(255);
   VPK3          VARCHAR2(255);
   VPK4          VARCHAR2(255);
   VOPER         CHAR(1);
   VAUDIT        NUMBER;
   VINSERT_LEVEL NUMBER;
   VUPDATE_LEVEL NUMBER;
   VDELETE_LEVEL NUMBER;
   VCOL_AUDIT    VARCHAR2(255);
   VSESSION_ID   NUMBER;
   VPRM_USER_NAME USERS.USER_NAME%TYPE;
   VAPP_NAME     VARCHAR2(25);
   VPROGRAM_NAME VARCHAR2(255);
   VHOSTNAME     VARCHAR2(255);
   VNETADDRESS   VARCHAR2(64);
   VRDBMS_USER   VARCHAR2(30);
   VOS_USER      VARCHAR2(30);
   VLOGICAL_DELETE		VARCHAR2(1);
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   PRM_AUDIT.TAB_OPTIONS ('WORKSPACE',VAUDIT,VINSERT_LEVEL,VUPDATE_LEVEL,VDELETE_LEVEL,VCOL_AUDIT);
   IF NVL(VAUDIT,0) < 1 THEN RETURN; END IF ;
   PRM_AUDIT.PRM_USER (VSESSION_ID,VPRM_USER_NAME,VAPP_NAME);
   PRM_AUDIT.PROC_INFO (VPROGRAM_NAME, VHOSTNAME, VNETADDRESS, VRDBMS_USER, VOS_USER );
   VLOGICAL_DELETE := 'N';
   PRM_AUDIT.G_AUDIT_DATA:=NULL;
   IF PRM_AUDIT.G_AUDIT_EXTENDED IS NULL THEN
     DBMS_LOB.CREATETEMPORARY(PRM_AUDIT.G_AUDIT_EXTENDED,TRUE,DBMS_LOB.SESSION);
   ELSE
     DBMS_LOB.TRIM(PRM_AUDIT.G_AUDIT_EXTENDED,0);
   END IF;
   IF UPDATING THEN     
     IF :OLD.DELETE_SESSION_ID IS NULL AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
       VLOGICAL_DELETE := 'Y';
       VOPER := 'D';
     ELSE
       VOPER := 'U';
     END IF;
   ELSIF INSERTING THEN VOPER := 'I';
   ELSE                 VOPER := 'D';
   END IF;
 IF    (VOPER = 'U' AND VUPDATE_LEVEL = 0 ) OR ( VOPER = 'I' AND VINSERT_LEVEL =0) OR (VOPER = 'D' AND VDELETE_LEVEL = 0) THEN RETURN; END IF ;
   IF DELETING THEN
     VPK1 := :OLD.WORKSPACE_ID;
     ELSE
     	VPK1 := :NEW.WORKSPACE_ID;
   END IF;
   IF (VOPER = 'U' AND VUPDATE_LEVEL >= 2 ) OR ( VOPER = 'I' AND VINSERT_LEVEL >= 2)
        OR (VOPER = 'D' AND VDELETE_LEVEL >= 2) THEN
     IF VOPER <> 'U' OR  UPDATING('WORKSPACE_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKSPACE','WORKSPACE_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'Y'
 				,:OLD.WORKSPACE_ID,:NEW.WORKSPACE_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WORKSPACE_TYPE') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKSPACE','WORKSPACE_TYPE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WORKSPACE_TYPE,:NEW.WORKSPACE_TYPE); END IF;
     IF VOPER <> 'U' OR  UPDATING('PROJ_ID') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKSPACE','PROJ_ID',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.PROJ_ID,:NEW.PROJ_ID); END IF;
     IF VOPER <> 'U' OR  UPDATING('WORKSPACE_NAME') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKSPACE','WORKSPACE_NAME',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.WORKSPACE_NAME,:NEW.WORKSPACE_NAME); END IF;
     IF VOPER <> 'U' OR ( UPDATING('WORKSPACE_PREFS') AND VUPDATE_LEVEL >= 3 ) THEN	 
        PRM_AUDIT.AUDIT_BLOB ('WORKSPACE','WORKSPACE_PREFS',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1
        ,VLOGICAL_DELETE,'N'       
        ,:OLD.WORKSPACE_PREFS,:NEW.WORKSPACE_PREFS); END IF;
     IF VOPER <> 'U' OR  UPDATING('CR_EXTERNAL_KEY') THEN	 PRM_AUDIT.AUDIT_DATA ('WORKSPACE','CR_EXTERNAL_KEY',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
        ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,1,VLOGICAL_DELETE,'N'
 				,:OLD.CR_EXTERNAL_KEY,:NEW.CR_EXTERNAL_KEY); END IF;
   END IF;
       PRM_AUDIT.AUDIT_ROW ( 'WORKSPACE',VOPER,VPK1,VPK2,VPK3,VPK4,VPRM_USER_NAME
                      ,VPROGRAM_NAME,VHOSTNAME,VNETADDRESS,VRDBMS_USER,VOS_USER,VAPP_NAME,VLOGICAL_DELETE,'Y' );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WORKSPACE_DEL
 BEFORE DELETE ON WORKSPACE
 FOR EACH ROW
 DECLARE
 BEGIN
   INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
   VALUES ( SYSDATE,'WORKSPACE',:OLD.WORKSPACE_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] CREATE OR REPLACE TRIGGER RT_WORKSPACE
 BEFORE UPDATE OR INSERT ON WORKSPACE
 FOR EACH ROW
 BEGIN
   IF DBMS_REPUTIL.FROM_REMOTE = TRUE THEN   RETURN; END IF;
   :NEW.UPDATE_DATE := SYSDATE;
 :NEW.UPDATE_USER := PRM_AUDIT.GET_USER;
 	  IF INSERTING THEN
 		:NEW.CREATE_USER := PRM_AUDIT.GET_USER;
 		:NEW.CREATE_DATE := SYSDATE;
 	  END IF;
 		  IF UPDATING ('DELETE_SESSION_ID')  THEN
 			IF :OLD.DELETE_SESSION_ID IS NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NOT NULL THEN
 			  INSERT INTO REFRDEL ( DELETE_DATE,TABLE_NAME, PK1,PK2,PK3,PK4,PROJ_ID)
 			  VALUES ( SYSDATE,'WORKSPACE',:OLD.WORKSPACE_ID,NULL,NULL,NULL
   	,:OLD.PROJ_ID );
 			ELSIF :OLD.DELETE_SESSION_ID IS NOT NULL 
 			   AND :NEW.DELETE_SESSION_ID IS NULL THEN
 			  DELETE FROM REFRDEL
 			  WHERE PK1 = TO_CHAR(:OLD.WORKSPACE_ID)
 			  AND TABLE_NAME = 'WORKSPACE';
 			END IF;
 		  END IF;
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] DECLARE
   VPRIVATE_USER VARCHAR2(40);
   VPRIVATE_PASSWD VARCHAR2(255);
 BEGIN
   VPRIVATE_USER := 'PRIVPRM$PM';
   VPRIVATE_PASSWD := 'AE03175897DE7D57A669B83B0CE7D1604917691B906829B2F87DA3DA9B557BEAF625AE03';
   IF INSTR(VPRIVATE_USER,'${') = 0 THEN
     DELETE FROM PUBUSER WHERE PUBLIC_GROUP_ID = 1;
     INSERT INTO PUBUSER (PUBLIC_GROUP_ID, PRIVATE_DB_USER_NAME, PRIVATE_DB_PASSWD)
     VALUES (1, VPRIVATE_USER, VPRIVATE_PASSWD );
   END IF;
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] UPDATE PREFER SET DATABASE_VERSION='PPMDB,0820.0001.0001.0002'
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] DECLARE
 BGUSER VARCHAR(255);
 BGPASS VARCHAR(255);
 BEGIN
 BEGIN
 BGUSER:='BGJOB$PM';
 BGPASS:='ADMIN';
 IF (INSTR(BGUSER,'${') > 0 OR LENGTH(BGUSER) = 0) THEN
 BGUSER:='BGJOB$PM';
 BGPASS:='BGJOB$PM';
 END IF;
 END;
 EXECUTE IMMEDIATE 'CREATE USER '|| BGUSER || ' IDENTIFIED BY --- BGPASS || ' TEMPORARY TABLESPACE TEMP
        DEFAULT   TABLESPACE PMDB_DAT1';
 END;
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] GRANT CREATE SESSION,CREATE JOB TO BGJOB$PM
<09.01.2017 13:01:22> [INFO] [2017-09-01 13:01:22] DECLARE ROLEEXISTS INTEGER;
 BEGIN
  SELECT COUNT(*) INTO ROLEEXISTS FROM DBA_ROLES WHERE ROLE='PM_BG_JOB_ROLE';
  IF (ROLEEXISTS=0) THEN
  BEGIN
       EXECUTE IMMEDIATE 'CREATE ROLE PM_BG_JOB_ROLE';
  END;
  END IF;
  EXECUTE IMMEDIATE 'GRANT EXECUTE ON DATA_MONITOR TO PM_BG_JOB_ROLE';
  EXECUTE IMMEDIATE 'GRANT EXECUTE ON SYSTEM_MONITOR TO PM_BG_JOB_ROLE';
  EXECUTE IMMEDIATE 'GRANT EXECUTE ON SETTINGS_READ_STRING TO PM_BG_JOB_ROLE';
  EXECUTE IMMEDIATE 'GRANT EXECUTE ON SETTINGS_WRITE_STRING TO PM_BG_JOB_ROLE';
  EXECUTE IMMEDIATE 'GRANT EXECUTE ON INITIALIZE_BACKGROUND_PROCS TO PM_BG_JOB_ROLE';
  EXECUTE IMMEDIATE 'GRANT EXECUTE ON ADD_DATABASE_JOB TO PM_BG_JOB_ROLE';
  EXECUTE IMMEDIATE 'GRANT PM_BG_JOB_ROLE TO BGJOB$PM';
  EXECUTE IMMEDIATE 'CREATE OR REPLACE  SYNONYM BGJOB$PM.DATA_MONITOR FOR DATA_MONITOR';
  EXECUTE IMMEDIATE 'CREATE OR REPLACE  SYNONYM BGJOB$PM.SYSTEM_MONITOR FOR SYSTEM_MONITOR';
  EXECUTE IMMEDIATE 'CREATE OR REPLACE  SYNONYM BGJOB$PM.SETTINGS_READ_STRING FOR SETTINGS_READ_STRING';
  EXECUTE IMMEDIATE 'CREATE OR REPLACE  SYNONYM BGJOB$PM.SETTINGS_WRITE_STRING FOR SETTINGS_WRITE_STRING';
  EXECUTE IMMEDIATE 'CREATE OR REPLACE  SYNONYM BGJOB$PM.INITIALIZE_BACKGROUND_PROCS FOR INITIALIZE_BACKGROUND_PROCS';
  EXECUTE IMMEDIATE 'CREATE OR REPLACE  SYNONYM BGJOB$PM.ADD_DATABASE_JOB FOR ADD_DATABASE_JOB';
 END;
<09.01.2017 13:01:23> [INFO] [2017-09-01 13:01:23] BEGIN INITIALIZE_BACKGROUND_PROCS; END;
